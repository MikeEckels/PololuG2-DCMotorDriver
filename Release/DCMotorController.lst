
C:\Users\Eckels001\AppData\Local\Temp\VMBuilds\DCMotorController\teensy40\Release/DCMotorController.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 40 51 00 00 00 00 00 00                 ...`@Q......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b76      	ldr	r3, [pc, #472]	; (60001210 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a76      	ldr	r2, [pc, #472]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4876      	ldr	r0, [pc, #472]	; (60001218 <ResetHandler+0x1e4>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a76      	ldr	r2, [pc, #472]	; (6000121c <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a75      	ldr	r2, [pc, #468]	; (60001220 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4975      	ldr	r1, [pc, #468]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	4b73      	ldr	r3, [pc, #460]	; (60001228 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x46>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6c      	ldr	r2, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107c:	496c      	ldr	r1, [pc, #432]	; (60001230 <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	4b6c      	ldr	r3, [pc, #432]	; (60001234 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a65      	ldr	r2, [pc, #404]	; (60001238 <ResetHandler+0x204>)
600010a4:	4b65      	ldr	r3, [pc, #404]	; (6000123c <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5f      	ldr	r2, [pc, #380]	; (60001240 <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5e      	ldr	r3, [pc, #376]	; (60001244 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5d      	ldr	r2, [pc, #372]	; (60001248 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	4b5c      	ldr	r3, [pc, #368]	; (6000124c <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5c      	ldr	r2, [pc, #368]	; (60001250 <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c5a      	ldr	r4, [pc, #360]	; (60001254 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e5a      	ldr	r6, [pc, #360]	; (60001258 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 60001298 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 6000129c <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 600012a0 <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	4b56      	ldr	r3, [pc, #344]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	4942      	ldr	r1, [pc, #264]	; (60001210 <ResetHandler+0x1dc>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	69f3      	ldr	r3, [r6, #28]
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8df 	bl	600012fc <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a48      	ldr	r2, [pc, #288]	; (60001260 <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b48      	ldr	r3, [pc, #288]	; (60001264 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4948      	ldr	r1, [pc, #288]	; (60001268 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4945      	ldr	r1, [pc, #276]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4846      	ldr	r0, [pc, #280]	; (60001274 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a45      	ldr	r2, [pc, #276]	; (60001278 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4844      	ldr	r0, [pc, #272]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4943      	ldr	r1, [pc, #268]	; (60001280 <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f93a 	bl	600013f4 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483f      	ldr	r0, [pc, #252]	; (60001284 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fad5 	bl	60001740 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	bf00      	nop
60001198:	bf00      	nop
6000119a:	bf00      	nop
6000119c:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	4a39      	ldr	r2, [pc, #228]	; (60001288 <ResetHandler+0x254>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	4b39      	ldr	r3, [pc, #228]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011be:	07d2      	lsls	r2, r2, #31
600011c0:	d408      	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	4932      	ldr	r1, [pc, #200]	; (60001290 <ResetHandler+0x25c>)
600011c8:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011ce:	f042 0201 	orr.w	r2, r2, #1
600011d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	4a2d      	ldr	r2, [pc, #180]	; (6000128c <ResetHandler+0x258>)
600011d6:	4c2f      	ldr	r4, [pc, #188]	; (60001294 <ResetHandler+0x260>)
600011d8:	6893      	ldr	r3, [r2, #8]
600011da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011de:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011e0:	f000 faaa 	bl	60001738 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011e6:	2b13      	cmp	r3, #19
600011e8:	d9fc      	bls.n	600011e4 <ResetHandler+0x1b0>
	usb_init();
600011ea:	f000 f9c3 	bl	60001574 <usb_init>
	analog_init();
600011ee:	f000 f859 	bl	600012a4 <analog_init>
	pwm_init();
600011f2:	f000 fabd 	bl	60001770 <__pwm_init_veneer>
	tempmon_init();
600011f6:	f000 f92f 	bl	60001458 <tempmon_init>

	startup_late_hook();
600011fa:	f000 faa5 	bl	60001748 <__startup_late_hook_veneer>
600011fe:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001200:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
60001204:	d3fb      	bcc.n	600011fe <ResetHandler+0x1ca>
	//printf("before C++ constructors\n");
	__libc_init_array();
60001206:	f000 fab7 	bl	60001778 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120a:	f000 faa1 	bl	60001750 <__main_veneer>
6000120e:	e7fe      	b.n	6000120e <ResetHandler+0x1da>
60001210:	400ac000 	.word	0x400ac000
60001214:	aaaaaaab 	.word	0xaaaaaaab
60001218:	00200007 	.word	0x00200007
6000121c:	20078000 	.word	0x20078000
60001220:	00000000 	.word	0x00000000
60001224:	60001790 	.word	0x60001790
60001228:	00002d10 	.word	0x00002d10
6000122c:	20000000 	.word	0x20000000
60001230:	600044a4 	.word	0x600044a4
60001234:	20000ca0 	.word	0x20000ca0
60001238:	20000ca0 	.word	0x20000ca0
6000123c:	200032c0 	.word	0x200032c0
60001240:	e000ed88 	.word	0xe000ed88
60001244:	20000ffc 	.word	0x20000ffc
60001248:	00000ba5 	.word	0x00000ba5
6000124c:	e000e400 	.word	0xe000e400
60001250:	e000e4a0 	.word	0xe000e4a0
60001254:	400d8000 	.word	0x400d8000
60001258:	400fc000 	.word	0x400fc000
6000125c:	e000ed08 	.word	0xe000ed08
60001260:	e000e014 	.word	0xe000e014
60001264:	e000e018 	.word	0xe000e018
60001268:	00001d81 	.word	0x00001d81
6000126c:	e000edfc 	.word	0xe000edfc
60001270:	20200000 	.word	0x20200000
60001274:	00001d85 	.word	0x00001d85
60001278:	e0001000 	.word	0xe0001000
6000127c:	e0001004 	.word	0xe0001004
60001280:	20000ce4 	.word	0x20000ce4
60001284:	23c34600 	.word	0x23c34600
60001288:	40084000 	.word	0x40084000
6000128c:	400d4000 	.word	0x400d4000
60001290:	56c00000 	.word	0x56c00000
60001294:	20000cec 	.word	0x20000cec
60001298:	20001000 	.word	0x20001000
6000129c:	2018101b 	.word	0x2018101b
600012a0:	13110d0c 	.word	0x13110d0c

600012a4 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a4:	4b11      	ldr	r3, [pc, #68]	; (600012ec <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012a6:	4912      	ldr	r1, [pc, #72]	; (600012f0 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012aa:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012ac:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600012b0:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012b2:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012b4:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012b8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012ba:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012bc:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600012c0:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600012c2:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012c4:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012c6:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012c8:	061b      	lsls	r3, r3, #24
600012ca:	d4fc      	bmi.n	600012c6 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600012cc:	4b09      	ldr	r3, [pc, #36]	; (600012f4 <analog_init+0x50>)
600012ce:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d2:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012d4:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600012d6:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d8:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012da:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012dc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600012e0:	d1fb      	bne.n	600012da <analog_init+0x36>
	calibrating = 0;
600012e2:	4a05      	ldr	r2, [pc, #20]	; (600012f8 <analog_init+0x54>)
600012e4:	7013      	strb	r3, [r2, #0]
}
600012e6:	bc30      	pop	{r4, r5}
600012e8:	4770      	bx	lr
600012ea:	bf00      	nop
600012ec:	400fc000 	.word	0x400fc000
600012f0:	400c4000 	.word	0x400c4000
600012f4:	400c8000 	.word	0x400c8000
600012f8:	20000ce0 	.word	0x20000ce0

600012fc <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012fe:	4a28      	ldr	r2, [pc, #160]	; (600013a0 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001300:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001302:	4b28      	ldr	r3, [pc, #160]	; (600013a4 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001304:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001308:	4c27      	ldr	r4, [pc, #156]	; (600013a8 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000130a:	2711      	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000130c:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 600013e8 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001310:	2612      	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001312:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001314:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001316:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000131a:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000131e:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001320:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 600013ec <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001324:	4f21      	ldr	r7, [pc, #132]	; (600013ac <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001326:	f8c3 e000 	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000132a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000132c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000132e:	4e20      	ldr	r6, [pc, #128]	; (600013b0 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001330:	4f20      	ldr	r7, [pc, #128]	; (600013b4 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001332:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001334:	4920      	ldr	r1, [pc, #128]	; (600013b8 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001336:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001338:	4e20      	ldr	r6, [pc, #128]	; (600013bc <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000133a:	f041 0115 	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000133e:	4f20      	ldr	r7, [pc, #128]	; (600013c0 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001340:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001342:	601f      	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001344:	f507 3740 	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001348:	4e1e      	ldr	r6, [pc, #120]	; (600013c4 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000134a:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000134c:	3702      	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000134e:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001350:	f8df e09c 	ldr.w	lr, [pc, #156]	; 600013f0 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001354:	4e1c      	ldr	r6, [pc, #112]	; (600013c8 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001356:	491d      	ldr	r1, [pc, #116]	; (600013cc <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001358:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000135c:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000135e:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001360:	4f1b      	ldr	r7, [pc, #108]	; (600013d0 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001362:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001364:	4e1b      	ldr	r6, [pc, #108]	; (600013d4 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001366:	491c      	ldr	r1, [pc, #112]	; (600013d8 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001368:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000136a:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
6000136c:	4f1b      	ldr	r7, [pc, #108]	; (600013dc <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000136e:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001370:	4e1b      	ldr	r6, [pc, #108]	; (600013e0 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001372:	491c      	ldr	r1, [pc, #112]	; (600013e4 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001374:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001376:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001378:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000137a:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000137c:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001380:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001384:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001388:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000138c:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001390:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001394:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001398:	f842 3c88 	str.w	r3, [r2, #-136]
6000139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000139e:	bf00      	nop
600013a0:	e000ed9c 	.word	0xe000ed9c
600013a4:	e000eda0 	.word	0xe000eda0
600013a8:	e000ed94 	.word	0xe000ed94
600013ac:	00100009 	.word	0x00100009
600013b0:	00200013 	.word	0x00200013
600013b4:	07020021 	.word	0x07020021
600013b8:	200032c0 	.word	0x200032c0
600013bc:	20000014 	.word	0x20000014
600013c0:	13080025 	.word	0x13080025
600013c4:	10000009 	.word	0x10000009
600013c8:	40000017 	.word	0x40000017
600013cc:	13100033 	.word	0x13100033
600013d0:	60000018 	.word	0x60000018
600013d4:	070b002f 	.word	0x070b002f
600013d8:	70000019 	.word	0x70000019
600013dc:	170b0037 	.word	0x170b0037
600013e0:	7000001a 	.word	0x7000001a
600013e4:	130b002f 	.word	0x130b002f
600013e8:	1000003f 	.word	0x1000003f
600013ec:	03080025 	.word	0x03080025
600013f0:	20200016 	.word	0x20200016

600013f4 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
600013f4:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013f6:	4a17      	ldr	r2, [pc, #92]	; (60001454 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013f8:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013fe:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001402:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001406:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000140a:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000140e:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001410:	f013 0f02 	tst.w	r3, #2
60001414:	d006      	beq.n	60001424 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001416:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001418:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000141a:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000141c:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000141e:	f013 0f02 	tst.w	r3, #2
60001422:	d1f8      	bne.n	60001416 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001424:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001428:	d101      	bne.n	6000142e <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000142a:	6155      	str	r5, [r2, #20]
			continue;
6000142c:	e7ef      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000142e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001432:	d101      	bne.n	60001438 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001434:	6156      	str	r6, [r2, #20]
			continue;
60001436:	e7ea      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001438:	2b00      	cmp	r3, #0
6000143a:	dae8      	bge.n	6000140e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
6000143c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001440:	d001      	beq.n	60001446 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001442:	6191      	str	r1, [r2, #24]
			continue;
60001444:	e7e3      	b.n	6000140e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001446:	065b      	lsls	r3, r3, #25
60001448:	d401      	bmi.n	6000144e <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000144a:	6157      	str	r7, [r2, #20]
			continue;
6000144c:	e7df      	b.n	6000140e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
6000144e:	bcf0      	pop	{r4, r5, r6, r7}
60001450:	4770      	bx	lr
60001452:	bf00      	nop
60001454:	400d8000 	.word	0x400d8000

60001458 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001458:	4a3b      	ldr	r2, [pc, #236]	; (60001548 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000145a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000145e:	493b      	ldr	r1, [pc, #236]	; (6000154c <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001460:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001462:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001464:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001466:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000146a:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000146c:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001570 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001470:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001472:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001476:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000147a:	4f35      	ldr	r7, [pc, #212]	; (60001550 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000147c:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000147e:	f3c3 240b 	ubfx	r4, r3, #8, #12
60001482:	4e34      	ldr	r6, [pc, #208]	; (60001554 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001484:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001488:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000148c:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001490:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001498:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000149c:	ee07 4a90 	vmov	s15, r4
600014a0:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600014a4:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014a6:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014aa:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014ae:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600014b2:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014b4:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014bc:	4d26      	ldr	r5, [pc, #152]	; (60001558 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014be:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014c2:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014c4:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600014cc:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014ce:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600014d2:	4e22      	ldr	r6, [pc, #136]	; (6000155c <tempmon_init+0x104>)
600014d4:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014d6:	4922      	ldr	r1, [pc, #136]	; (60001560 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014d8:	4c22      	ldr	r4, [pc, #136]	; (60001564 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014da:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014de:	ee07 3a90 	vmov	s15, r3
600014e2:	4b21      	ldr	r3, [pc, #132]	; (60001568 <tempmon_init+0x110>)
600014e4:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
600014e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
600014ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f0:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014f4:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014f8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014fc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001500:	ee15 3a90 	vmov	r3, s11
60001504:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001508:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000150c:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001510:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001512:	ea01 4105 	and.w	r1, r1, r5, lsl #16
60001516:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000151a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000151e:	430b      	orrs	r3, r1
60001520:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001524:	ee17 3a90 	vmov	r3, s15
60001528:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
6000152c:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001530:	430b      	orrs	r3, r1
60001532:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001536:	6813      	ldr	r3, [r2, #0]
60001538:	f043 0302 	orr.w	r3, r3, #2
6000153c:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000153e:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001540:	4b0a      	ldr	r3, [pc, #40]	; (6000156c <tempmon_init+0x114>)
60001542:	2201      	movs	r2, #1
60001544:	601a      	str	r2, [r3, #0]
60001546:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001548:	400d8180 	.word	0x400d8180
6000154c:	401f4400 	.word	0x401f4400
60001550:	20000cf8 	.word	0x20000cf8
60001554:	20000cfc 	.word	0x20000cfc
60001558:	20000cf4 	.word	0x20000cf4
6000155c:	20001000 	.word	0x20001000
60001560:	0fff0000 	.word	0x0fff0000
60001564:	e000e440 	.word	0xe000e440
60001568:	00000c81 	.word	0x00000c81
6000156c:	e000e108 	.word	0xe000e108
60001570:	20000cf0 	.word	0x20000cf0

60001574 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001574:	4b30      	ldr	r3, [pc, #192]	; (60001638 <usb_init+0xc4>)
60001576:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000157a:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000157c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001580:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001584:	f000 f8f0 	bl	60001768 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001588:	492c      	ldr	r1, [pc, #176]	; (6000163c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000158a:	482d      	ldr	r0, [pc, #180]	; (60001640 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000158c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001590:	4c2c      	ldr	r4, [pc, #176]	; (60001644 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001592:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001596:	4b2c      	ldr	r3, [pc, #176]	; (60001648 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001598:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000159c:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600015a0:	6822      	ldr	r2, [r4, #0]
600015a2:	4013      	ands	r3, r2
600015a4:	b91b      	cbnz	r3, 600015ae <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600015a6:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
600015aa:	079a      	lsls	r2, r3, #30
600015ac:	d01a      	beq.n	600015e4 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015ae:	4b24      	ldr	r3, [pc, #144]	; (60001640 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600015b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600015b4:	4a23      	ldr	r2, [pc, #140]	; (60001644 <usb_init+0xd0>)
600015b6:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015b8:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600015ba:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
600015be:	f041 0102 	orr.w	r1, r1, #2
600015c2:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600015c6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600015ca:	079b      	lsls	r3, r3, #30
600015cc:	d4fb      	bmi.n	600015c6 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600015d2:	491e      	ldr	r1, [pc, #120]	; (6000164c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015d4:	4b1b      	ldr	r3, [pc, #108]	; (60001644 <usb_init+0xd0>)
600015d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600015da:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015dc:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600015de:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600015e0:	f000 f8ba 	bl	60001758 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015e4:	4d1a      	ldr	r5, [pc, #104]	; (60001650 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015e6:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015e8:	4b16      	ldr	r3, [pc, #88]	; (60001644 <usb_init+0xd0>)
600015ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015ee:	4c14      	ldr	r4, [pc, #80]	; (60001640 <usb_init+0xcc>)
600015f0:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600015f2:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015f4:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600015f6:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015f8:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600015fa:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600015fe:	f44f 7220 	mov.w	r2, #640	; 0x280
60001602:	f000 f8ad 	bl	60001760 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001606:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000160a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000160e:	f240 1343 	movw	r3, #323	; 0x143
60001612:	4a10      	ldr	r2, [pc, #64]	; (60001654 <usb_init+0xe0>)
60001614:	4910      	ldr	r1, [pc, #64]	; (60001658 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001616:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001618:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000161a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
6000161e:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001622:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001626:	4a0d      	ldr	r2, [pc, #52]	; (6000165c <usb_init+0xe8>)
60001628:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000162c:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000162e:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001630:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
60001634:	bd70      	pop	{r4, r5, r6, pc}
60001636:	bf00      	nop
60001638:	400d8000 	.word	0x400d8000
6000163c:	400fc000 	.word	0x400fc000
60001640:	402e0000 	.word	0x402e0000
60001644:	400d9000 	.word	0x400d9000
60001648:	001e1c00 	.word	0x001e1c00
6000164c:	e000e28c 	.word	0xe000e28c
60001650:	20003000 	.word	0x20003000
60001654:	20001000 	.word	0x20001000
60001658:	00000ded 	.word	0x00000ded
6000165c:	e000e10c 	.word	0xe000e10c

60001660 <usb_string_product_name_default>:
60001660:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
60001670:	00610069 0000006c                       i.a.l...

60001678 <usb_string_manufacturer_name_default>:
60001678:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001688:	00690075 006f006e                       u.i.n.o.

60001690 <string0>:
60001690:	04090304                                ....

60001694 <usb_config_descriptor_12>:
60001694:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016a4:	24050001 05011000 01010124 06022404     ...$....$....$..
600016b4:	00062405 82050701 10001003 00010409     .$..............
600016c4:	00000a02 03050700 00004002 02840507     .........@......
600016d4:	00000040                                @...

600016d8 <usb_config_descriptor_480>:
600016d8:	00430209 c0000102 00040932 02020100     ..C.....2.......
600016e8:	24050001 05011000 01010124 06022404     ...$....$....$..
600016f8:	00062405 82050701 05001003 00010409     .$..............
60001708:	00000a02 03050700 00020002 02840507     ................
60001718:	00000200                                ....

6000171c <qualifier_descriptor>:
6000171c:	0200060a 40000002 ff010001                       .......@..

60001726 <_serialEvent_default>:
60001726:	b5f8ff01                                         ..

60001728 <_init>:
60001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000172a:	bf00      	nop
6000172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000172e:	bc08      	pop	{r3}
60001730:	469e      	mov	lr, r3
60001732:	4770      	bx	lr
60001734:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

60001738 <__startup_early_hook_veneer>:
60001738:	f85f f000 	ldr.w	pc, [pc]	; 6000173c <__startup_early_hook_veneer+0x4>
6000173c:	00000bbd 	.word	0x00000bbd

60001740 <__set_arm_clock_veneer>:
60001740:	f85f f000 	ldr.w	pc, [pc]	; 60001744 <__set_arm_clock_veneer+0x4>
60001744:	000020e1 	.word	0x000020e1

60001748 <__startup_late_hook_veneer>:
60001748:	f85f f000 	ldr.w	pc, [pc]	; 6000174c <__startup_late_hook_veneer+0x4>
6000174c:	00000bc1 	.word	0x00000bc1

60001750 <__main_veneer>:
60001750:	f85f f000 	ldr.w	pc, [pc]	; 60001754 <__main_veneer+0x4>
60001754:	00001da5 	.word	0x00001da5

60001758 <__delay_veneer>:
60001758:	f85f f000 	ldr.w	pc, [pc]	; 6000175c <__delay_veneer+0x4>
6000175c:	000003e9 	.word	0x000003e9

60001760 <__memset_veneer>:
60001760:	f85f f000 	ldr.w	pc, [pc]	; 60001764 <__memset_veneer+0x4>
60001764:	000029d5 	.word	0x000029d5

60001768 <__usb_init_serialnumber_veneer>:
60001768:	f85f f000 	ldr.w	pc, [pc]	; 6000176c <__usb_init_serialnumber_veneer+0x4>
6000176c:	000015a5 	.word	0x000015a5

60001770 <__pwm_init_veneer>:
60001770:	f85f f000 	ldr.w	pc, [pc]	; 60001774 <__pwm_init_veneer+0x4>
60001774:	000008ed 	.word	0x000008ed

60001778 <____libc_init_array_veneer>:
60001778:	f85f f000 	ldr.w	pc, [pc]	; 6000177c <____libc_init_array_veneer+0x4>
6000177c:	00002405 	.word	0x00002405

60001780 <__init_array_start>:
60001780:	00000045 	.word	0x00000045
60001784:	00000129 	.word	0x00000129

60001788 <__init_array_end>:
60001788:	ffffffff 	.word	0xffffffff
6000178c:	ffffffff 	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	b933      	.short	0xb933

    return tmeas;
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	movs	r3, #1
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
      38:	20000ca0 	.word	0x20000ca0
      3c:	0000      	movs	r0, r0
      3e:	0000      	.short	0x0000
}
      40:	2d14      	cmp	r5, #20
	...

00000044 <frame_dummy>:
      44:	b5104b08 	.word	0xb5104b08
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	ldr	r3, [pc, #28]	; (78 <frame_dummy+0x34>)
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	d0fb2b00 	.word	0xd0fb2b00
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      64:	4718      	bx	r3
      66:	bf00      	nop
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	0ca4      	lsrs	r4, r4, #18
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	2d14      	cmp	r5, #20
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	0ca0      	lsrs	r0, r4, #18
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <setup>:
#include "PololuG2.h"

PololuG2 motorDriver;

void setup()
{
      7c:	4c08b510 	.word	0x4c08b510
	Serial.begin(9600);

	motorDriver.Begin();
      80:	4620      	mov	r0, r4
      82:	f000      	.short	0xf000
      84:	f95b 4620 	ldr??.w	r4, [fp, <undefined>]
	motorDriver.Sleep();
      88:	f000 f8dc 	bl	244 <PololuG2::Sleep()>
	//motorDriver.SetSpeedRpm(100);
	//motorDriver.SetDirection(1);
	motorDriver.SetVoltage(0);
      8c:	4620      	mov	r0, r4
      8e:	2100      	.short	0x2100
      90:	f000 f8ec 	bl	26c <PololuG2::SetVoltage(short)>
	motorDriver.Wake();
      94:	4620      	mov	r0, r4
}
      96:	e8bd      	.short	0xe8bd
      98:	4010      	ands	r0, r2
	motorDriver.Begin();
	motorDriver.Sleep();
	//motorDriver.SetSpeedRpm(100);
	//motorDriver.SetDirection(1);
	motorDriver.SetVoltage(0);
	motorDriver.Wake();
      9a:	f000      	.short	0xf000
      9c:	b8cf      			; <UNDEFINED> instruction: 0xb8cf
      9e:	bf00      	.short	0xbf00
      a0:	0cbc      	lsrs	r4, r7, #18
      a2:	2000      	.short	0x2000

000000a4 <loop>:
}

void loop()
{
      a4:	b570      	push	{r4, r5, r6, lr}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
      a6:	f001      	.short	0xf001
      a8:	fd61 2800 	stc2l	8, cr2, [r1, #-0]
	while (Serial.available() > 0) {
      ac:	dd27      	ble.n	fe <loop+0x5a>
      ae:	481a      	.short	0x481a
		int speedType = Serial.parseInt();
      b0:	f001 feec 	bl	1e8c <Stream::parseInt()>
      b4:	48184605 	.word	0x48184605
		int speed = Serial.parseInt();
      b8:	f001 fee8 	bl	1e8c <Stream::parseInt()>
      bc:	48164604 	.word	0x48164604
		int dir = Serial.parseInt();
      c0:	f001 fee4 	bl	1e8c <Stream::parseInt()>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      c4:	4606210b 	.word	0x4606210b
      c8:	4814      	ldr	r0, [pc, #80]	; (11c <loop+0x78>)

		if (speedType) {
      ca:	b1cd      	.short	0xb1cd
      cc:	f001 fdb4 	bl	1c38 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
      d0:	4811      	ldr	r0, [pc, #68]	; (118 <loop+0x74>)
      d2:	f001      	.short	0xf001
      d4:	fe71 4812 	mrc2	8, 3, r4, cr1, cr2, {0}
			Serial.println("Setting RPM");
			motorDriver.Sleep();
      d8:	f8b4f000 	.word	0xf8b4f000
			motorDriver.SetSpeedRpm(speed);
      dc:	4621      	mov	r1, r4
      de:	4810      	.short	0x4810
      e0:	f000 f8ee 	bl	2c0 <PololuG2::SetSpeedRpm(int)>
			motorDriver.SetDirection((bool)dir);
      e4:	480e1c31 	.word	0x480e1c31
      e8:	bf18      	it	ne
      ea:	2101      	.short	0x2101
      ec:	f000 f8ba 	bl	264 <PololuG2::SetDirection(bool)>	; unpredictable branch in IT block

			motorDriver.Wake();
      f0:	480b      	ldrne	r0, [pc, #44]	; (120 <loop+0x7c>)
      f2:	f000      	.short	0xf000
      f4:	f8a3 f001 	strh.w	pc, [r3, #1]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
      f8:	2800fd39 	.word	0x2800fd39
	motorDriver.Wake();
}

void loop()
{
	while (Serial.available() > 0) {
      fc:	dcd7      	bgt.n	ae <loop+0xa>
      fe:	bd70      	pop	{r4, r5, r6, pc}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     100:	4808210f 	.word	0x4808210f
     104:	f001 fd98 	bl	1c38 <usb_serial_write>
     108:	f0014803 	.word	0xf0014803
     10c:	fe55 4804 	cdp2	8, 5, cr4, cr5, cr4, {0}
			motorDriver.SetDirection((bool)dir);
			motorDriver.Wake();
		}
		else {
			Serial.println("Setting Voltage");
			motorDriver.SetVoltage((short)speed);
     110:	f000b221 	.word	0xf000b221
     114:	f8ab e7c6 	strh.w	lr, [fp, #1990]	; 0x7c6
     118:	2000043c 	.word	0x2000043c
     11c:	0000      	movs	r0, r0
     11e:	2000      	.short	0x2000
     120:	0cbc      	lsrs	r4, r7, #18
     122:	2000      	.short	0x2000
     124:	000c      	movs	r4, r1
     126:	2000      	movs	r0, #0

00000128 <_GLOBAL__sub_I_motorDriver>:
#include "PololuG2.h"

PololuG2 motorDriver;
     128:	f0004801 	.word	0xf0004801
     12c:	b86b      			; <UNDEFINED> instruction: 0xb86b
     12e:	bf00      	.short	0xbf00
     130:	0cbc      	lsrs	r4, r7, #18
     132:	2000      	.short	0x2000

00000134 <KalmanFilter::KalmanFilter(float, int)>:
}

KalmanFilter::KalmanFilter(float g1, int memory) {
	this->g1 = g1;
	this->memory = memory;
	values = new int[memory];
     134:	f1b1 5ffe 	cmp.w	r1, #532676608	; 0x1fc00000
	this->g1 = 0.5f;
	this->memory = 25;
	values = new int[25];
}

KalmanFilter::KalmanFilter(float g1, int memory) {
     138:	0300f04f 	.word	0x0300f04f
     13c:	b510      	push	{r4, lr}
     13e:	4604      	mov	r4, r0
	this->g1 = g1;
     140:	ed80 0a00 	vstr	s0, [r0]
	this->memory = memory;
     144:	6041      	str	r1, [r0, #4]
	this->g1 = 0.5f;
	this->memory = 25;
	values = new int[25];
}

KalmanFilter::KalmanFilter(float g1, int memory) {
     146:	60c3      	.short	0x60c3
	this->g1 = g1;
	this->memory = memory;
	values = new int[memory];
     148:	bf94      	ite	ls
     14a:	0088      	.short	0x0088
     14c:	f04f 30ff 	movhi.w	r0, #4294967295
     150:	fe30f001 	.word	0xfe30f001
     154:	60a0      	str	r0, [r4, #8]
}
     156:	4620      	.short	0x4620
     158:	bd10      	pop	{r4, pc}
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     15a:	bf00      	.short	0xbf00

0000015c <KalmanFilter::Filter(int)>:

int KalmanFilter::Filter(int value) {
     15c:	b470      	push	{r4, r5, r6}
	float sum = 0;
	float avg = 0;
	float gainInverse = (1 - g1);

	if (currentAmount < memory) {
     15e:	68c3      	.short	0x68c3
}

int KalmanFilter::Filter(int value) {
	float sum = 0;
	float avg = 0;
	float gainInverse = (1 - g1);
     160:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

	if (currentAmount < memory) {
     164:	edd06844 	.word	0xedd06844
}

int KalmanFilter::Filter(int value) {
	float sum = 0;
	float avg = 0;
	float gainInverse = (1 - g1);
     168:	5a00      	ldrh	r0, [r0, r0]

	if (currentAmount < memory) {
     16a:	42a3      	cmp	r3, r4
}

int KalmanFilter::Filter(int value) {
	float sum = 0;
	float avg = 0;
	float gainInverse = (1 - g1);
     16c:	6ae5ee37 	.word	0x6ae5ee37

	if (currentAmount < memory) {
     170:	da28      	bge.n	1c4 <KalmanFilter::Filter(int)+0x68>
		values[currentAmount++] = value;
     172:	1c5c      	.short	0x1c5c
     174:	6882      	ldr	r2, [r0, #8]
     176:	60c4      	.short	0x60c4
     178:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	else {
		values = ShiftArray(values);//pop first
		values[memory - 1] = value;
	}

	for (int i = 0; i < currentAmount; i++) {
     17c:	2c0068c4 	.word	0x2c0068c4
     180:	dd3a      	ble.n	1f8 <KalmanFilter::Filter(int)+0x9c>
     182:	6883      	ldr	r3, [r0, #8]
     184:	7a1eed9f 	.word	0x7a1eed9f
     188:	eb03 0284 	add.w	r2, r3, r4, lsl #2
		sum += values[i];
     18c:	ecf3 7a01 	vldmia	r3!, {s15}
     190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	else {
		values = ShiftArray(values);//pop first
		values[memory - 1] = value;
	}

	for (int i = 0; i < currentAmount; i++) {
     194:	429a      	cmp	r2, r3
		sum += values[i];
     196:	ee37 7a27 	vadd.f32	s14, s14, s15
	else {
		values = ShiftArray(values);//pop first
		values[memory - 1] = value;
	}

	for (int i = 0; i < currentAmount; i++) {
     19a:	d1f7      	bne.n	18c <KalmanFilter::Filter(int)+0x30>
		sum += values[i];
	}

	if (currentAmount > 0) {
		avg = sum / currentAmount;
     19c:	4a90ee07 	.word	0x4a90ee07
     1a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
     1a4:	7a26eec7 	.word	0x7a26eec7
	}

	return (g1 * value) + (gainInverse * avg);
     1a8:	ee07 1a10 	vmov	s14, r1
     1ac:	ee67 7a86 	vmul.f32	s15, s15, s12
     1b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
     1b4:	bc70      	pop	{r4, r5, r6}

	if (currentAmount > 0) {
		avg = sum / currentAmount;
	}

	return (g1 * value) + (gainInverse * avg);
     1b6:	eee5 7a87 	vfma.f32	s15, s11, s14
     1ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
}
     1be:	ee17 0a90 	vmov	r0, s15
     1c2:	4770      	bx	lr

int* KalmanFilter::ShiftArray(int arr[]) {
	for (int i = 0; i < memory; i++) {
     1c4:	2c00      	cmp	r4, #0

	if (currentAmount < memory) {
		values[currentAmount++] = value;
	}
	else {
		values = ShiftArray(values);//pop first
     1c6:	6885      	ldr	r5, [r0, #8]

	return (g1 * value) + (gainInverse * avg);
}

int* KalmanFilter::ShiftArray(int arr[]) {
	for (int i = 0; i < memory; i++) {
     1c8:	dd09      	ble.n	1de <KalmanFilter::Filter(int)+0x82>
     1ca:	462a      	mov	r2, r5
     1cc:	2300      	movs	r3, #0
		arr[i] = arr[i + 1];
     1ce:	f852 4f04 	ldr.w	r4, [r2, #4]!

	return (g1 * value) + (gainInverse * avg);
}

int* KalmanFilter::ShiftArray(int arr[]) {
	for (int i = 0; i < memory; i++) {
     1d2:	3301      	adds	r3, #1
		arr[i] = arr[i + 1];
     1d4:	f842 4c04 	str.w	r4, [r2, #-4]

	return (g1 * value) + (gainInverse * avg);
}

int* KalmanFilter::ShiftArray(int arr[]) {
	for (int i = 0; i < memory; i++) {
     1d8:	6844      	ldr	r4, [r0, #4]
     1da:	429c      	cmp	r4, r3
     1dc:	dcf7      	bgt.n	1ce <KalmanFilter::Filter(int)+0x72>
		arr[i] = arr[i + 1];
	}

	arr[memory - 1] = 0.0;
     1de:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
     1e2:	2600      	movs	r6, #0
	if (currentAmount < memory) {
		values[currentAmount++] = value;
	}
	else {
		values = ShiftArray(values);//pop first
		values[memory - 1] = value;
     1e4:	4613      	mov	r3, r2
int* KalmanFilter::ShiftArray(int arr[]) {
	for (int i = 0; i < memory; i++) {
		arr[i] = arr[i + 1];
	}

	arr[memory - 1] = 0.0;
     1e6:	4422      	add	r2, r4
     1e8:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
	if (currentAmount < memory) {
		values[currentAmount++] = value;
	}
	else {
		values = ShiftArray(values);//pop first
		values[memory - 1] = value;
     1ec:	6842      	ldr	r2, [r0, #4]

	if (currentAmount < memory) {
		values[currentAmount++] = value;
	}
	else {
		values = ShiftArray(values);//pop first
     1ee:	6085      	str	r5, [r0, #8]
		values[memory - 1] = value;
     1f0:	4413      	add	r3, r2
     1f2:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
     1f6:	e7c1      	b.n	17c <KalmanFilter::Filter(int)+0x20>
	values = new int[memory];
}

int KalmanFilter::Filter(int value) {
	float sum = 0;
	float avg = 0;
     1f8:	eddf 7a01 	vldr	s15, [pc, #4]	; 200 <KalmanFilter::Filter(int)+0xa4>
     1fc:	e7d4      	b.n	1a8 <KalmanFilter::Filter(int)+0x4c>
     1fe:	bf00      	nop
     200:	00000000 	.word	0x00000000

00000204 <PololuG2::PololuG2()>:
#include "PololuG2.h"

PololuG2::PololuG2() {
     204:	b538      	push	{r3, r4, r5, lr}
     206:	2223      	movs	r2, #35	; 0x23
     208:	4604      	mov	r4, r0
     20a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
     20e:	2119      	movs	r1, #25
     210:	60c2      	str	r2, [r0, #12]
     212:	3014      	adds	r0, #20
     214:	6123      	str	r3, [r4, #16]
	this->pwmPin = 9;
	this->dirPin = 8;
     216:	2508      	movs	r5, #8
#include "PololuG2.h"

PololuG2::PololuG2() {
     218:	ed9f 0a07 	vldr	s0, [pc, #28]	; 238 <PololuG2::PololuG2()+0x34>
     21c:	f7ff ff8a 	bl	134 <KalmanFilter::KalmanFilter(float, int)>
	this->pwmPin = 9;
     220:	2009      	movs	r0, #9
	this->dirPin = 8;
	this->sleepPin = 7;
     222:	2107      	movs	r1, #7
	this->faultPin = 6;
     224:	2206      	movs	r2, #6
	this->currentSensePin = A0;
     226:	230e      	movs	r3, #14
#include "PololuG2.h"

PololuG2::PololuG2() {
	this->pwmPin = 9;
     228:	7020      	strb	r0, [r4, #0]
	this->dirPin = 8;
     22a:	7065      	strb	r5, [r4, #1]
	this->sleepPin = 7;
	this->faultPin = 6;
	this->currentSensePin = A0;
}
     22c:	4620      	mov	r0, r4
#include "PololuG2.h"

PololuG2::PololuG2() {
	this->pwmPin = 9;
	this->dirPin = 8;
	this->sleepPin = 7;
     22e:	70a1      	strb	r1, [r4, #2]
	this->faultPin = 6;
     230:	70e2      	strb	r2, [r4, #3]
	this->currentSensePin = A0;
     232:	7123      	strb	r3, [r4, #4]
}
     234:	bd38      	pop	{r3, r4, r5, pc}
     236:	bf00      	nop
     238:	3c23d70a 	.word	0x3c23d70a

0000023c <PololuG2::Wake()>:
	//TCCR1B = TCCR1B & B11111000 | B00000001; //Uno 31.6Khz PWM
	CalibrateCurrent();
}

void PololuG2::Wake() {
	digitalWrite(this->sleepPin, HIGH);
     23c:	7880      	ldrb	r0, [r0, #2]
     23e:	2101      	movs	r1, #1
     240:	f000 b95e 	b.w	500 <digitalWrite>

00000244 <PololuG2::Sleep()>:
}

void PololuG2::Sleep() {
	digitalWrite(this->sleepPin, LOW);
     244:	7880      	ldrb	r0, [r0, #2]
     246:	2100      	movs	r1, #0
     248:	f000 b95a 	b.w	500 <digitalWrite>

0000024c <PololuG2::GetRawCurrent()>:
	unsigned int currentMa = (GetRawCurrent() - this->currentOffset);
	//5V/ADC resolution/G2 resolution
	return ((float)(((float)currentMa * (5000000.0f/1024.0f))/20.0f));
}

unsigned int PololuG2::GetRawCurrent() {
     24c:	b510      	push	{r4, lr}
     24e:	4604      	mov	r4, r0
	return currentKF.Filter(analogRead(this->currentSensePin));
     250:	7900      	ldrb	r0, [r0, #4]
     252:	f000 f895 	bl	380 <analogRead>
     256:	4601      	mov	r1, r0
     258:	f104 0014 	add.w	r0, r4, #20
}
     25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	//5V/ADC resolution/G2 resolution
	return ((float)(((float)currentMa * (5000000.0f/1024.0f))/20.0f));
}

unsigned int PololuG2::GetRawCurrent() {
	return currentKF.Filter(analogRead(this->currentSensePin));
     260:	f7ff bf7c 	b.w	15c <KalmanFilter::Filter(int)>

00000264 <PololuG2::SetDirection(bool)>:
}

void PololuG2::SetDirection(bool dir) {
	this->direction = dir;
     264:	7141      	strb	r1, [r0, #5]
	digitalWrite(this->dirPin, this->direction);
     266:	7840      	ldrb	r0, [r0, #1]
     268:	f000 b94a 	b.w	500 <digitalWrite>

0000026c <PololuG2::SetVoltage(short)>:
}

void PololuG2::SetVoltage(short voltage) {
     26c:	b538      	push	{r3, r4, r5, lr}
	this->direction = (voltage >= 0) ? 1 : 0;
	voltage = constrain(voltage, -this->MaxInputVoltage, this->MaxInputVoltage);
     26e:	68c4      	ldr	r4, [r0, #12]
void PololuG2::SetDirection(bool dir) {
	this->direction = dir;
	digitalWrite(this->dirPin, this->direction);
}

void PololuG2::SetVoltage(short voltage) {
     270:	460b      	mov	r3, r1
	this->direction = (voltage >= 0) ? 1 : 0;
     272:	43c9      	mvns	r1, r1
void PololuG2::SetDirection(bool dir) {
	this->direction = dir;
	digitalWrite(this->dirPin, this->direction);
}

void PololuG2::SetVoltage(short voltage) {
     274:	4605      	mov	r5, r0
	this->direction = (voltage >= 0) ? 1 : 0;
	voltage = constrain(voltage, -this->MaxInputVoltage, this->MaxInputVoltage);
     276:	4262      	negs	r2, r4
	this->direction = dir;
	digitalWrite(this->dirPin, this->direction);
}

void PololuG2::SetVoltage(short voltage) {
	this->direction = (voltage >= 0) ? 1 : 0;
     278:	0fc9      	lsrs	r1, r1, #31
	voltage = constrain(voltage, -this->MaxInputVoltage, this->MaxInputVoltage);
     27a:	429a      	cmp	r2, r3
	this->direction = dir;
	digitalWrite(this->dirPin, this->direction);
}

void PololuG2::SetVoltage(short voltage) {
	this->direction = (voltage >= 0) ? 1 : 0;
     27c:	7141      	strb	r1, [r0, #5]
	voltage = constrain(voltage, -this->MaxInputVoltage, this->MaxInputVoltage);
     27e:	dc03      	bgt.n	288 <PololuG2::SetVoltage(short)+0x1c>
     280:	42a3      	cmp	r3, r4
     282:	bfa8      	it	ge
     284:	4623      	movge	r3, r4
     286:	461a      	mov	r2, r3
	voltage = (voltage < 0) ? -voltage : voltage;
     288:	b213      	sxth	r3, r2
     28a:	2b00      	cmp	r3, #0
     28c:	bfb8      	it	lt
     28e:	425b      	neglt	r3, r3
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     290:	2cff      	cmp	r4, #255	; 0xff
     292:	b21b      	sxth	r3, r3
     294:	dc0c      	bgt.n	2b0 <PololuG2::SetVoltage(short)+0x44>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     296:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
     29a:	fb93 f4f4 	sdiv	r4, r3, r4
	
	voltage = map(voltage, 0, this->MaxInputVoltage, 0, 255);
	
	digitalWrite(this->dirPin, this->direction);
     29e:	7868      	ldrb	r0, [r5, #1]
     2a0:	f000 f92e 	bl	500 <digitalWrite>
	analogWrite(this->pwmPin, voltage);
     2a4:	7828      	ldrb	r0, [r5, #0]
     2a6:	b221      	sxth	r1, r4
}
     2a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	voltage = (voltage < 0) ? -voltage : voltage;
	
	voltage = map(voltage, 0, this->MaxInputVoltage, 0, 255);
	
	digitalWrite(this->dirPin, this->direction);
	analogWrite(this->pwmPin, voltage);
     2ac:	f000 ba86 	b.w	7bc <analogWrite>
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     2b0:	021a      	lsls	r2, r3, #8
     2b2:	3401      	adds	r4, #1
     2b4:	fb92 f4f4 	sdiv	r4, r2, r4
     2b8:	e7f1      	b.n	29e <PololuG2::SetVoltage(short)+0x32>
     2ba:	bf00      	nop
     2bc:	0000      	movs	r0, r0
	...

000002c0 <PololuG2::SetSpeedRpm(int)>:
}

void PololuG2::SetSpeedRpm(int RPM) {
	//Least squares best fit
	RPM = constrain(RPM, 0, this->MaxInputRPM);
     2c0:	2900      	cmp	r1, #0
     2c2:	6903      	ldr	r3, [r0, #16]
     2c4:	db1b      	blt.n	2fe <PololuG2::SetSpeedRpm(int)+0x3e>
     2c6:	4299      	cmp	r1, r3
	
	digitalWrite(this->dirPin, this->direction);
	analogWrite(this->pwmPin, voltage);
}

void PololuG2::SetSpeedRpm(int RPM) {
     2c8:	b082      	sub	sp, #8
     2ca:	bfa8      	it	ge
     2cc:	4619      	movge	r1, r3
	//Least squares best fit
	RPM = constrain(RPM, 0, this->MaxInputRPM);
	char voltage = ceil((double)0.008555 * (double)RPM + (double)0.224365);
     2ce:	ee07 1a90 	vmov	s15, r1
	if (RPM <= 0) {
     2d2:	2900      	cmp	r1, #0
}

void PololuG2::SetSpeedRpm(int RPM) {
	//Least squares best fit
	RPM = constrain(RPM, 0, this->MaxInputRPM);
	char voltage = ceil((double)0.008555 * (double)RPM + (double)0.224365);
     2d4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
     2d8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 308 <PololuG2::SetSpeedRpm(int)+0x48>
     2dc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 310 <PololuG2::SetSpeedRpm(int)+0x50>
     2e0:	eea5 7b06 	vfma.f64	d7, d5, d6
     2e4:	feba 7b47 	vrintp.f64	d7, d7
     2e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     2ec:	edcd 7a01 	vstr	s15, [sp, #4]
     2f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (RPM <= 0) {
     2f4:	dd06      	ble.n	304 <PololuG2::SetSpeedRpm(int)+0x44>
     2f6:	b219      	sxth	r1, r3
		voltage = 0;
	}
	SetVoltage(voltage);
}
     2f8:	b002      	add	sp, #8
	RPM = constrain(RPM, 0, this->MaxInputRPM);
	char voltage = ceil((double)0.008555 * (double)RPM + (double)0.224365);
	if (RPM <= 0) {
		voltage = 0;
	}
	SetVoltage(voltage);
     2fa:	f7ff bfb7 	b.w	26c <PololuG2::SetVoltage(short)>
     2fe:	2100      	movs	r1, #0
     300:	f7ff bfb4 	b.w	26c <PololuG2::SetVoltage(short)>
     304:	2100      	movs	r1, #0
     306:	e7f7      	b.n	2f8 <PololuG2::SetSpeedRpm(int)+0x38>
     308:	a9bcfd4c 	.word	0xa9bcfd4c
     30c:	3f818548 	.word	0x3f818548
     310:	08aefb2b 	.word	0x08aefb2b
     314:	3fccb7fe 	.word	0x3fccb7fe

00000318 <PololuG2::CalibrateCurrent()>:
void PololuG2::SetBrake() {
	//Current reading is not accurate while braking
	digitalWrite(this->pwmPin, 0);
}

void PololuG2::CalibrateCurrent() {
     318:	b510      	push	{r4, lr}
     31a:	4604      	mov	r4, r0
	SetVoltage(0);
     31c:	2100      	movs	r1, #0
     31e:	f7ff ffa5 	bl	26c <PololuG2::SetVoltage(short)>
	//TCCR1B = TCCR1B & B11111000 | B00000001; //Uno 31.6Khz PWM
	CalibrateCurrent();
}

void PololuG2::Wake() {
	digitalWrite(this->sleepPin, HIGH);
     322:	2101      	movs	r1, #1
     324:	78a0      	ldrb	r0, [r4, #2]
     326:	f000 f8eb 	bl	500 <digitalWrite>
}

void PololuG2::CalibrateCurrent() {
	SetVoltage(0);
	Wake();
	delay(1);
     32a:	2001      	movs	r0, #1
     32c:	f000 f85c 	bl	3e8 <delay>
	this->currentOffset = GetRawCurrent();
     330:	4620      	mov	r0, r4
     332:	f7ff ff8b 	bl	24c <PololuG2::GetRawCurrent()>
     336:	60a0      	str	r0, [r4, #8]
     338:	bd10      	pop	{r4, pc}
     33a:	bf00      	nop

0000033c <PololuG2::Begin()>:
	this->sleepPin = sleepPin;
	this->faultPin = faultPin;
	this->currentSensePin = currentSensePin;
}

void PololuG2::Begin() {
     33c:	b510      	push	{r4, lr}
     33e:	4604      	mov	r4, r0
	pinMode(this->pwmPin, OUTPUT);
     340:	2101      	movs	r1, #1
     342:	7800      	ldrb	r0, [r0, #0]
     344:	f000 f8e2 	bl	50c <pinMode>
	pinMode(this->dirPin, OUTPUT);
     348:	7860      	ldrb	r0, [r4, #1]
     34a:	2101      	movs	r1, #1
     34c:	f000 f8de 	bl	50c <pinMode>
	pinMode(this->sleepPin, OUTPUT);
     350:	78a0      	ldrb	r0, [r4, #2]
     352:	2101      	movs	r1, #1
     354:	f000 f8da 	bl	50c <pinMode>
	pinMode(this->faultPin, INPUT_PULLUP);
     358:	78e0      	ldrb	r0, [r4, #3]
     35a:	2102      	movs	r1, #2
     35c:	f000 f8d6 	bl	50c <pinMode>
	pinMode(this->currentSensePin, INPUT);
     360:	7920      	ldrb	r0, [r4, #4]
     362:	2100      	movs	r1, #0
     364:	f000 f8d2 	bl	50c <pinMode>
	analogWriteFrequency(this->pwmPin, 32000);//Teensy4.0 32Khz PWM
     368:	7820      	ldrb	r0, [r4, #0]
     36a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 37c <PololuG2::Begin()+0x40>
     36e:	f000 fa89 	bl	884 <analogWriteFrequency>
	//TCCR1B = TCCR1B & B11111000 | B00000001; //Uno 31.6Khz PWM
	CalibrateCurrent();
     372:	4620      	mov	r0, r4
}
     374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	pinMode(this->sleepPin, OUTPUT);
	pinMode(this->faultPin, INPUT_PULLUP);
	pinMode(this->currentSensePin, INPUT);
	analogWriteFrequency(this->pwmPin, 32000);//Teensy4.0 32Khz PWM
	//TCCR1B = TCCR1B & B11111000 | B00000001; //Uno 31.6Khz PWM
	CalibrateCurrent();
     378:	f7ff bfce 	b.w	318 <PololuG2::CalibrateCurrent()>
     37c:	46fa0000 	.word	0x46fa0000

00000380 <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
     380:	281c      	cmp	r0, #28
     382:	d81b      	bhi.n	3bc <analogRead+0x3c>
	if (calibrating) wait_for_cal();
     384:	4914      	ldr	r1, [pc, #80]	; (3d8 <analogRead+0x58>)
     386:	780b      	ldrb	r3, [r1, #0]
     388:	b14b      	cbz	r3, 39e <analogRead+0x1e>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
     38a:	4a14      	ldr	r2, [pc, #80]	; (3dc <analogRead+0x5c>)
     38c:	6c93      	ldr	r3, [r2, #72]	; 0x48
     38e:	061b      	lsls	r3, r3, #24
     390:	d4fc      	bmi.n	38c <analogRead+0xc>
	while (ADC2_GC & ADC_GC_CAL) ;
     392:	4a13      	ldr	r2, [pc, #76]	; (3e0 <analogRead+0x60>)
     394:	6c93      	ldr	r3, [r2, #72]	; 0x48
     396:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     39a:	d1fb      	bne.n	394 <analogRead+0x14>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
     39c:	700b      	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
     39e:	4b11      	ldr	r3, [pc, #68]	; (3e4 <analogRead+0x64>)
     3a0:	5c1b      	ldrb	r3, [r3, r0]
	if (ch == 255) return 0;
     3a2:	2bff      	cmp	r3, #255	; 0xff
     3a4:	d00a      	beq.n	3bc <analogRead+0x3c>
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
     3a6:	061a      	lsls	r2, r3, #24
     3a8:	d40a      	bmi.n	3c0 <analogRead+0x40>
		ADC1_HC0 = ch;
     3aa:	4a0c      	ldr	r2, [pc, #48]	; (3dc <analogRead+0x5c>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
     3ac:	4611      	mov	r1, r2
	uint8_t ch = pin_to_channel[pin];
	if (ch == 255) return 0;
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
     3ae:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
     3b0:	6a0b      	ldr	r3, [r1, #32]
     3b2:	4a0a      	ldr	r2, [pc, #40]	; (3dc <analogRead+0x5c>)
     3b4:	07d8      	lsls	r0, r3, #31
     3b6:	d5fb      	bpl.n	3b0 <analogRead+0x30>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
     3b8:	6a50      	ldr	r0, [r2, #36]	; 0x24
	}
}
     3ba:	4770      	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
     3bc:	2000      	movs	r0, #0
     3be:	4770      	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
     3c0:	4a07      	ldr	r2, [pc, #28]	; (3e0 <analogRead+0x60>)
     3c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
     3c6:	4611      	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
     3c8:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
     3ca:	6a0b      	ldr	r3, [r1, #32]
     3cc:	4a04      	ldr	r2, [pc, #16]	; (3e0 <analogRead+0x60>)
     3ce:	07db      	lsls	r3, r3, #31
     3d0:	d5fb      	bpl.n	3ca <analogRead+0x4a>
		return ADC2_R0;
     3d2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	}
}
     3d4:	4770      	bx	lr
     3d6:	bf00      	nop
     3d8:	20000ce0 	.word	0x20000ce0
     3dc:	400c4000 	.word	0x400c4000
     3e0:	400c8000 	.word	0x400c8000
     3e4:	2000001c 	.word	0x2000001c

000003e8 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     3e8:	2800      	cmp	r0, #0
     3ea:	d057      	beq.n	49c <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     3ec:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
     3ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3f2:	b085      	sub	sp, #20
     3f4:	4683      	mov	fp, r0
     3f6:	4c2a      	ldr	r4, [pc, #168]	; (4a0 <delay+0xb8>)
     3f8:	4d2a      	ldr	r5, [pc, #168]	; (4a4 <delay+0xbc>)
     3fa:	4e2b      	ldr	r6, [pc, #172]	; (4a8 <delay+0xc0>)
     3fc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     400:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     404:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     406:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     408:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     40c:	2900      	cmp	r1, #0
     40e:	d1f7      	bne.n	400 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     410:	4f26      	ldr	r7, [pc, #152]	; (4ac <delay+0xc4>)
     412:	e9cd 8902 	strd	r8, r9, [sp, #8]
     416:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     418:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     41a:	4a25      	ldr	r2, [pc, #148]	; (4b0 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     41c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     420:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     422:	6812      	ldr	r2, [r2, #0]
     424:	2701      	movs	r7, #1
     426:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     42a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     42e:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
     430:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     432:	428b      	cmp	r3, r1
     434:	bf08      	it	eq
     436:	4542      	cmpeq	r2, r8
     438:	bf2c      	ite	cs
     43a:	46c2      	movcs	sl, r8
     43c:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     43e:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     442:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     446:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     448:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     44a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     44e:	2b00      	cmp	r3, #0
     450:	d1f7      	bne.n	442 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     452:	9801      	ldr	r0, [sp, #4]
     454:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     456:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     458:	4815      	ldr	r0, [pc, #84]	; (4b0 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     45a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     45e:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     460:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     464:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     46c:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     470:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
     472:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     474:	4299      	cmp	r1, r3
     476:	bf08      	it	eq
     478:	4540      	cmpeq	r0, r8
     47a:	bf2c      	ite	cs
     47c:	4643      	movcs	r3, r8
     47e:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     480:	441a      	add	r2, r3
     482:	4572      	cmp	r2, lr
     484:	d307      	bcc.n	496 <delay+0xae>
			if (--msec == 0) return;
     486:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
     48a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     48e:	d1d8      	bne.n	442 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     490:	b005      	add	sp, #20
     492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     496:	f001 fd11 	bl	1ebc <yield>
	}
     49a:	e7d2      	b.n	442 <delay+0x5a>
     49c:	4770      	bx	lr
     49e:	bf00      	nop
     4a0:	20000f88 	.word	0x20000f88
     4a4:	20000cec 	.word	0x20000cec
     4a8:	20000ce4 	.word	0x20000ce4
     4ac:	e0001004 	.word	0xe0001004
     4b0:	20000ce8 	.word	0x20000ce8

000004b4 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     4b4:	0100      	lsls	r0, r0, #4
     4b6:	4b0f      	ldr	r3, [pc, #60]	; (4f4 <digitalWrite.part.0+0x40>)
     4b8:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
     4ba:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
     4bc:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
     4be:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     4c0:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
     4c2:	4204      	tst	r4, r0
     4c4:	d005      	beq.n	4d2 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
     4c6:	b159      	cbz	r1, 4e0 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
     4c8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     4cc:	f85d 4b04 	ldr.w	r4, [sp], #4
     4d0:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     4d2:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
     4d4:	b949      	cbnz	r1, 4ea <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     4d6:	4a08      	ldr	r2, [pc, #32]	; (4f8 <digitalWrite.part.0+0x44>)
		}
	}
}
     4d8:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     4dc:	601a      	str	r2, [r3, #0]
		}
	}
}
     4de:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     4e0:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
     4e8:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     4ea:	4a04      	ldr	r2, [pc, #16]	; (4fc <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     4f0:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     4f2:	4770      	bx	lr
     4f4:	20000038 	.word	0x20000038
     4f8:	00013038 	.word	0x00013038
     4fc:	0001f038 	.word	0x0001f038

00000500 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     500:	2827      	cmp	r0, #39	; 0x27
     502:	d801      	bhi.n	508 <digitalWrite+0x8>
     504:	f7ff bfd6 	b.w	4b4 <digitalWrite.part.0>
     508:	4770      	bx	lr
     50a:	bf00      	nop

0000050c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     50c:	2827      	cmp	r0, #39	; 0x27
     50e:	d81c      	bhi.n	54a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     510:	0100      	lsls	r0, r0, #4
     512:	4a1a      	ldr	r2, [pc, #104]	; (57c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     514:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     516:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     51a:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     51c:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     51e:	d015      	beq.n	54c <pinMode+0x40>
     520:	2904      	cmp	r1, #4
     522:	d013      	beq.n	54c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     524:	68dc      	ldr	r4, [r3, #12]
     526:	6842      	ldr	r2, [r0, #4]
     528:	ea22 0204 	bic.w	r2, r2, r4
     52c:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     52e:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     530:	b1e9      	cbz	r1, 56e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     532:	2902      	cmp	r1, #2
     534:	d01e      	beq.n	574 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     536:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     538:	685b      	ldr	r3, [r3, #4]
}
     53a:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     53e:	bf0c      	ite	eq
     540:	490f      	ldreq	r1, [pc, #60]	; (580 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     542:	4910      	ldrne	r1, [pc, #64]	; (584 <pinMode+0x78>)
     544:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     546:	2215      	movs	r2, #21
     548:	601a      	str	r2, [r3, #0]
}
     54a:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     54c:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     54e:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     550:	6844      	ldr	r4, [r0, #4]
     552:	ea42 0204 	orr.w	r2, r2, r4
     556:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     558:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     55a:	d008      	beq.n	56e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     55c:	f640 0138 	movw	r1, #2104	; 0x838
     560:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     562:	685b      	ldr	r3, [r3, #4]
     564:	2215      	movs	r2, #21
}
     566:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     56a:	601a      	str	r2, [r3, #0]
}
     56c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     56e:	2138      	movs	r1, #56	; 0x38
     570:	6011      	str	r1, [r2, #0]
     572:	e7f6      	b.n	562 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     574:	4904      	ldr	r1, [pc, #16]	; (588 <pinMode+0x7c>)
     576:	6011      	str	r1, [r2, #0]
     578:	e7f3      	b.n	562 <pinMode+0x56>
     57a:	bf00      	nop
     57c:	20000038 	.word	0x20000038
     580:	00013038 	.word	0x00013038
     584:	00010038 	.word	0x00010038
     588:	0001f038 	.word	0x0001f038

0000058c <flexpwmWrite>:


#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
     58c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
     58e:	eb01 0641 	add.w	r6, r1, r1, lsl #1
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
     592:	4c29      	ldr	r4, [pc, #164]	; (638 <flexpwmWrite+0xac>)

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
     594:	2501      	movs	r5, #1
	uint32_t modulo = p->SM[submodule].VAL1;
     596:	eb00 1646 	add.w	r6, r0, r6, lsl #5
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
     59a:	f894 c000 	ldrb.w	ip, [r4]

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
     59e:	fa05 f101 	lsl.w	r1, r5, r1
	uint32_t modulo = p->SM[submodule].VAL1;
     5a2:	89f4      	ldrh	r4, [r6, #14]

#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
     5a4:	fa1f fe81 	uxth.w	lr, r1
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     5a8:	f8b0 5188 	ldrh.w	r5, [r0, #392]	; 0x188
#endif // __IMXRT1062__

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
     5ac:	b2a4      	uxth	r4, r4
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     5ae:	ea4f 170e 	mov.w	r7, lr, lsl #4

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
     5b2:	fb04 3303 	mla	r3, r4, r3, r3
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     5b6:	b2ad      	uxth	r5, r5
     5b8:	f007 07f0 	and.w	r7, r7, #240	; 0xf0

void flexpwmWrite(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, uint16_t val)
{
	uint16_t mask = 1 << submodule;
	uint32_t modulo = p->SM[submodule].VAL1;
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
     5bc:	fa23 f30c 	lsr.w	r3, r3, ip
	if (cval > modulo) cval = modulo; // TODO: is this check correct?

	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     5c0:	433d      	orrs	r5, r7
     5c2:	42a3      	cmp	r3, r4
     5c4:	f8a0 5188 	strh.w	r5, [r0, #392]	; 0x188
     5c8:	bf28      	it	cs
     5ca:	4623      	movcs	r3, r4
	switch (channel) {
     5cc:	2a01      	cmp	r2, #1
     5ce:	d022      	beq.n	616 <flexpwmWrite+0x8a>
     5d0:	d315      	bcc.n	5fe <flexpwmWrite+0x72>
     5d2:	2a02      	cmp	r2, #2
     5d4:	d008      	beq.n	5e8 <flexpwmWrite+0x5c>
     5d6:	f001 010f 	and.w	r1, r1, #15
	  case 2: // B
		p->SM[submodule].VAL5 = cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
		//printf(" write channel B\n");
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
     5da:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     5de:	b29b      	uxth	r3, r3
     5e0:	4319      	orrs	r1, r3
     5e2:	f8a0 1188 	strh.w	r1, [r0, #392]	; 0x188
     5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p->SM[submodule].VAL3 = cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
		//printf(" write channel A\n");
		break;
	  case 2: // B
		p->SM[submodule].VAL5 = cval;
     5e8:	b29b      	uxth	r3, r3
     5ea:	f001 010f 	and.w	r1, r1, #15
     5ee:	83f3      	strh	r3, [r6, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
     5f0:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
     5f4:	b29b      	uxth	r3, r3
     5f6:	431f      	orrs	r7, r3
     5f8:	f8a0 7180 	strh.w	r7, [r0, #384]	; 0x180
     5fc:	e7ed      	b.n	5da <flexpwmWrite+0x4e>
	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	switch (channel) {
	  case 0: // X
		p->SM[submodule].VAL0 = modulo - cval;
     5fe:	1ae3      	subs	r3, r4, r3
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
     600:	f001 010f 	and.w	r1, r1, #15
	//printf("flexpwmWrite, p=%08lX, sm=%d, ch=%c, cval=%ld\n",
		//(uint32_t)p, submodule, channel == 0 ? 'X' : (channel == 1 ? 'A' : 'B'), cval);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	switch (channel) {
	  case 0: // X
		p->SM[submodule].VAL0 = modulo - cval;
     604:	b29b      	uxth	r3, r3
     606:	8173      	strh	r3, [r6, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
     608:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
     60c:	b29b      	uxth	r3, r3
     60e:	430b      	orrs	r3, r1
     610:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		//printf(" write channel X\n");
		break;
     614:	e7e1      	b.n	5da <flexpwmWrite+0x4e>
	  case 1: // A
		p->SM[submodule].VAL3 = cval;
     616:	b29b      	uxth	r3, r3
     618:	f001 010f 	and.w	r1, r1, #15
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
     61c:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
		p->SM[submodule].VAL0 = modulo - cval;
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
		//printf(" write channel X\n");
		break;
	  case 1: // A
		p->SM[submodule].VAL3 = cval;
     620:	82f3      	strh	r3, [r6, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
     622:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
     626:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
     62a:	b29b      	uxth	r3, r3
     62c:	ea4e 0e03 	orr.w	lr, lr, r3
     630:	f8a0 e180 	strh.w	lr, [r0, #384]	; 0x180
		//printf(" write channel A\n");
		break;
     634:	e7d1      	b.n	5da <flexpwmWrite+0x4e>
     636:	bf00      	nop
     638:	20000408 	.word	0x20000408

0000063c <flexpwmFrequency>:
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
     63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
     640:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     644:	4a38      	ldr	r2, [pc, #224]	; (728 <flexpwmFrequency+0xec>)
     646:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
     64a:	f04f 0c01 	mov.w	ip, #1
	uint32_t olddiv = p->SM[submodule].VAL1;
     64e:	eb0e 0301 	add.w	r3, lr, r1
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
     652:	fa0c f701 	lsl.w	r7, ip, r1
	uint32_t olddiv = p->SM[submodule].VAL1;
     656:	eb00 1343 	add.w	r3, r0, r3, lsl #5
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
     65a:	b2be      	uxth	r6, r7
	uint32_t olddiv = p->SM[submodule].VAL1;
     65c:	89db      	ldrh	r3, [r3, #14]
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     65e:	edd2 7a00 	vldr	s15, [r2]
}

void flexpwmFrequency(IMXRT_FLEXPWM_t *p, unsigned int submodule, uint8_t channel, float frequency)
{
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
     662:	b29d      	uxth	r5, r3
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     664:	eef8 7a67 	vcvt.f32.u32	s15, s15
     668:	ee87 0a80 	vdiv.f32	s0, s15, s0
     66c:	ee30 0a07 	vadd.f32	s0, s0, s14
     670:	eefc 7ac0 	vcvt.u32.f32	s15, s0
     674:	ee17 3a90 	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
     678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     67c:	d34e      	bcc.n	71c <flexpwmFrequency+0xe0>
     67e:	2200      	movs	r2, #0
     680:	f64f 74ff 	movw	r4, #65535	; 0xffff
     684:	e001      	b.n	68a <flexpwmFrequency+0x4e>
     686:	2a06      	cmp	r2, #6
     688:	d803      	bhi.n	692 <flexpwmFrequency+0x56>
		newdiv = newdiv >> 1;
     68a:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
     68c:	3201      	adds	r2, #1
	uint16_t mask = 1 << submodule;
	uint32_t olddiv = p->SM[submodule].VAL1;
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
     68e:	42a3      	cmp	r3, r4
     690:	d8f9      	bhi.n	686 <flexpwmFrequency+0x4a>
		newdiv = newdiv >> 1;
		prescale = prescale + 1;
	}
	if (newdiv > 65535) {
     692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     696:	ea4f 1202 	mov.w	r2, r2, lsl #4
     69a:	d237      	bcs.n	70c <flexpwmFrequency+0xd0>
     69c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     6a0:	b292      	uxth	r2, r2
     6a2:	f103 3cff 	add.w	ip, r3, #4294967295
     6a6:	fa1f fc8c 	uxth.w	ip, ip
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     6aa:	f8b0 8188 	ldrh.w	r8, [r0, #392]	; 0x188
     6ae:	0136      	lsls	r6, r6, #4
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
     6b0:	f007 040f 	and.w	r4, r7, #15
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
     6b4:	4471      	add	r1, lr
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     6b6:	b2f6      	uxtb	r6, r6
     6b8:	fa1f f788 	uxth.w	r7, r8
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
     6bc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
		newdiv = 65535;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
     6c0:	433e      	orrs	r6, r7
     6c2:	f8a0 6188 	strh.w	r6, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
     6c6:	80ca      	strh	r2, [r1, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
     6c8:	f8a1 c00e 	strh.w	ip, [r1, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
     6cc:	894a      	ldrh	r2, [r1, #10]
     6ce:	b292      	uxth	r2, r2
     6d0:	fb03 f202 	mul.w	r2, r3, r2
     6d4:	fbb2 f2f5 	udiv	r2, r2, r5
     6d8:	b292      	uxth	r2, r2
     6da:	814a      	strh	r2, [r1, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
     6dc:	8aca      	ldrh	r2, [r1, #22]
     6de:	b292      	uxth	r2, r2
     6e0:	fb03 f202 	mul.w	r2, r3, r2
     6e4:	fbb2 f2f5 	udiv	r2, r2, r5
     6e8:	b292      	uxth	r2, r2
     6ea:	82ca      	strh	r2, [r1, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
     6ec:	8bca      	ldrh	r2, [r1, #30]
     6ee:	b292      	uxth	r2, r2
     6f0:	fb03 f302 	mul.w	r3, r3, r2
     6f4:	fbb3 f3f5 	udiv	r3, r3, r5
     6f8:	b29b      	uxth	r3, r3
     6fa:	83cb      	strh	r3, [r1, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
     6fc:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
     700:	b29b      	uxth	r3, r3
     702:	431c      	orrs	r4, r3
     704:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
     708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     70c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65535 && prescale < 7) {
		newdiv = newdiv >> 1;
		prescale = prescale + 1;
	}
	if (newdiv > 65535) {
     710:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
		newdiv = 65535;
     714:	f64f 73ff 	movw	r3, #65535	; 0xffff
     718:	b292      	uxth	r2, r2
     71a:	e7c6      	b.n	6aa <flexpwmFrequency+0x6e>
	} else if (newdiv < 2) {
     71c:	2b01      	cmp	r3, #1
     71e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     722:	d8be      	bhi.n	6a2 <flexpwmFrequency+0x66>
		newdiv = 2;
     724:	2302      	movs	r3, #2
     726:	e7c0      	b.n	6aa <flexpwmFrequency+0x6e>
     728:	20000450 	.word	0x20000450

0000072c <quadtimerFrequency>:
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     72c:	4b22      	ldr	r3, [pc, #136]	; (7b8 <quadtimerFrequency+0x8c>)
     72e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     732:	edd3 7a00 	vldr	s15, [r3]
     736:	eef8 7a67 	vcvt.f32.u32	s15, s15
	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
     73a:	b430      	push	{r4, r5}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     73c:	ee87 0a80 	vdiv.f32	s0, s15, s0
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
     740:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	p->CH[submodule].CMPLD1 = high;
}

void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
     744:	ee30 0a07 	vadd.f32	s0, s0, s14
     748:	eefc 7ac0 	vcvt.u32.f32	s15, s0
     74c:	ee17 3a90 	vmov	r3, s15
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
     750:	42a3      	cmp	r3, r4
     752:	d92a      	bls.n	7aa <quadtimerFrequency+0x7e>
     754:	2200      	movs	r2, #0
     756:	e001      	b.n	75c <quadtimerFrequency+0x30>
     758:	2a06      	cmp	r2, #6
     75a:	d803      	bhi.n	764 <quadtimerFrequency+0x38>
		newdiv = newdiv >> 1; 
     75c:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
     75e:	3201      	adds	r2, #1
void quadtimerFrequency(IMXRT_TMR_t *p, unsigned int submodule, float frequency)
{
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
	uint32_t prescale = 0;
	//printf(" div=%lu\n", newdiv);
	while (newdiv > 65534 && prescale < 7) {
     760:	42a3      	cmp	r3, r4
     762:	d8f9      	bhi.n	758 <quadtimerFrequency+0x2c>
     764:	3208      	adds	r2, #8
		newdiv = newdiv >> 1; 
		prescale = prescale + 1;
	}
	if (newdiv > 65534) {
     766:	f64f 75fe 	movw	r5, #65534	; 0xfffe
     76a:	f242 0426 	movw	r4, #8230	; 0x2026
     76e:	0252      	lsls	r2, r2, #9
     770:	42ab      	cmp	r3, r5
     772:	f402 52f0 	and.w	r2, r2, #7680	; 0x1e00
		newdiv = 65534;
     776:	bf88      	it	hi
     778:	462b      	movhi	r3, r5
     77a:	4314      	orrs	r4, r2
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
     77c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
     780:	8a0d      	ldrh	r5, [r1, #16]
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
     782:	88ca      	ldrh	r2, [r1, #6]
		newdiv = 65534;
	} else if (newdiv < 2) {
		newdiv = 2;
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
     784:	b2ad      	uxth	r5, r5
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
     786:	b292      	uxth	r2, r2
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
     788:	fb05 f003 	mul.w	r0, r5, r3
     78c:	f1c2 1201 	rsb	r2, r2, #65537	; 0x10001
     790:	442a      	add	r2, r5
     792:	fbb0 f2f2 	udiv	r2, r0, r2
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
     796:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].CMPLD1 = high;
     798:	b292      	uxth	r2, r2
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
	// TODO: low must never be less than 2 - can it happen with this?
	uint32_t low = newdiv - high;
	//printf(" high=%lu, low=%lu\n", high, low);
	p->CH[submodule].LOAD = 65537 - low;
     79a:	f1c3 0301 	rsb	r3, r3, #1
     79e:	b29b      	uxth	r3, r3
     7a0:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
     7a2:	820a      	strh	r2, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
     7a4:	818c      	strh	r4, [r1, #12]
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
}
     7a6:	bc30      	pop	{r4, r5}
     7a8:	4770      	bx	lr
		newdiv = newdiv >> 1; 
		prescale = prescale + 1;
	}
	if (newdiv > 65534) {
		newdiv = 65534;
	} else if (newdiv < 2) {
     7aa:	2b01      	cmp	r3, #1
     7ac:	f243 0426 	movw	r4, #12326	; 0x3026
		newdiv = 2;
     7b0:	bf98      	it	ls
     7b2:	2302      	movls	r3, #2
     7b4:	e7e2      	b.n	77c <quadtimerFrequency+0x50>
     7b6:	bf00      	nop
     7b8:	20000450 	.word	0x20000450

000007bc <analogWrite>:

void analogWrite(uint8_t pin, int val)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
     7bc:	2827      	cmp	r0, #39	; 0x27
     7be:	d80c      	bhi.n	7da <analogWrite+0x1e>
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
     7c0:	4a29      	ldr	r2, [pc, #164]	; (868 <analogWrite+0xac>)
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
}

void analogWrite(uint8_t pin, int val)
{
     7c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7c4:	4604      	mov	r4, r0
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
     7c6:	b200      	sxth	r0, r0
	if (info->type == 1) {
     7c8:	f812 6020 	ldrb.w	r6, [r2, r0, lsl #2]
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
     7cc:	eb02 0580 	add.w	r5, r2, r0, lsl #2
	if (info->type == 1) {
     7d0:	2e01      	cmp	r6, #1
     7d2:	d003      	beq.n	7dc <analogWrite+0x20>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
     7d4:	2e02      	cmp	r6, #2
     7d6:	d016      	beq.n	806 <analogWrite+0x4a>
     7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7da:	4770      	bx	lr
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
     7dc:	786a      	ldrb	r2, [r5, #1]
     7de:	f3c2 1301 	ubfx	r3, r2, #4, #2
     7e2:	2b03      	cmp	r3, #3
     7e4:	d03a      	beq.n	85c <analogWrite+0xa0>
     7e6:	4821      	ldr	r0, [pc, #132]	; (86c <analogWrite+0xb0>)
     7e8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
     7ec:	b28b      	uxth	r3, r1
     7ee:	f002 0103 	and.w	r1, r2, #3
     7f2:	78aa      	ldrb	r2, [r5, #2]
     7f4:	f7ff feca 	bl	58c <flexpwmWrite>
		}
		quadtimerWrite(qtimer, info->module & 0x03, val);
	} else {
		return;
	}
	*(portConfigRegister(pin)) = info->muxval;
     7f8:	481d      	ldr	r0, [pc, #116]	; (870 <analogWrite+0xb4>)
     7fa:	78ea      	ldrb	r2, [r5, #3]
     7fc:	eb00 1004 	add.w	r0, r0, r4, lsl #4
     800:	6843      	ldr	r3, [r0, #4]
     802:	601a      	str	r2, [r3, #0]
     804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
     806:	786e      	ldrb	r6, [r5, #1]
     808:	f3c6 1301 	ubfx	r3, r6, #4, #2
     80c:	2b03      	cmp	r3, #3
     80e:	d027      	beq.n	860 <analogWrite+0xa4>
     810:	4a18      	ldr	r2, [pc, #96]	; (874 <analogWrite+0xb8>)
     812:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]
     816:	f006 0603 	and.w	r6, r6, #3
}

void quadtimerWrite(IMXRT_TMR_t *p, unsigned int submodule, uint16_t val)
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
     81a:	4b17      	ldr	r3, [pc, #92]	; (878 <analogWrite+0xbc>)
     81c:	b289      	uxth	r1, r1
     81e:	eb0e 1746 	add.w	r7, lr, r6, lsl #5
     822:	f893 c000 	ldrb.w	ip, [r3]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void quadtimerWrite(IMXRT_TMR_t *p, unsigned int submodule, uint16_t val)
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
     826:	0176      	lsls	r6, r6, #5
     828:	88fa      	ldrh	r2, [r7, #6]
     82a:	eb0e 0306 	add.w	r3, lr, r6
	//printf(" high=%lu\n", high);
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
	p->CH[submodule].CMPLD1 = high;
     82e:	4476      	add	r6, lr
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}

void quadtimerWrite(IMXRT_TMR_t *p, unsigned int submodule, uint16_t val)
{
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
     830:	b292      	uxth	r2, r2
     832:	8a18      	ldrh	r0, [r3, #16]
     834:	f1c2 1201 	rsb	r2, r2, #65537	; 0x10001
     838:	fa12 f280 	uxtah	r2, r2, r0
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
     83c:	1e50      	subs	r0, r2, #1
     83e:	fb00 f301 	mul.w	r3, r0, r1
     842:	fa23 f30c 	lsr.w	r3, r3, ip
	if (high >= modulo - 1) high = modulo - 2;
     846:	4298      	cmp	r0, r3
     848:	bf98      	it	ls
     84a:	1e93      	subls	r3, r2, #2
	//printf(" modulo=%lu\n", modulo);
	//printf(" high=%lu\n", high);
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
     84c:	1ad2      	subs	r2, r2, r3
	p->CH[submodule].CMPLD1 = high;
     84e:	b29b      	uxth	r3, r3
	//printf(" modulo=%lu\n", modulo);
	//printf(" high=%lu\n", high);
	uint32_t low = modulo - high; // low must 2 or higher
	//printf(" low=%lu\n", low);

	p->CH[submodule].LOAD = 65537 - low;
     850:	f1c2 0201 	rsb	r2, r2, #1
     854:	b292      	uxth	r2, r2
     856:	80fa      	strh	r2, [r7, #6]
	p->CH[submodule].CMPLD1 = high;
     858:	8233      	strh	r3, [r6, #16]
     85a:	e7cd      	b.n	7f8 <analogWrite+0x3c>
	//printf("analogWrite, pin %d, val %d\n", pin, val);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
     85c:	4807      	ldr	r0, [pc, #28]	; (87c <analogWrite+0xc0>)
     85e:	e7c5      	b.n	7ec <analogWrite+0x30>
		}
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
     860:	f8df e01c 	ldr.w	lr, [pc, #28]	; 880 <analogWrite+0xc4>
     864:	e7d7      	b.n	816 <analogWrite+0x5a>
     866:	bf00      	nop
     868:	200002b8 	.word	0x200002b8
     86c:	20000358 	.word	0x20000358
     870:	20000038 	.word	0x20000038
     874:	20000364 	.word	0x20000364
     878:	20000408 	.word	0x20000408
     87c:	403e8000 	.word	0x403e8000
     880:	401e8000 	.word	0x401e8000

00000884 <analogWriteFrequency>:

void analogWriteFrequency(uint8_t pin, float frequency)
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
     884:	2827      	cmp	r0, #39	; 0x27
     886:	d809      	bhi.n	89c <analogWriteFrequency+0x18>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
     888:	b200      	sxth	r0, r0
     88a:	4b13      	ldr	r3, [pc, #76]	; (8d8 <analogWriteFrequency+0x54>)
	if (info->type == 1) {
     88c:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
{
	const struct pwm_pin_info_struct *info;

	if (pin >= CORE_NUM_DIGITAL) return;
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
     890:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	if (info->type == 1) {
     894:	2a01      	cmp	r2, #1
     896:	d002      	beq.n	89e <analogWriteFrequency+0x1a>
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
     898:	2a02      	cmp	r2, #2
     89a:	d00d      	beq.n	8b8 <analogWriteFrequency+0x34>
     89c:	4770      	bx	lr
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
     89e:	7859      	ldrb	r1, [r3, #1]
     8a0:	f3c1 1201 	ubfx	r2, r1, #4, #2
     8a4:	2a03      	cmp	r2, #3
     8a6:	d013      	beq.n	8d0 <analogWriteFrequency+0x4c>
     8a8:	480c      	ldr	r0, [pc, #48]	; (8dc <analogWriteFrequency+0x58>)
     8aa:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
		  case 1: flexpwm = &IMXRT_FLEXPWM2; break;
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
		  default: flexpwm = &IMXRT_FLEXPWM4;
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
     8ae:	789a      	ldrb	r2, [r3, #2]
     8b0:	f001 0103 	and.w	r1, r1, #3
     8b4:	f7ff bec2 	b.w	63c <flexpwmFrequency>
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
     8b8:	7859      	ldrb	r1, [r3, #1]
     8ba:	f3c1 1301 	ubfx	r3, r1, #4, #2
     8be:	2b03      	cmp	r3, #3
     8c0:	d008      	beq.n	8d4 <analogWriteFrequency+0x50>
     8c2:	4a07      	ldr	r2, [pc, #28]	; (8e0 <analogWriteFrequency+0x5c>)
     8c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
		  case 0: qtimer = &IMXRT_TMR1; break;
		  case 1: qtimer = &IMXRT_TMR2; break;
		  case 2: qtimer = &IMXRT_TMR3; break;
		  default: qtimer = &IMXRT_TMR4;
		}
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
     8c8:	f001 0103 	and.w	r1, r1, #3
     8cc:	f7ff bf2e 	b.w	72c <quadtimerFrequency>
	//printf("analogWriteFrequency, pin %d, freq %d\n", pin, (int)frequency);
	info = pwm_pin_info + pin;
	if (info->type == 1) {
		// FlexPWM pin
		IMXRT_FLEXPWM_t *flexpwm;
		switch ((info->module >> 4) & 3) {
     8d0:	4804      	ldr	r0, [pc, #16]	; (8e4 <analogWriteFrequency+0x60>)
     8d2:	e7ec      	b.n	8ae <analogWriteFrequency+0x2a>
		}
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
	} else if (info->type == 2) {
		// QuadTimer pin
		IMXRT_TMR_t *qtimer;
		switch ((info->module >> 4) & 3) {
     8d4:	4804      	ldr	r0, [pc, #16]	; (8e8 <analogWriteFrequency+0x64>)
     8d6:	e7f7      	b.n	8c8 <analogWriteFrequency+0x44>
     8d8:	200002b8 	.word	0x200002b8
     8dc:	20000358 	.word	0x20000358
     8e0:	20000364 	.word	0x20000364
     8e4:	403e8000 	.word	0x403e8000
     8e8:	401e8000 	.word	0x401e8000

000008ec <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     8ec:	48a4      	ldr	r0, [pc, #656]	; (b80 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     8ee:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     8f2:	4ba4      	ldr	r3, [pc, #656]	; (b84 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     8f4:	6f82      	ldr	r2, [r0, #120]	; 0x78
     8f6:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
     8fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
     8fc:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
     8fe:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     900:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     904:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     908:	4c9f      	ldr	r4, [pc, #636]	; (b88 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     90a:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     90e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     910:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     914:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     916:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
     918:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     91c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     920:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     924:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     928:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     92c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     930:	b280      	uxth	r0, r0
     932:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     936:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     93a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     93e:	4b91      	ldr	r3, [pc, #580]	; (b84 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
     940:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     942:	2500      	movs	r5, #0
     944:	0140      	lsls	r0, r0, #5
     946:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     948:	2904      	cmp	r1, #4
     94a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     94c:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     950:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
     952:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     954:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     956:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     958:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     95a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     95c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     95e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     960:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     962:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     964:	d1e9      	bne.n	93a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     966:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     96a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     96e:	4b87      	ldr	r3, [pc, #540]	; (b8c <pwm_init+0x2a0>)
     970:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     974:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     976:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     978:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     97c:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     97e:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     982:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     986:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     98a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     98e:	b280      	uxth	r0, r0
     990:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     994:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     998:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     99c:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     9a0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     9a4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     9a8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     9ac:	b280      	uxth	r0, r0
     9ae:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     9b2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     9b6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     9ba:	4b74      	ldr	r3, [pc, #464]	; (b8c <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
     9bc:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     9be:	2500      	movs	r5, #0
     9c0:	0140      	lsls	r0, r0, #5
     9c2:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     9c4:	2904      	cmp	r1, #4
     9c6:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     9c8:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     9ca:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     9ce:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     9d0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     9d2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     9d4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     9d6:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     9d8:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     9da:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     9dc:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     9de:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     9e0:	d1e9      	bne.n	9b6 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     9e2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     9e6:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     9ea:	4b69      	ldr	r3, [pc, #420]	; (b90 <pwm_init+0x2a4>)
     9ec:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     9f0:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     9f2:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     9f4:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     9f8:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     9fa:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     9fe:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     a02:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     a06:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     a0a:	b280      	uxth	r0, r0
     a0c:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     a10:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     a14:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     a18:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     a1c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     a20:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     a24:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     a28:	b280      	uxth	r0, r0
     a2a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     a2e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     a32:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     a36:	4b56      	ldr	r3, [pc, #344]	; (b90 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
     a38:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     a3a:	2500      	movs	r5, #0
     a3c:	0140      	lsls	r0, r0, #5
     a3e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     a40:	2904      	cmp	r1, #4
     a42:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     a44:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     a46:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     a4a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     a4c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     a4e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     a50:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     a52:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
     a54:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     a56:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     a58:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     a5a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     a5c:	d1e9      	bne.n	a32 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     a5e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     a62:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     a66:	4b4b      	ldr	r3, [pc, #300]	; (b94 <pwm_init+0x2a8>)
     a68:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     a6c:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     a6e:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     a70:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
     a74:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     a76:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     a7a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     a7e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     a82:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
     a86:	b280      	uxth	r0, r0
     a88:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
     a8c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
     a90:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
     a94:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
     a98:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
     a9c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
     aa0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
     aa4:	b280      	uxth	r0, r0
     aa6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
     aaa:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
     aae:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     ab2:	4b38      	ldr	r3, [pc, #224]	; (b94 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
     ab4:	3101      	adds	r1, #1
     ab6:	0140      	lsls	r0, r0, #5
     ab8:	461c      	mov	r4, r3
     aba:	2904      	cmp	r1, #4
     abc:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
     abe:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
     ac0:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
     ac4:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
     ac6:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
     ac8:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
     aca:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
     acc:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
     ace:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
     ad0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
     ad2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
     ad4:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
     ad6:	d1ea      	bne.n	aae <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     ad8:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     adc:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     ade:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     ae0:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     ae4:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     ae6:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     aea:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     aec:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
     af0:	433b      	orrs	r3, r7
     af2:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
     af6:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
     afa:	b29b      	uxth	r3, r3
     afc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     b00:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     b04:	0150      	lsls	r0, r2, #5
     b06:	4b24      	ldr	r3, [pc, #144]	; (b98 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     b08:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     b0a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     b0c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     b0e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     b10:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     b12:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     b14:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     b16:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     b1a:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     b1c:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     b1e:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     b20:	d1f0      	bne.n	b04 <pwm_init+0x218>
     b22:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     b24:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     b26:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     b2a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     b2e:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     b30:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     b34:	0150      	lsls	r0, r2, #5
     b36:	4b19      	ldr	r3, [pc, #100]	; (b9c <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     b38:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     b3a:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     b3c:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     b3e:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     b40:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     b42:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     b44:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     b46:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     b48:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     b4a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     b4c:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     b4e:	d1f1      	bne.n	b34 <pwm_init+0x248>
     b50:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     b52:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     b54:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     b58:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     b5c:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     b5e:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
     b62:	0150      	lsls	r0, r2, #5
     b64:	4b0e      	ldr	r3, [pc, #56]	; (ba0 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     b66:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
     b68:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     b6a:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
     b6c:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
     b6e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
     b70:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
     b72:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
     b74:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
     b76:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
     b78:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
     b7a:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
     b7c:	d1f1      	bne.n	b62 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
     b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b80:	400fc000 	.word	0x400fc000
     b84:	403dc000 	.word	0x403dc000
     b88:	fc030000 	.word	0xfc030000
     b8c:	403e0000 	.word	0x403e0000
     b90:	403e4000 	.word	0x403e4000
     b94:	403e8000 	.word	0x403e8000
     b98:	401dc000 	.word	0x401dc000
     b9c:	401e0000 	.word	0x401e0000
     ba0:	401e4000 	.word	0x401e4000

00000ba4 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
     ba4:	2004      	movs	r0, #4
     ba6:	4671      	mov	r1, lr
     ba8:	4208      	tst	r0, r1
     baa:	d003      	beq.n	bb4 <_MSP>
     bac:	f3ef 8009 	mrs	r0, PSP
     bb0:	f000 b808 	b.w	bc4 <HardFault_HandlerC>

00000bb4 <_MSP>:
     bb4:	f3ef 8008 	mrs	r0, MSP
     bb8:	f000 b804 	b.w	bc4 <HardFault_HandlerC>

00000bbc <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
     bbc:	4770      	bx	lr
     bbe:	bf00      	nop

00000bc0 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
     bc0:	4770      	bx	lr
     bc2:	bf00      	nop

00000bc4 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     bc4:	4b1b      	ldr	r3, [pc, #108]	; (c34 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     bc6:	2105      	movs	r1, #5
     bc8:	4a1b      	ldr	r2, [pc, #108]	; (c38 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     bca:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     bcc:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     bce:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
     bd2:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     bd4:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     bd8:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     bda:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     bdc:	4c17      	ldr	r4, [pc, #92]	; (c3c <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     bde:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     be0:	4817      	ldr	r0, [pc, #92]	; (c40 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     be2:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
     be4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     be8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
     bec:	6823      	ldr	r3, [r4, #0]
     bee:	4283      	cmp	r3, r0
     bf0:	d902      	bls.n	bf8 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
     bf2:	4814      	ldr	r0, [pc, #80]	; (c44 <HardFault_HandlerC+0x80>)
     bf4:	f001 fa74 	bl	20e0 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     bf8:	4d0e      	ldr	r5, [pc, #56]	; (c34 <HardFault_HandlerC+0x70>)
     bfa:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     bfc:	2000      	movs	r0, #0
     bfe:	4a12      	ldr	r2, [pc, #72]	; (c48 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     c00:	4912      	ldr	r1, [pc, #72]	; (c4c <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     c02:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     c06:	9001      	str	r0, [sp, #4]
     c08:	9b01      	ldr	r3, [sp, #4]
     c0a:	4293      	cmp	r3, r2
     c0c:	d805      	bhi.n	c1a <HardFault_HandlerC+0x56>
     c0e:	9b01      	ldr	r3, [sp, #4]
     c10:	3301      	adds	r3, #1
     c12:	9301      	str	r3, [sp, #4]
     c14:	9b01      	ldr	r3, [sp, #4]
     c16:	4293      	cmp	r3, r2
     c18:	d9f9      	bls.n	c0e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     c1a:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     c1e:	9001      	str	r0, [sp, #4]
     c20:	9b01      	ldr	r3, [sp, #4]
     c22:	428b      	cmp	r3, r1
     c24:	d8ed      	bhi.n	c02 <HardFault_HandlerC+0x3e>
     c26:	9b01      	ldr	r3, [sp, #4]
     c28:	3301      	adds	r3, #1
     c2a:	9301      	str	r3, [sp, #4]
     c2c:	9b01      	ldr	r3, [sp, #4]
     c2e:	428b      	cmp	r3, r1
     c30:	d9f9      	bls.n	c26 <HardFault_HandlerC+0x62>
     c32:	e7e6      	b.n	c02 <HardFault_HandlerC+0x3e>
     c34:	401bc000 	.word	0x401bc000
     c38:	401f8000 	.word	0x401f8000
     c3c:	20000454 	.word	0x20000454
     c40:	23c345ff 	.word	0x23c345ff
     c44:	11e1a300 	.word	0x11e1a300
     c48:	000f423f 	.word	0x000f423f
     c4c:	0089543f 	.word	0x0089543f

00000c50 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
     c50:	4a09      	ldr	r2, [pc, #36]	; (c78 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
     c52:	b508      	push	{r3, lr}
        char *prev = __brkval;
     c54:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
     c56:	b120      	cbz	r0, c62 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
     c58:	4418      	add	r0, r3
     c5a:	4908      	ldr	r1, [pc, #32]	; (c7c <_sbrk+0x2c>)
     c5c:	4288      	cmp	r0, r1
     c5e:	d802      	bhi.n	c66 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
     c60:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
     c62:	4618      	mov	r0, r3
     c64:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     c66:	f001 fbc7 	bl	23f8 <__errno>
     c6a:	220c      	movs	r2, #12
                        return (void *)-1;
     c6c:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     c70:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
     c72:	4618      	mov	r0, r3
     c74:	bd08      	pop	{r3, pc}
     c76:	bf00      	nop
     c78:	2000040c 	.word	0x2000040c
     c7c:	20280000 	.word	0x20280000

00000c80 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
     c80:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
     c82:	4a06      	ldr	r2, [pc, #24]	; (c9c <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
     c84:	2107      	movs	r1, #7
     c86:	4b06      	ldr	r3, [pc, #24]	; (ca0 <Panic_Temp_isr+0x20>)
     c88:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
     c8a:	6b93      	ldr	r3, [r2, #56]	; 0x38
     c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c90:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
     c92:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
     c96:	bf30      	wfi
     c98:	e7fd      	b.n	c96 <Panic_Temp_isr+0x16>
     c9a:	bf00      	nop
     c9c:	400d4000 	.word	0x400d4000
     ca0:	400ac000 	.word	0x400ac000

00000ca4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     ca4:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
     ca6:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     ca8:	b11b      	cbz	r3, cb2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     caa:	6853      	ldr	r3, [r2, #4]
     cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     cb0:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
     cb2:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     cb4:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     cb6:	b1dc      	cbz	r4, cf0 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     cb8:	4b14      	ldr	r3, [pc, #80]	; (d0c <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
     cba:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     cbc:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     cc0:	420c      	tst	r4, r1
     cc2:	d11f      	bne.n	d04 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
     cc4:	4d12      	ldr	r5, [pc, #72]	; (d10 <schedule_transfer+0x6c>)
     cc6:	682f      	ldr	r7, [r5, #0]
     cc8:	e004      	b.n	cd4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     cca:	682c      	ldr	r4, [r5, #0]
     ccc:	1be4      	subs	r4, r4, r7
     cce:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
     cd2:	d20b      	bcs.n	cec <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     cd4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     cd8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
     cdc:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     ce0:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
     ce4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     ce8:	0464      	lsls	r4, r4, #17
     cea:	d5ee      	bpl.n	cca <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     cec:	4231      	tst	r1, r6
     cee:	d109      	bne.n	d04 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
     cf0:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
     cf2:	4c06      	ldr	r4, [pc, #24]	; (d0c <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
     cf4:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
     cf6:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
     cf8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     cfc:	4319      	orrs	r1, r3
     cfe:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     d02:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
     d04:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     d06:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     d08:	bcf0      	pop	{r4, r5, r6, r7}
     d0a:	4770      	bx	lr
     d0c:	402e0000 	.word	0x402e0000
     d10:	e0001004 	.word	0xe0001004

00000d14 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     d14:	b570      	push	{r4, r5, r6, lr}
     d16:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     d18:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
     d1a:	b190      	cbz	r0, d42 <run_callbacks+0x2e>
     d1c:	4602      	mov	r2, r0
     d1e:	2400      	movs	r4, #0
     d20:	e003      	b.n	d2a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     d22:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
     d24:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
     d26:	2a01      	cmp	r2, #1
     d28:	d00c      	beq.n	d44 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
     d2a:	6853      	ldr	r3, [r2, #4]
     d2c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     d30:	d0f7      	beq.n	d22 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
     d32:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     d34:	b12c      	cbz	r4, d42 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
     d36:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
     d38:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
     d3a:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     d3c:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
     d3e:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     d40:	d1f9      	bne.n	d36 <run_callbacks+0x22>
     d42:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
     d44:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
     d46:	6373      	str	r3, [r6, #52]	; 0x34
			break;
     d48:	e7f4      	b.n	d34 <run_callbacks+0x20>
     d4a:	bf00      	nop

00000d4c <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
     d4e:	b9e1      	cbnz	r1, d8a <endpoint0_transmit.constprop.1+0x3e>
     d50:	4c21      	ldr	r4, [pc, #132]	; (dd8 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d52:	4922      	ldr	r1, [pc, #136]	; (ddc <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     d54:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     d56:	4b22      	ldr	r3, [pc, #136]	; (de0 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d58:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     d5a:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d5e:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     d60:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     d62:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     d64:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     d66:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     d68:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
     d6a:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     d6e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     d72:	4d1c      	ldr	r5, [pc, #112]	; (de4 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
     d74:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     d78:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
     d7a:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     d7e:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
     d80:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     d84:	2b00      	cmp	r3, #0
     d86:	d1fb      	bne.n	d80 <endpoint0_transmit.constprop.1+0x34>
}
     d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     d8a:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     d8c:	4b16      	ldr	r3, [pc, #88]	; (de8 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     d8e:	4d14      	ldr	r5, [pc, #80]	; (de0 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     d90:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     d92:	4c11      	ldr	r4, [pc, #68]	; (dd8 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     d94:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     d98:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     d9a:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     d9c:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     d9e:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     da2:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     da4:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     da8:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     daa:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     dae:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     db2:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
     db6:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     db8:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     dba:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     dbe:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     dc2:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     dc6:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     dc8:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     dca:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     dce:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     dd2:	2b00      	cmp	r3, #0
     dd4:	d1fb      	bne.n	dce <endpoint0_transmit.constprop.1+0x82>
     dd6:	e7bc      	b.n	d52 <endpoint0_transmit.constprop.1+0x6>
     dd8:	20003000 	.word	0x20003000
     ddc:	20002020 	.word	0x20002020
     de0:	402e0000 	.word	0x402e0000
     de4:	20000d14 	.word	0x20000d14
     de8:	20002000 	.word	0x20002000

00000dec <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
     dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     df0:	4cac      	ldr	r4, [pc, #688]	; (10a4 <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
     df2:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     df4:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     df8:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
     dfc:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     e00:	d05e      	beq.n	ec0 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     e02:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     e06:	2b00      	cmp	r3, #0
     e08:	d055      	beq.n	eb6 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     e0a:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
     e0e:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 10cc <isr+0x2e0>
     e12:	4ea5      	ldr	r6, [pc, #660]	; (10a8 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     e14:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     e16:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     e18:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
     e1c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     e1e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     e20:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     e24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     e28:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     e2c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     e30:	049f      	lsls	r7, r3, #18
     e32:	d5f5      	bpl.n	e20 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     e34:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
     e38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     e3c:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     e40:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     e44:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
     e48:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
     e4c:	d1fa      	bne.n	e44 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     e4e:	b281      	uxth	r1, r0
     e50:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
     e54:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     e58:	42b9      	cmp	r1, r7
     e5a:	f200 80b4 	bhi.w	fc6 <isr+0x1da>
     e5e:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
     e62:	f080 81e9 	bcs.w	1238 <isr+0x44c>
     e66:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
     e6a:	f000 816b 	beq.w	1144 <isr+0x358>
     e6e:	f200 80f0 	bhi.w	1052 <isr+0x266>
     e72:	2980      	cmp	r1, #128	; 0x80
     e74:	f000 8159 	beq.w	112a <isr+0x33e>
     e78:	2982      	cmp	r1, #130	; 0x82
     e7a:	f040 80e2 	bne.w	1042 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
     e7e:	b292      	uxth	r2, r2
     e80:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
     e84:	2907      	cmp	r1, #7
     e86:	f200 80dc 	bhi.w	1042 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     e8a:	0089      	lsls	r1, r1, #2
     e8c:	4887      	ldr	r0, [pc, #540]	; (10ac <isr+0x2c0>)
		reply_buffer[0] = 0;
     e8e:	4f88      	ldr	r7, [pc, #544]	; (10b0 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
     e90:	4408      	add	r0, r1
     e92:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     e94:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
     e96:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
     e98:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
     e9a:	f140 820c 	bpl.w	12b6 <isr+0x4ca>
     e9e:	03ca      	lsls	r2, r1, #15
     ea0:	d501      	bpl.n	ea6 <isr+0xba>
			reply_buffer[0] = 1;
     ea2:	2301      	movs	r3, #1
     ea4:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
     ea6:	2102      	movs	r1, #2
     ea8:	4881      	ldr	r0, [pc, #516]	; (10b0 <isr+0x2c4>)
     eaa:	f7ff ff4f 	bl	d4c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
     eae:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     eb2:	2b00      	cmp	r3, #0
     eb4:	d1b0      	bne.n	e18 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
     eb6:	4a7b      	ldr	r2, [pc, #492]	; (10a4 <isr+0x2b8>)
     eb8:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
     ebc:	2b00      	cmp	r3, #0
     ebe:	d150      	bne.n	f62 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
     ec0:	f018 0f40 	tst.w	r8, #64	; 0x40
     ec4:	d018      	beq.n	ef8 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     ec6:	4b77      	ldr	r3, [pc, #476]	; (10a4 <isr+0x2b8>)
     ec8:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     ecc:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
     ece:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
     ed2:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
     ed6:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
     eda:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
     ede:	4b71      	ldr	r3, [pc, #452]	; (10a4 <isr+0x2b8>)
     ee0:	2c00      	cmp	r4, #0
     ee2:	d1fa      	bne.n	eda <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
     ee4:	f04f 32ff 	mov.w	r2, #4294967295
     ee8:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
     eec:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
     ef0:	f000 fd1e 	bl	1930 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
     ef4:	4b6f      	ldr	r3, [pc, #444]	; (10b4 <isr+0x2c8>)
     ef6:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
     ef8:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
     efc:	d003      	beq.n	f06 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
     efe:	4b6e      	ldr	r3, [pc, #440]	; (10b8 <isr+0x2cc>)
     f00:	681b      	ldr	r3, [r3, #0]
     f02:	b103      	cbz	r3, f06 <isr+0x11a>
     f04:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
     f06:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
     f0a:	d003      	beq.n	f14 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
     f0c:	4b6b      	ldr	r3, [pc, #428]	; (10bc <isr+0x2d0>)
     f0e:	681b      	ldr	r3, [r3, #0]
     f10:	b103      	cbz	r3, f14 <isr+0x128>
     f12:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
     f14:	f018 0f04 	tst.w	r8, #4
     f18:	d008      	beq.n	f2c <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
     f1a:	4b62      	ldr	r3, [pc, #392]	; (10a4 <isr+0x2b8>)
     f1c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
     f20:	f413 7300 	ands.w	r3, r3, #512	; 0x200
     f24:	d04c      	beq.n	fc0 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
     f26:	4b66      	ldr	r3, [pc, #408]	; (10c0 <isr+0x2d4>)
     f28:	2201      	movs	r2, #1
     f2a:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
     f2c:	4b5d      	ldr	r3, [pc, #372]	; (10a4 <isr+0x2b8>)
     f2e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
     f32:	0612      	lsls	r2, r2, #24
     f34:	d512      	bpl.n	f5c <isr+0x170>
     f36:	f018 0f80 	tst.w	r8, #128	; 0x80
     f3a:	d00f      	beq.n	f5c <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
     f3c:	4961      	ldr	r1, [pc, #388]	; (10c4 <isr+0x2d8>)
     f3e:	780a      	ldrb	r2, [r1, #0]
     f40:	b162      	cbz	r2, f5c <isr+0x170>
			if (--usb_reboot_timer == 0) {
     f42:	3a01      	subs	r2, #1
     f44:	b2d2      	uxtb	r2, r2
     f46:	700a      	strb	r2, [r1, #0]
     f48:	b942      	cbnz	r2, f5c <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
     f4a:	495f      	ldr	r1, [pc, #380]	; (10c8 <isr+0x2dc>)
     f4c:	780a      	ldrb	r2, [r1, #0]
     f4e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f52:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
     f54:	2a00      	cmp	r2, #0
     f56:	f000 8232 	beq.w	13be <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
     f5a:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
     f5c:	b003      	add	sp, #12
     f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     f62:	495a      	ldr	r1, [pc, #360]	; (10cc <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
     f64:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
     f68:	6808      	ldr	r0, [r1, #0]
     f6a:	4203      	tst	r3, r0
     f6c:	f040 81e6 	bne.w	133c <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
     f70:	4a50      	ldr	r2, [pc, #320]	; (10b4 <isr+0x2c8>)
     f72:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
     f74:	401d      	ands	r5, r3
     f76:	d0a3      	beq.n	ec0 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
     f78:	0c2f      	lsrs	r7, r5, #16
     f7a:	d00f      	beq.n	f9c <isr+0x1b0>
     f7c:	4e4a      	ldr	r6, [pc, #296]	; (10a8 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
     f7e:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
     f82:	fa97 f4a7 	rbit	r4, r7
     f86:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     f8a:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
     f8e:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
     f92:	3040      	adds	r0, #64	; 0x40
     f94:	f7ff febe 	bl	d14 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
     f98:	43a7      	bics	r7, r4
     f9a:	d1f2      	bne.n	f82 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
     f9c:	b2ad      	uxth	r5, r5
				while(rx) {
     f9e:	2d00      	cmp	r5, #0
     fa0:	d08e      	beq.n	ec0 <isr+0xd4>
     fa2:	4e41      	ldr	r6, [pc, #260]	; (10a8 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
     fa4:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
     fa6:	fa95 f4a5 	rbit	r4, r5
     faa:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
     fae:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
     fb2:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
     fb6:	f7ff fead 	bl	d14 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
     fba:	43a5      	bics	r5, r4
     fbc:	d1f3      	bne.n	fa6 <isr+0x1ba>
     fbe:	e77f      	b.n	ec0 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
     fc0:	4a3f      	ldr	r2, [pc, #252]	; (10c0 <isr+0x2d4>)
     fc2:	7013      	strb	r3, [r2, #0]
     fc4:	e7b2      	b.n	f2c <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     fc6:	f242 0721 	movw	r7, #8225	; 0x2021
     fca:	42b9      	cmp	r1, r7
     fcc:	d035      	beq.n	103a <isr+0x24e>
     fce:	f200 8089 	bhi.w	10e4 <isr+0x2f8>
     fd2:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
     fd6:	f000 8121 	beq.w	121c <isr+0x430>
     fda:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
     fde:	d130      	bne.n	1042 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     fe0:	f3c0 4007 	ubfx	r0, r0, #16, #8
     fe4:	4a3a      	ldr	r2, [pc, #232]	; (10d0 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     fe6:	493b      	ldr	r1, [pc, #236]	; (10d4 <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
     fe8:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     fea:	4f3b      	ldr	r7, [pc, #236]	; (10d8 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     fec:	4a3b      	ldr	r2, [pc, #236]	; (10dc <isr+0x2f0>)
     fee:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
     ff0:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
     ff4:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
     ff8:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
     ffc:	f000 fc9a 	bl	1934 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1000:	4a37      	ldr	r2, [pc, #220]	; (10e0 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1002:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1004:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1006:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1008:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    100a:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    100c:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    100e:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1010:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1014:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1018:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    101a:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    101e:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1022:	4a2a      	ldr	r2, [pc, #168]	; (10cc <isr+0x2e0>)
    1024:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    1026:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    102a:	2b00      	cmp	r3, #0
    102c:	d1fb      	bne.n	1026 <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    102e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1032:	2b00      	cmp	r3, #0
    1034:	f47f aef0 	bne.w	e18 <isr+0x2c>
    1038:	e73d      	b.n	eb6 <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    103a:	0c11      	lsrs	r1, r2, #16
    103c:	2907      	cmp	r1, #7
    103e:	f000 813e 	beq.w	12be <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1042:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1046:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    104a:	2b00      	cmp	r3, #0
    104c:	f47f aee4 	bne.w	e18 <isr+0x2c>
    1050:	e731      	b.n	eb6 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1052:	f240 3702 	movw	r7, #770	; 0x302
    1056:	42b9      	cmp	r1, r7
    1058:	f000 80b0 	beq.w	11bc <isr+0x3d0>
    105c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    1060:	d1ef      	bne.n	1042 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1062:	4a1f      	ldr	r2, [pc, #124]	; (10e0 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1064:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1066:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1068:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    106a:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    106c:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    106e:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1070:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1074:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1078:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    107a:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    107e:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1082:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1086:	2b00      	cmp	r3, #0
    1088:	d1fb      	bne.n	1082 <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    108a:	0c03      	lsrs	r3, r0, #16
    108c:	065b      	lsls	r3, r3, #25
    108e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1092:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1096:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    109a:	2b00      	cmp	r3, #0
    109c:	f47f aebc 	bne.w	e18 <isr+0x2c>
    10a0:	e709      	b.n	eb6 <isr+0xca>
    10a2:	bf00      	nop
    10a4:	402e0000 	.word	0x402e0000
    10a8:	20003000 	.word	0x20003000
    10ac:	402e01c0 	.word	0x402e01c0
    10b0:	20000d28 	.word	0x20000d28
    10b4:	20000d04 	.word	0x20000d04
    10b8:	20000d00 	.word	0x20000d00
    10bc:	20000d0c 	.word	0x20000d0c
    10c0:	20000d10 	.word	0x20000d10
    10c4:	20000d18 	.word	0x20000d18
    10c8:	20000d08 	.word	0x20000d08
    10cc:	20000d14 	.word	0x20000d14
    10d0:	20000d38 	.word	0x20000d38
    10d4:	000200c8 	.word	0x000200c8
    10d8:	00cc0002 	.word	0x00cc0002
    10dc:	00c80002 	.word	0x00c80002
    10e0:	20002020 	.word	0x20002020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    10e4:	f242 2321 	movw	r3, #8737	; 0x2221
    10e8:	4299      	cmp	r1, r3
    10ea:	d05b      	beq.n	11a4 <isr+0x3b8>
    10ec:	f242 3321 	movw	r3, #8993	; 0x2321
    10f0:	4299      	cmp	r1, r3
    10f2:	d1a6      	bne.n	1042 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    10f4:	4bb5      	ldr	r3, [pc, #724]	; (13cc <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    10f6:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    10f8:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    10fa:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    10fc:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    10fe:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1100:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1102:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1104:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1108:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    110c:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    110e:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1112:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1116:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    111a:	2b00      	cmp	r3, #0
    111c:	d1fb      	bne.n	1116 <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    111e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1122:	2b00      	cmp	r3, #0
    1124:	f47f ae78 	bne.w	e18 <isr+0x2c>
    1128:	e6c5      	b.n	eb6 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    112a:	4aa9      	ldr	r2, [pc, #676]	; (13d0 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    112c:	2102      	movs	r1, #2
    112e:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    1130:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    1132:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    1134:	f7ff fe0a 	bl	d4c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1138:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    113c:	2b00      	cmp	r3, #0
    113e:	f47f ae6b 	bne.w	e18 <isr+0x2c>
    1142:	e6b8      	b.n	eb6 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1144:	b292      	uxth	r2, r2
    1146:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    114a:	2b07      	cmp	r3, #7
    114c:	f63f af79 	bhi.w	1042 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    1150:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1154:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1158:	4a9e      	ldr	r2, [pc, #632]	; (13d4 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    115a:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    115e:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1162:	441a      	add	r2, r3
    1164:	6813      	ldr	r3, [r2, #0]
    1166:	bf14      	ite	ne
    1168:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    116c:	f023 0301 	biceq.w	r3, r3, #1
    1170:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1172:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1174:	4b95      	ldr	r3, [pc, #596]	; (13cc <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1176:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1178:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    117a:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    117c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    117e:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1182:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1186:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1188:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    118c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1190:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1194:	2b00      	cmp	r3, #0
    1196:	d1fb      	bne.n	1190 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1198:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    119c:	2b00      	cmp	r3, #0
    119e:	f47f ae3b 	bne.w	e18 <isr+0x2c>
    11a2:	e688      	b.n	eb6 <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    11a4:	b292      	uxth	r2, r2
    11a6:	2a00      	cmp	r2, #0
    11a8:	d1a4      	bne.n	10f4 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    11aa:	4b8b      	ldr	r3, [pc, #556]	; (13d8 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    11ac:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    11b0:	4a8a      	ldr	r2, [pc, #552]	; (13dc <isr+0x5f0>)
    11b2:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    11b4:	4b8a      	ldr	r3, [pc, #552]	; (13e0 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    11b6:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    11b8:	7018      	strb	r0, [r3, #0]
    11ba:	e79b      	b.n	10f4 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    11bc:	b292      	uxth	r2, r2
    11be:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    11c2:	2b07      	cmp	r3, #7
    11c4:	f63f af3d 	bhi.w	1042 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    11c8:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    11cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    11d0:	4a80      	ldr	r2, [pc, #512]	; (13d4 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    11d2:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    11d6:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    11da:	441a      	add	r2, r3
    11dc:	6813      	ldr	r3, [r2, #0]
    11de:	bf14      	ite	ne
    11e0:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    11e4:	f043 0301 	orreq.w	r3, r3, #1
    11e8:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    11ea:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    11ec:	4b77      	ldr	r3, [pc, #476]	; (13cc <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    11ee:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    11f0:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    11f2:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    11f4:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    11f6:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    11fa:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    11fe:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1200:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    1204:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1208:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    120c:	2b00      	cmp	r3, #0
    120e:	d1fb      	bne.n	1208 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1210:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1214:	2b00      	cmp	r3, #0
    1216:	f47f adff 	bne.w	e18 <isr+0x2c>
    121a:	e64c      	b.n	eb6 <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    121c:	4a71      	ldr	r2, [pc, #452]	; (13e4 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    121e:	2101      	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1220:	4b6b      	ldr	r3, [pc, #428]	; (13d0 <isr+0x5e4>)
    1222:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1224:	4618      	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    1226:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1228:	f7ff fd90 	bl	d4c <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    122c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1230:	2b00      	cmp	r3, #0
    1232:	f47f adf1 	bne.w	e18 <isr+0x2c>
    1236:	e63e      	b.n	eb6 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1238:	4b6b      	ldr	r3, [pc, #428]	; (13e8 <isr+0x5fc>)
    123a:	6859      	ldr	r1, [r3, #4]
    123c:	2900      	cmp	r1, #0
    123e:	f43f af00 	beq.w	1042 <isr+0x256>
    1242:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1244:	fa1f fe82 	uxth.w	lr, r2
    1248:	e004      	b.n	1254 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    124a:	330c      	adds	r3, #12
    124c:	6859      	ldr	r1, [r3, #4]
    124e:	2900      	cmp	r1, #0
    1250:	f43f aef7 	beq.w	1042 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1254:	881f      	ldrh	r7, [r3, #0]
    1256:	4287      	cmp	r7, r0
    1258:	d1f7      	bne.n	124a <isr+0x45e>
    125a:	885f      	ldrh	r7, [r3, #2]
    125c:	4577      	cmp	r7, lr
    125e:	d1f4      	bne.n	124a <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    1260:	0a07      	lsrs	r7, r0, #8
    1262:	2f03      	cmp	r7, #3
    1264:	f000 80e9 	beq.w	143a <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1268:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    126a:	0c12      	lsrs	r2, r2, #16
    126c:	4293      	cmp	r3, r2
    126e:	bf28      	it	cs
    1270:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    1272:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1276:	f000 80d1 	beq.w	141c <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    127a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    127e:	f000 808b 	beq.w	1398 <isr+0x5ac>
    1282:	4f5a      	ldr	r7, [pc, #360]	; (13ec <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1284:	461a      	mov	r2, r3
    1286:	9301      	str	r3, [sp, #4]
    1288:	4638      	mov	r0, r7
    128a:	f000 fe8f 	bl	1fac <memcpy>
    128e:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1290:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1294:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    1296:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    129a:	4955      	ldr	r1, [pc, #340]	; (13f0 <isr+0x604>)
    129c:	600a      	str	r2, [r1, #0]
		location += 32;
    129e:	3220      	adds	r2, #32
	} while (location < end_addr);
    12a0:	4297      	cmp	r7, r2
    12a2:	d8fa      	bhi.n	129a <isr+0x4ae>
	asm("dsb");
    12a4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    12a8:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    12ac:	484f      	ldr	r0, [pc, #316]	; (13ec <isr+0x600>)
    12ae:	4619      	mov	r1, r3
    12b0:	f7ff fd4c 	bl	d4c <endpoint0_transmit.constprop.1>
    12b4:	e5fb      	b.n	eae <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    12b6:	07cb      	lsls	r3, r1, #31
    12b8:	f57f adf5 	bpl.w	ea6 <isr+0xba>
    12bc:	e5f1      	b.n	ea2 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    12be:	4f4d      	ldr	r7, [pc, #308]	; (13f4 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    12c0:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    12c4:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    12c6:	494c      	ldr	r1, [pc, #304]	; (13f8 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    12c8:	4b4c      	ldr	r3, [pc, #304]	; (13fc <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    12ca:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    12cc:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    12d0:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    12d2:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    12d4:	494a      	ldr	r1, [pc, #296]	; (1400 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    12d6:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    12da:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    12dc:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    12e0:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    12e4:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    12e6:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    12ea:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    12ee:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    12f2:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    12f6:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    12f8:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    12fc:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    12fe:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    1300:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1304:	2b00      	cmp	r3, #0
    1306:	d1fb      	bne.n	1300 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    1308:	4a30      	ldr	r2, [pc, #192]	; (13cc <isr+0x5e0>)
    130a:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    130c:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1310:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1312:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1314:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1318:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    131a:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    131c:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1320:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1324:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    1326:	ea41 0300 	orr.w	r3, r1, r0
    132a:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    132e:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    1332:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1336:	2b00      	cmp	r3, #0
    1338:	d1fb      	bne.n	1332 <isr+0x546>
    133a:	e5b8      	b.n	eae <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    133c:	482d      	ldr	r0, [pc, #180]	; (13f4 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    133e:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1342:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1344:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    1346:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1348:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    134a:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    134c:	f47f ae10 	bne.w	f70 <isr+0x184>
    1350:	b281      	uxth	r1, r0
    1352:	2900      	cmp	r1, #0
    1354:	f47f ae0c 	bne.w	f70 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1358:	4929      	ldr	r1, [pc, #164]	; (1400 <isr+0x614>)
    135a:	4c2a      	ldr	r4, [pc, #168]	; (1404 <isr+0x618>)
    135c:	c903      	ldmia	r1, {r0, r1}
    135e:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1360:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1362:	6020      	str	r0, [r4, #0]
    1364:	80a1      	strh	r1, [r4, #4]
    1366:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1368:	f47f ae02 	bne.w	f70 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    136c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    136e:	4826      	ldr	r0, [pc, #152]	; (1408 <isr+0x61c>)
    1370:	7801      	ldrb	r1, [r0, #0]
    1372:	f041 0104 	orr.w	r1, r1, #4
    1376:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1378:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    137c:	0608      	lsls	r0, r1, #24
    137e:	d406      	bmi.n	138e <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1380:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    1384:	2080      	movs	r0, #128	; 0x80
    1386:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    138a:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    138e:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1390:	4a1e      	ldr	r2, [pc, #120]	; (140c <isr+0x620>)
    1392:	2150      	movs	r1, #80	; 0x50
    1394:	7011      	strb	r1, [r2, #0]
    1396:	e5eb      	b.n	f70 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1398:	481d      	ldr	r0, [pc, #116]	; (1410 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    139a:	461a      	mov	r2, r3
    139c:	4f13      	ldr	r7, [pc, #76]	; (13ec <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    139e:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    13a2:	491c      	ldr	r1, [pc, #112]	; (1414 <isr+0x628>)
    13a4:	481c      	ldr	r0, [pc, #112]	; (1418 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    13a6:	9301      	str	r3, [sp, #4]
    13a8:	f1be 0f00 	cmp.w	lr, #0
    13ac:	bf08      	it	eq
    13ae:	4601      	moveq	r1, r0
    13b0:	4638      	mov	r0, r7
    13b2:	f000 fdfb 	bl	1fac <memcpy>
					usb_descriptor_buffer[1] = 7;
    13b6:	2207      	movs	r2, #7
    13b8:	9b01      	ldr	r3, [sp, #4]
    13ba:	707a      	strb	r2, [r7, #1]
    13bc:	e768      	b.n	1290 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    13be:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    13c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    13c6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    13ca:	e5c6      	b.n	f5a <isr+0x16e>
    13cc:	20002020 	.word	0x20002020
    13d0:	20000d28 	.word	0x20000d28
    13d4:	402e01c0 	.word	0x402e01c0
    13d8:	20000cec 	.word	0x20000cec
    13dc:	20003288 	.word	0x20003288
    13e0:	20000e88 	.word	0x20000e88
    13e4:	20000d38 	.word	0x20000d38
    13e8:	20000370 	.word	0x20000370
    13ec:	20200000 	.word	0x20200000
    13f0:	e000ef70 	.word	0xe000ef70
    13f4:	20000d20 	.word	0x20000d20
    13f8:	00070080 	.word	0x00070080
    13fc:	20002000 	.word	0x20002000
    1400:	20000d30 	.word	0x20000d30
    1404:	20003280 	.word	0x20003280
    1408:	20000d08 	.word	0x20000d08
    140c:	20000d18 	.word	0x20000d18
    1410:	20000d10 	.word	0x20000d10
    1414:	60001694 	.word	0x60001694
    1418:	600016d8 	.word	0x600016d8

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    141c:	480a      	ldr	r0, [pc, #40]	; (1448 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    141e:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1420:	490a      	ldr	r1, [pc, #40]	; (144c <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1422:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1424:	480a      	ldr	r0, [pc, #40]	; (1450 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1426:	9301      	str	r3, [sp, #4]
    1428:	2f00      	cmp	r7, #0
    142a:	bf08      	it	eq
    142c:	4601      	moveq	r1, r0
    142e:	4809      	ldr	r0, [pc, #36]	; (1454 <isr+0x668>)
    1430:	f000 fdbc 	bl	1fac <memcpy>
    1434:	4f07      	ldr	r7, [pc, #28]	; (1454 <isr+0x668>)
    1436:	9b01      	ldr	r3, [sp, #4]
    1438:	e72a      	b.n	1290 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    143a:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    143c:	780b      	ldrb	r3, [r1, #0]
    143e:	4293      	cmp	r3, r2
    1440:	bf28      	it	cs
    1442:	4613      	movcs	r3, r2
    1444:	e719      	b.n	127a <isr+0x48e>
    1446:	bf00      	nop
    1448:	20000d10 	.word	0x20000d10
    144c:	600016d8 	.word	0x600016d8
    1450:	60001694 	.word	0x60001694
    1454:	20200000 	.word	0x20200000

00001458 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1458:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    145a:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    145e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1462:	bf14      	ite	ne
    1464:	2700      	movne	r7, #0
    1466:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    146a:	2a02      	cmp	r2, #2
    146c:	d901      	bls.n	1472 <usb_config_rx+0x1a>
    146e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1472:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    1476:	f8df 9040 	ldr.w	r9, [pc, #64]	; 14b8 <usb_config_rx+0x60>
    147a:	460d      	mov	r5, r1
    147c:	4604      	mov	r4, r0
    147e:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1482:	2100      	movs	r1, #0
    1484:	2240      	movs	r2, #64	; 0x40
    1486:	4698      	mov	r8, r3
    1488:	4630      	mov	r0, r6
    148a:	f001 faa3 	bl	29d4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    148e:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1490:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    1494:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    1498:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    149c:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    149e:	f1b8 0f00 	cmp.w	r8, #0
    14a2:	d0e4      	beq.n	146e <usb_config_rx+0x16>
    14a4:	4b03      	ldr	r3, [pc, #12]	; (14b4 <usb_config_rx+0x5c>)
    14a6:	40a0      	lsls	r0, r4
    14a8:	681c      	ldr	r4, [r3, #0]
    14aa:	4320      	orrs	r0, r4
    14ac:	6018      	str	r0, [r3, #0]
    14ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    14b2:	bf00      	nop
    14b4:	20000d04 	.word	0x20000d04
    14b8:	20003000 	.word	0x20003000

000014bc <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    14bc:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    14be:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    14c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    14c6:	bf14      	ite	ne
    14c8:	2700      	movne	r7, #0
    14ca:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    14ce:	2a02      	cmp	r2, #2
    14d0:	d901      	bls.n	14d6 <usb_config_tx+0x1a>
    14d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    14d6:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    14d8:	01c5      	lsls	r5, r0, #7
    14da:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1520 <usb_config_tx+0x64>
    14de:	4688      	mov	r8, r1
    14e0:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    14e2:	2100      	movs	r1, #0
    14e4:	4604      	mov	r4, r0
    14e6:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    14e8:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    14ec:	4650      	mov	r0, sl
    14ee:	f001 fa71 	bl	29d4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    14f2:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    14f4:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    14f8:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    14fc:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1500:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1504:	2e00      	cmp	r6, #0
    1506:	d0e4      	beq.n	14d2 <usb_config_tx+0x16>
    1508:	f104 0010 	add.w	r0, r4, #16
    150c:	4b03      	ldr	r3, [pc, #12]	; (151c <usb_config_tx+0x60>)
    150e:	4082      	lsls	r2, r0
    1510:	6818      	ldr	r0, [r3, #0]
    1512:	4302      	orrs	r2, r0
    1514:	601a      	str	r2, [r3, #0]
    1516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    151a:	bf00      	nop
    151c:	20000d04 	.word	0x20000d04
    1520:	20003000 	.word	0x20003000

00001524 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1524:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    1526:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    1528:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    152a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    152e:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    1530:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1532:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1534:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    1538:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    153c:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1540:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1544:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    1546:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    1548:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    154a:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    154c:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    154e:	bcf0      	pop	{r4, r5, r6, r7}
    1550:	4770      	bx	lr
    1552:	bf00      	nop

00001554 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1554:	1e83      	subs	r3, r0, #2
    1556:	2b02      	cmp	r3, #2
    1558:	d900      	bls.n	155c <usb_transmit+0x8>
    155a:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    155c:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    155e:	4b06      	ldr	r3, [pc, #24]	; (1578 <usb_transmit+0x24>)
    1560:	f100 0410 	add.w	r4, r0, #16
    1564:	2501      	movs	r5, #1
    1566:	460a      	mov	r2, r1
    1568:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    156c:	fa05 f104 	lsl.w	r1, r5, r4
}
    1570:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1572:	f7ff bb97 	b.w	ca4 <schedule_transfer>
    1576:	bf00      	nop
    1578:	20003040 	.word	0x20003040

0000157c <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    157c:	1e83      	subs	r3, r0, #2
    157e:	2b02      	cmp	r3, #2
    1580:	d900      	bls.n	1584 <usb_receive+0x8>
    1582:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1584:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1586:	4b05      	ldr	r3, [pc, #20]	; (159c <usb_receive+0x20>)
    1588:	2401      	movs	r4, #1
    158a:	460a      	mov	r2, r1
    158c:	fa04 f100 	lsl.w	r1, r4, r0
    1590:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    1594:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    1598:	f7ff bb84 	b.w	ca4 <schedule_transfer>
    159c:	20003000 	.word	0x20003000

000015a0 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    15a0:	6840      	ldr	r0, [r0, #4]
#endif
}
    15a2:	4770      	bx	lr

000015a4 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    15a4:	4a12      	ldr	r2, [pc, #72]	; (15f0 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    15a6:	4b13      	ldr	r3, [pc, #76]	; (15f4 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    15a8:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    15ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    15b0:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    15b2:	b510      	push	{r4, lr}
    15b4:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    15b6:	d802      	bhi.n	15be <usb_init_serialnumber+0x1a>
    15b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    15bc:	0040      	lsls	r0, r0, #1
    15be:	4c0e      	ldr	r4, [pc, #56]	; (15f8 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    15c0:	a901      	add	r1, sp, #4
    15c2:	220a      	movs	r2, #10
    15c4:	f000 feee 	bl	23a4 <ultoa>
    15c8:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    15ca:	2300      	movs	r3, #0
    15cc:	4620      	mov	r0, r4
		char c = buf[i];
    15ce:	f811 2b01 	ldrb.w	r2, [r1], #1
    15d2:	3301      	adds	r3, #1
		if (!c) break;
    15d4:	b13a      	cbz	r2, 15e6 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    15d6:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    15d8:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    15dc:	d1f7      	bne.n	15ce <usb_init_serialnumber+0x2a>
    15de:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    15e0:	7023      	strb	r3, [r4, #0]
}
    15e2:	b004      	add	sp, #16
    15e4:	bd10      	pop	{r4, pc}
    15e6:	005b      	lsls	r3, r3, #1
    15e8:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    15ea:	7023      	strb	r3, [r4, #0]
}
    15ec:	b004      	add	sp, #16
    15ee:	bd10      	pop	{r4, pc}
    15f0:	401f4400 	.word	0x401f4400
    15f4:	0098967f 	.word	0x0098967f
    15f8:	20000424 	.word	0x20000424

000015fc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    15fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    15fe:	4914      	ldr	r1, [pc, #80]	; (1650 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1600:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1604:	4d13      	ldr	r5, [pc, #76]	; (1654 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1606:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1608:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    160c:	4e12      	ldr	r6, [pc, #72]	; (1658 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    160e:	4a13      	ldr	r2, [pc, #76]	; (165c <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1610:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    1614:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1616:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1618:	4628      	mov	r0, r5
    161a:	8832      	ldrh	r2, [r6, #0]
    161c:	f7ff ff82 	bl	1524 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1620:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1622:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1626:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    1628:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    162c:	4a0c      	ldr	r2, [pc, #48]	; (1660 <rx_queue_transfer+0x64>)
    162e:	6013      	str	r3, [r2, #0]
		location += 32;
    1630:	3320      	adds	r3, #32
	} while (location < end_addr);
    1632:	4299      	cmp	r1, r3
    1634:	d8fb      	bhi.n	162e <rx_queue_transfer+0x32>
	asm("dsb");
    1636:	f3bf 8f4f 	dsb	sy
	asm("isb");
    163a:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    163e:	2003      	movs	r0, #3
    1640:	4629      	mov	r1, r5
    1642:	f7ff ff9b 	bl	157c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1646:	4b07      	ldr	r3, [pc, #28]	; (1664 <rx_queue_transfer+0x68>)
    1648:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    164c:	601a      	str	r2, [r3, #0]
    164e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1650:	20200060 	.word	0x20200060
    1654:	20000d60 	.word	0x20000d60
    1658:	20000e6e 	.word	0x20000e6e
    165c:	e000e18c 	.word	0xe000e18c
    1660:	e000ef5c 	.word	0xe000ef5c
    1664:	e000e10c 	.word	0xe000e10c

00001668 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1668:	4a24      	ldr	r2, [pc, #144]	; (16fc <rx_event+0x94>)
    166a:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    166c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1670:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1674:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    1676:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1678:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    167a:	2c00      	cmp	r4, #0
    167c:	dd38      	ble.n	16f0 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    167e:	4920      	ldr	r1, [pc, #128]	; (1700 <rx_event+0x98>)
		if (head != rx_tail) {
    1680:	4a20      	ldr	r2, [pc, #128]	; (1704 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1682:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    1684:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1686:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    1688:	481f      	ldr	r0, [pc, #124]	; (1708 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    168a:	4e20      	ldr	r6, [pc, #128]	; (170c <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    168c:	4293      	cmp	r3, r2
    168e:	d007      	beq.n	16a0 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    1690:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1694:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    1698:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    169c:	4294      	cmp	r4, r2
    169e:	d912      	bls.n	16c6 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    16a0:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    16a2:	2200      	movs	r2, #0
    16a4:	4f1a      	ldr	r7, [pc, #104]	; (1710 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    16a6:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    16a8:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    16ac:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    16b0:	4e18      	ldr	r6, [pc, #96]	; (1714 <rx_event+0xac>)
    16b2:	bf94      	ite	ls
    16b4:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    16b6:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    16b8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    16ba:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    16bc:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    16be:	4414      	add	r4, r2
    16c0:	6034      	str	r4, [r6, #0]
    16c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    16c6:	4b14      	ldr	r3, [pc, #80]	; (1718 <rx_event+0xb0>)
    16c8:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    16cc:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    16ce:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    16d0:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    16d4:	4418      	add	r0, r3
    16d6:	f000 fc69 	bl	1fac <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    16da:	4a0e      	ldr	r2, [pc, #56]	; (1714 <rx_event+0xac>)
				rx_queue_transfer(i);
    16dc:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    16de:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    16e2:	6813      	ldr	r3, [r2, #0]
    16e4:	441c      	add	r4, r3
    16e6:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    16e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    16ec:	f7ff bf86 	b.w	15fc <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    16f0:	4628      	mov	r0, r5
	}
}
    16f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    16f6:	f7ff bf81 	b.w	15fc <rx_queue_transfer>
    16fa:	bf00      	nop
    16fc:	20000e6e 	.word	0x20000e6e
    1700:	20000e84 	.word	0x20000e84
    1704:	20000e60 	.word	0x20000e60
    1708:	20000e64 	.word	0x20000e64
    170c:	20000e70 	.word	0x20000e70
    1710:	20000d3c 	.word	0x20000d3c
    1714:	20000e80 	.word	0x20000e80
    1718:	20200060 	.word	0x20200060

0000171c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    171c:	4b1e      	ldr	r3, [pc, #120]	; (1798 <usb_serial_flush_callback+0x7c>)
    171e:	781a      	ldrb	r2, [r3, #0]
    1720:	b95a      	cbnz	r2, 173a <usb_serial_flush_callback+0x1e>
    1722:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    1726:	4a1d      	ldr	r2, [pc, #116]	; (179c <usb_serial_flush_callback+0x80>)
    1728:	7812      	ldrb	r2, [r2, #0]
    172a:	b132      	cbz	r2, 173a <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    172c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    1730:	4d1b      	ldr	r5, [pc, #108]	; (17a0 <usb_serial_flush_callback+0x84>)
    1732:	882a      	ldrh	r2, [r5, #0]
    1734:	b912      	cbnz	r2, 173c <usb_serial_flush_callback+0x20>
    1736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    173a:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    173c:	4e19      	ldr	r6, [pc, #100]	; (17a4 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    173e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1742:	4f19      	ldr	r7, [pc, #100]	; (17a8 <usb_serial_flush_callback+0x8c>)
    1744:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1746:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1748:	4c18      	ldr	r4, [pc, #96]	; (17ac <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    174a:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    174e:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1752:	4638      	mov	r0, r7
    1754:	4621      	mov	r1, r4
    1756:	f7ff fee5 	bl	1524 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    175a:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    175e:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1762:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1766:	4b12      	ldr	r3, [pc, #72]	; (17b0 <usb_serial_flush_callback+0x94>)
    1768:	6019      	str	r1, [r3, #0]
		location += 32;
    176a:	3120      	adds	r1, #32
	} while (location < end_addr);
    176c:	428a      	cmp	r2, r1
    176e:	d8fb      	bhi.n	1768 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    1770:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1774:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1778:	2004      	movs	r0, #4
    177a:	4639      	mov	r1, r7
    177c:	f7ff feea 	bl	1554 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1780:	7833      	ldrb	r3, [r6, #0]
    1782:	4a08      	ldr	r2, [pc, #32]	; (17a4 <usb_serial_flush_callback+0x88>)
    1784:	3301      	adds	r3, #1
    1786:	b2db      	uxtb	r3, r3
    1788:	2b03      	cmp	r3, #3
    178a:	bf88      	it	hi
    178c:	2300      	movhi	r3, #0
    178e:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    1790:	2300      	movs	r3, #0
    1792:	802b      	strh	r3, [r5, #0]
    1794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1798:	20000d4e 	.word	0x20000d4e
    179c:	20000d38 	.word	0x20000d38
    17a0:	20000e86 	.word	0x20000e86
    17a4:	20000d4f 	.word	0x20000d4f
    17a8:	20000ea0 	.word	0x20000ea0
    17ac:	20201060 	.word	0x20201060
    17b0:	e000ef70 	.word	0xe000ef70

000017b4 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    17b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17b8:	b085      	sub	sp, #20
    17ba:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    17bc:	9101      	str	r1, [sp, #4]
    17be:	2900      	cmp	r1, #0
    17c0:	f000 80a2 	beq.w	1908 <usb_serial_write.part.1+0x154>
    17c4:	2300      	movs	r3, #0
    17c6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1924 <usb_serial_write.part.1+0x170>
    17ca:	f8df 914c 	ldr.w	r9, [pc, #332]	; 1918 <usb_serial_write.part.1+0x164>
    17ce:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    17d0:	4e4e      	ldr	r6, [pc, #312]	; (190c <usb_serial_write.part.1+0x158>)
    17d2:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    17d6:	f8df a150 	ldr.w	sl, [pc, #336]	; 1928 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    17da:	f8df b150 	ldr.w	fp, [pc, #336]	; 192c <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    17de:	4a4c      	ldr	r2, [pc, #304]	; (1910 <usb_serial_write.part.1+0x15c>)
    17e0:	7814      	ldrb	r4, [r2, #0]
    17e2:	4a4c      	ldr	r2, [pc, #304]	; (1914 <usb_serial_write.part.1+0x160>)
    17e4:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    17e8:	2b00      	cmp	r3, #0
    17ea:	d16e      	bne.n	18ca <usb_serial_write.part.1+0x116>
    17ec:	461d      	mov	r5, r3
    17ee:	461c      	mov	r4, r3
    17f0:	e014      	b.n	181c <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    17f2:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    17f6:	b904      	cbnz	r4, 17fa <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    17f8:	6835      	ldr	r5, [r6, #0]
    17fa:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    17fc:	2b00      	cmp	r3, #0
    17fe:	d15e      	bne.n	18be <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    1800:	6833      	ldr	r3, [r6, #0]
    1802:	1b5b      	subs	r3, r3, r5
    1804:	2b78      	cmp	r3, #120	; 0x78
    1806:	d879      	bhi.n	18fc <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    1808:	f89a 3000 	ldrb.w	r3, [sl]
    180c:	2b00      	cmp	r3, #0
    180e:	d056      	beq.n	18be <usb_serial_write.part.1+0x10a>
			yield();
    1810:	f000 fb54 	bl	1ebc <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    1814:	f8b8 3000 	ldrh.w	r3, [r8]
    1818:	2b00      	cmp	r3, #0
    181a:	d154      	bne.n	18c6 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    181c:	4638      	mov	r0, r7
    181e:	f7ff febf 	bl	15a0 <usb_transfer_status>
			if (!(status & 0x80)) {
    1822:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    1826:	4a3c      	ldr	r2, [pc, #240]	; (1918 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    1828:	d1e3      	bne.n	17f2 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    182a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    182e:	4a38      	ldr	r2, [pc, #224]	; (1910 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    1830:	f889 0000 	strb.w	r0, [r9]
    1834:	7814      	ldrb	r4, [r2, #0]
    1836:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    1838:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    183c:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    183e:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1840:	4936      	ldr	r1, [pc, #216]	; (191c <usb_serial_write.part.1+0x168>)
    1842:	4420      	add	r0, r4
		if (size >= tx_available) {
    1844:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1846:	4408      	add	r0, r1
		if (size >= tx_available) {
    1848:	d343      	bcc.n	18d2 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    184a:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    184c:	9902      	ldr	r1, [sp, #8]
    184e:	f000 fbad 	bl	1fac <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    1852:	2300      	movs	r3, #0
    1854:	4621      	mov	r1, r4
    1856:	f44f 6200 	mov.w	r2, #2048	; 0x800
    185a:	4638      	mov	r0, r7
    185c:	f7ff fe62 	bl	1524 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1860:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1864:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    1868:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    186c:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    1870:	3320      	adds	r3, #32
	} while (location < end_addr);
    1872:	429c      	cmp	r4, r3
    1874:	d8fa      	bhi.n	186c <usb_serial_write.part.1+0xb8>
	asm("dsb");
    1876:	f3bf 8f4f 	dsb	sy
	asm("isb");
    187a:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    187e:	2004      	movs	r0, #4
    1880:	4639      	mov	r1, r7
    1882:	f7ff fe67 	bl	1554 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    1886:	4b22      	ldr	r3, [pc, #136]	; (1910 <usb_serial_write.part.1+0x15c>)
    1888:	4a21      	ldr	r2, [pc, #132]	; (1910 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    188a:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    188c:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    188e:	4824      	ldr	r0, [pc, #144]	; (1920 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    1890:	3301      	adds	r3, #1
    1892:	b2db      	uxtb	r3, r3
    1894:	2b03      	cmp	r3, #3
    1896:	bf88      	it	hi
    1898:	2300      	movhi	r3, #0
    189a:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    189c:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    18a0:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    18a2:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    18a6:	4413      	add	r3, r2
    18a8:	9300      	str	r3, [sp, #0]
			data += tx_available;
    18aa:	9b02      	ldr	r3, [sp, #8]
    18ac:	4413      	add	r3, r2
    18ae:	9302      	str	r3, [sp, #8]
    18b0:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    18b2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    18b6:	9901      	ldr	r1, [sp, #4]
    18b8:	1a8a      	subs	r2, r1, r2
    18ba:	9201      	str	r2, [sp, #4]
    18bc:	d18f      	bne.n	17de <usb_serial_write.part.1+0x2a>
    18be:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    18c0:	b005      	add	sp, #20
    18c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18c6:	4a12      	ldr	r2, [pc, #72]	; (1910 <usb_serial_write.part.1+0x15c>)
    18c8:	7814      	ldrb	r4, [r2, #0]
    18ca:	461a      	mov	r2, r3
    18cc:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    18d0:	e7b4      	b.n	183c <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    18d2:	9c01      	ldr	r4, [sp, #4]
    18d4:	9902      	ldr	r1, [sp, #8]
    18d6:	4622      	mov	r2, r4
    18d8:	9303      	str	r3, [sp, #12]
    18da:	f000 fb67 	bl	1fac <memcpy>
			tx_available -= size;
    18de:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    18e0:	4a0f      	ldr	r2, [pc, #60]	; (1920 <usb_serial_write.part.1+0x16c>)
    18e2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    18e6:	1b1b      	subs	r3, r3, r4
    18e8:	f8a8 3000 	strh.w	r3, [r8]
    18ec:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    18ee:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    18f2:	4618      	mov	r0, r3
    18f4:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    18f6:	b005      	add	sp, #20
    18f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    18fc:	2301      	movs	r3, #1
				return sent;
    18fe:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    1900:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1902:	b005      	add	sp, #20
    1904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1908:	9801      	ldr	r0, [sp, #4]
    190a:	e7d9      	b.n	18c0 <usb_serial_write.part.1+0x10c>
    190c:	20000cec 	.word	0x20000cec
    1910:	20000d4f 	.word	0x20000d4f
    1914:	20000ea0 	.word	0x20000ea0
    1918:	20000e85 	.word	0x20000e85
    191c:	20201060 	.word	0x20201060
    1920:	402e0000 	.word	0x402e0000
    1924:	20000e86 	.word	0x20000e86
    1928:	20000d38 	.word	0x20000d38
    192c:	e000ef70 	.word	0xe000ef70

00001930 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    1930:	4770      	bx	lr
    1932:	bf00      	nop

00001934 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1934:	4b31      	ldr	r3, [pc, #196]	; (19fc <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    1936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    193a:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    193c:	4f30      	ldr	r7, [pc, #192]	; (1a00 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    193e:	2b00      	cmp	r3, #0
    1940:	d054      	beq.n	19ec <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    1942:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    1946:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1a34 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    194a:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    194c:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1950:	2100      	movs	r1, #0
    1952:	2280      	movs	r2, #128	; 0x80
    1954:	482b      	ldr	r0, [pc, #172]	; (1a04 <usb_serial_configure+0xd0>)
	tx_head = 0;
    1956:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1958:	4e2b      	ldr	r6, [pc, #172]	; (1a08 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    195a:	f001 f83b 	bl	29d4 <memset>
	tx_head = 0;
    195e:	4c2b      	ldr	r4, [pc, #172]	; (1a0c <usb_serial_configure+0xd8>)
	tx_available = 0;
    1960:	4b2b      	ldr	r3, [pc, #172]	; (1a10 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1962:	4629      	mov	r1, r5
    1964:	f44f 7280 	mov.w	r2, #256	; 0x100
    1968:	482a      	ldr	r0, [pc, #168]	; (1a14 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    196a:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    196c:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    196e:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1970:	f001 f830 	bl	29d4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1974:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1976:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1978:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    197a:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    197c:	60b5      	str	r5, [r6, #8]
    197e:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1980:	4925      	ldr	r1, [pc, #148]	; (1a18 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1982:	4e26      	ldr	r6, [pc, #152]	; (1a1c <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    1984:	4826      	ldr	r0, [pc, #152]	; (1a20 <usb_serial_configure+0xec>)
	rx_available = 0;
    1986:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 1a38 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    198a:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    198c:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    198e:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1990:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1992:	6035      	str	r5, [r6, #0]
    1994:	6075      	str	r5, [r6, #4]
    1996:	60b5      	str	r5, [r6, #8]
    1998:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    199a:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    199e:	f7ff fd8d 	bl	14bc <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    19a2:	f8b8 1000 	ldrh.w	r1, [r8]
    19a6:	462a      	mov	r2, r5
    19a8:	4b1e      	ldr	r3, [pc, #120]	; (1a24 <usb_serial_configure+0xf0>)
    19aa:	2003      	movs	r0, #3
    19ac:	f7ff fd54 	bl	1458 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    19b0:	462b      	mov	r3, r5
    19b2:	8839      	ldrh	r1, [r7, #0]
    19b4:	2201      	movs	r2, #1
    19b6:	2004      	movs	r0, #4
    19b8:	f7ff fd80 	bl	14bc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    19bc:	4620      	mov	r0, r4
    19be:	3401      	adds	r4, #1
    19c0:	f7ff fe1c 	bl	15fc <rx_queue_transfer>
    19c4:	2c08      	cmp	r4, #8
    19c6:	d1f9      	bne.n	19bc <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    19c8:	4b17      	ldr	r3, [pc, #92]	; (1a28 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    19ca:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    19cc:	4817      	ldr	r0, [pc, #92]	; (1a2c <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    19ce:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    19d0:	4c17      	ldr	r4, [pc, #92]	; (1a30 <usb_serial_configure+0xfc>)
    19d2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    19d4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    19d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    19dc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    19e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    19e4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    19e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    19ec:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    19ee:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1a34 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    19f2:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    19f4:	f8a8 3000 	strh.w	r3, [r8]
    19f8:	e7aa      	b.n	1950 <usb_serial_configure+0x1c>
    19fa:	bf00      	nop
    19fc:	20000d10 	.word	0x20000d10
    1a00:	20000d4c 	.word	0x20000d4c
    1a04:	20000ea0 	.word	0x20000ea0
    1a08:	20000e70 	.word	0x20000e70
    1a0c:	20000d4f 	.word	0x20000d4f
    1a10:	20000e86 	.word	0x20000e86
    1a14:	20000d60 	.word	0x20000d60
    1a18:	20000e84 	.word	0x20000e84
    1a1c:	20000d3c 	.word	0x20000d3c
    1a20:	20000e60 	.word	0x20000e60
    1a24:	00001669 	.word	0x00001669
    1a28:	402e0000 	.word	0x402e0000
    1a2c:	20000d00 	.word	0x20000d00
    1a30:	0000171d 	.word	0x0000171d
    1a34:	20000e6e 	.word	0x20000e6e
    1a38:	20000e80 	.word	0x20000e80

00001a3c <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1a3c:	4b31      	ldr	r3, [pc, #196]	; (1b04 <usb_serial_read+0xc8>)
    1a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1a42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1a46:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1a48:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1a4a:	4b2f      	ldr	r3, [pc, #188]	; (1b08 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1a4c:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1a4e:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1a50:	2900      	cmp	r1, #0
    1a52:	d053      	beq.n	1afc <usb_serial_read+0xc0>
    1a54:	4b2d      	ldr	r3, [pc, #180]	; (1b0c <usb_serial_read+0xd0>)
    1a56:	b2e4      	uxtb	r4, r4
    1a58:	781b      	ldrb	r3, [r3, #0]
    1a5a:	429c      	cmp	r4, r3
    1a5c:	d050      	beq.n	1b00 <usb_serial_read+0xc4>
    1a5e:	4682      	mov	sl, r0
    1a60:	2700      	movs	r7, #0
    1a62:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 1b24 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    1a66:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1a68:	4b29      	ldr	r3, [pc, #164]	; (1b10 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    1a6a:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1a6e:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1a70:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1a72:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    1a74:	4b27      	ldr	r3, [pc, #156]	; (1b14 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1a76:	bf28      	it	cs
    1a78:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    1a7a:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1a7c:	4b24      	ldr	r3, [pc, #144]	; (1b10 <usb_serial_read+0xd4>)
    1a7e:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    1a82:	4b25      	ldr	r3, [pc, #148]	; (1b18 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1a84:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1a88:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1a8c:	4b23      	ldr	r3, [pc, #140]	; (1b1c <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1a8e:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1a92:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    1a94:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1a96:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    1a98:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    1a9a:	d219      	bcs.n	1ad0 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1a9c:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    1aa0:	4642      	mov	r2, r8
    1aa2:	4419      	add	r1, r3
    1aa4:	f000 fa82 	bl	1fac <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    1aa8:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1aaa:	f8db 1000 	ldr.w	r1, [fp]
    1aae:	4648      	mov	r0, r9
			rx_index[i] += len;
    1ab0:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1ab4:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    1ab8:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1aba:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    1abe:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1ac2:	4b17      	ldr	r3, [pc, #92]	; (1b20 <usb_serial_read+0xe4>)
    1ac4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1ac8:	601a      	str	r2, [r3, #0]
	return count;
}
    1aca:	b003      	add	sp, #12
    1acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1ad0:	f000 fa6c 	bl	1fac <memcpy>
			p += avail;
			rx_available -= avail;
    1ad4:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1ad8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    1ada:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    1adc:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    1ade:	44b2      	add	sl, r6
			rx_available -= avail;
    1ae0:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1ae4:	4a08      	ldr	r2, [pc, #32]	; (1b08 <usb_serial_read+0xcc>)
    1ae6:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    1ae8:	f7ff fd88 	bl	15fc <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1aec:	45b9      	cmp	r9, r7
    1aee:	d903      	bls.n	1af8 <usb_serial_read+0xbc>
    1af0:	4b06      	ldr	r3, [pc, #24]	; (1b0c <usb_serial_read+0xd0>)
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	429c      	cmp	r4, r3
    1af6:	d1b6      	bne.n	1a66 <usb_serial_read+0x2a>
    1af8:	4638      	mov	r0, r7
    1afa:	e7e2      	b.n	1ac2 <usb_serial_read+0x86>
    1afc:	4608      	mov	r0, r1
    1afe:	e7e0      	b.n	1ac2 <usb_serial_read+0x86>
    1b00:	2000      	movs	r0, #0
    1b02:	e7de      	b.n	1ac2 <usb_serial_read+0x86>
    1b04:	e000e18c 	.word	0xe000e18c
    1b08:	20000e60 	.word	0x20000e60
    1b0c:	20000e84 	.word	0x20000e84
    1b10:	20000d3c 	.word	0x20000d3c
    1b14:	20000e64 	.word	0x20000e64
    1b18:	20000e70 	.word	0x20000e70
    1b1c:	20200060 	.word	0x20200060
    1b20:	e000e10c 	.word	0xe000e10c
    1b24:	20000e80 	.word	0x20000e80

00001b28 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1b28:	4b0b      	ldr	r3, [pc, #44]	; (1b58 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    1b2a:	4a0c      	ldr	r2, [pc, #48]	; (1b5c <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1b2c:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    1b2e:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1b30:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    1b32:	4293      	cmp	r3, r2
    1b34:	d00d      	beq.n	1b52 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1b36:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1b38:	4809      	ldr	r0, [pc, #36]	; (1b60 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1b3a:	4a0a      	ldr	r2, [pc, #40]	; (1b64 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1b3c:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1b3e:	490a      	ldr	r1, [pc, #40]	; (1b68 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1b40:	bf28      	it	cs
    1b42:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1b44:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1b46:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    1b4a:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    1b4e:	5c58      	ldrb	r0, [r3, r1]
    1b50:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    1b52:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    1b56:	4770      	bx	lr
    1b58:	20000e60 	.word	0x20000e60
    1b5c:	20000e84 	.word	0x20000e84
    1b60:	20000e64 	.word	0x20000e64
    1b64:	20200060 	.word	0x20200060
    1b68:	20000d3c 	.word	0x20000d3c

00001b6c <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    1b6c:	4b01      	ldr	r3, [pc, #4]	; (1b74 <usb_serial_available+0x8>)
    1b6e:	6818      	ldr	r0, [r3, #0]
}
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop
    1b74:	20000e80 	.word	0x20000e80

00001b78 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    1b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    1b7c:	4e15      	ldr	r6, [pc, #84]	; (1bd4 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    1b7e:	4d16      	ldr	r5, [pc, #88]	; (1bd8 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1b80:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    1b82:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1b84:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    1b86:	429c      	cmp	r4, r3
    1b88:	d021      	beq.n	1bce <usb_serial_flush_input+0x56>
    1b8a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1be0 <usb_serial_flush_input+0x68>
    1b8e:	f8df b054 	ldr.w	fp, [pc, #84]	; 1be4 <usb_serial_flush_input+0x6c>
    1b92:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1be8 <usb_serial_flush_input+0x70>
    1b96:	4f11      	ldr	r7, [pc, #68]	; (1bdc <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    1b98:	3401      	adds	r4, #1
    1b9a:	2c08      	cmp	r4, #8
    1b9c:	fa5f fa84 	uxtb.w	sl, r4
    1ba0:	d901      	bls.n	1ba6 <usb_serial_flush_input+0x2e>
    1ba2:	2400      	movs	r4, #0
    1ba4:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    1ba6:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    1baa:	f8db 2000 	ldr.w	r2, [fp]
    1bae:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    1bb2:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    1bb4:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    1bb8:	1a5b      	subs	r3, r3, r1
    1bba:	1ad3      	subs	r3, r2, r3
    1bbc:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    1bc0:	f7ff fd1c 	bl	15fc <rx_queue_transfer>
		rx_tail = tail;
    1bc4:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    1bc8:	782b      	ldrb	r3, [r5, #0]
    1bca:	429c      	cmp	r4, r3
    1bcc:	d1e4      	bne.n	1b98 <usb_serial_flush_input+0x20>
    1bce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bd2:	bf00      	nop
    1bd4:	20000e60 	.word	0x20000e60
    1bd8:	20000e84 	.word	0x20000e84
    1bdc:	20000d3c 	.word	0x20000d3c
    1be0:	20000e64 	.word	0x20000e64
    1be4:	20000e80 	.word	0x20000e80
    1be8:	20000e70 	.word	0x20000e70

00001bec <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1bec:	b500      	push	{lr}
    1bee:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    1bf0:	2101      	movs	r1, #1
    1bf2:	f10d 0007 	add.w	r0, sp, #7
    1bf6:	f7ff ff21 	bl	1a3c <usb_serial_read>
    1bfa:	b120      	cbz	r0, 1c06 <usb_serial_getchar+0x1a>
    1bfc:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    1c00:	b003      	add	sp, #12
    1c02:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    1c06:	f04f 30ff 	mov.w	r0, #4294967295
    1c0a:	e7f9      	b.n	1c00 <usb_serial_getchar+0x14>

00001c0c <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1c0c:	4b09      	ldr	r3, [pc, #36]	; (1c34 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1c0e:	b500      	push	{lr}
    1c10:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1c12:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1c14:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1c18:	b923      	cbnz	r3, 1c24 <usb_serial_putchar+0x18>
    1c1a:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    1c1e:	b003      	add	sp, #12
    1c20:	f85d fb04 	ldr.w	pc, [sp], #4
    1c24:	2101      	movs	r1, #1
    1c26:	f10d 0007 	add.w	r0, sp, #7
    1c2a:	f7ff fdc3 	bl	17b4 <usb_serial_write.part.1>
    1c2e:	b003      	add	sp, #12
    1c30:	f85d fb04 	ldr.w	pc, [sp], #4
    1c34:	20000d38 	.word	0x20000d38

00001c38 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1c38:	4b04      	ldr	r3, [pc, #16]	; (1c4c <usb_serial_write+0x14>)
    1c3a:	781b      	ldrb	r3, [r3, #0]
    1c3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1c40:	b10b      	cbz	r3, 1c46 <usb_serial_write+0xe>
    1c42:	f7ff bdb7 	b.w	17b4 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1c46:	4610      	mov	r0, r2
    1c48:	4770      	bx	lr
    1c4a:	bf00      	nop
    1c4c:	20000d38 	.word	0x20000d38

00001c50 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    1c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1c54:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    1c56:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1c98 <usb_serial_write_buffer_free+0x48>
    1c5a:	2301      	movs	r3, #1
    1c5c:	4d0c      	ldr	r5, [pc, #48]	; (1c90 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    1c5e:	4627      	mov	r7, r4
    1c60:	4e0c      	ldr	r6, [pc, #48]	; (1c94 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    1c62:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1c66:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1c68:	4628      	mov	r0, r5
    1c6a:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1c6c:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1c6e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    1c72:	d005      	beq.n	1c80 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1c74:	f7ff fc94 	bl	15a0 <usb_transfer_status>
    1c78:	0603      	lsls	r3, r0, #24
    1c7a:	bf58      	it	pl
    1c7c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1c80:	2c04      	cmp	r4, #4
    1c82:	d1f0      	bne.n	1c66 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1c84:	2300      	movs	r3, #0
	return sum;
}
    1c86:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1c88:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    1c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c90:	20000ea0 	.word	0x20000ea0
    1c94:	20000d4f 	.word	0x20000d4f
    1c98:	20000d4e 	.word	0x20000d4e

00001c9c <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    1c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    1ca0:	4b1f      	ldr	r3, [pc, #124]	; (1d20 <usb_serial_flush_output+0x84>)
    1ca2:	781b      	ldrb	r3, [r3, #0]
    1ca4:	b113      	cbz	r3, 1cac <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    1ca6:	4d1f      	ldr	r5, [pc, #124]	; (1d24 <usb_serial_flush_output+0x88>)
    1ca8:	882a      	ldrh	r2, [r5, #0]
    1caa:	b90a      	cbnz	r2, 1cb0 <usb_serial_flush_output+0x14>
    1cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1cb0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1d38 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1cb4:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1cb8:	4e1b      	ldr	r6, [pc, #108]	; (1d28 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1cba:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    1cbe:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1cc2:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1cc4:	4c19      	ldr	r4, [pc, #100]	; (1d2c <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1cc6:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1cc8:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1ccc:	4f18      	ldr	r7, [pc, #96]	; (1d30 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1cce:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1cd2:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1cd4:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1cd8:	4621      	mov	r1, r4
    1cda:	f7ff fc23 	bl	1524 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1cde:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1ce2:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1ce6:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1cea:	4b12      	ldr	r3, [pc, #72]	; (1d34 <usb_serial_flush_output+0x98>)
    1cec:	6019      	str	r1, [r3, #0]
		location += 32;
    1cee:	3120      	adds	r1, #32
	} while (location < end_addr);
    1cf0:	428a      	cmp	r2, r1
    1cf2:	d8fb      	bhi.n	1cec <usb_serial_flush_output+0x50>
	asm("dsb");
    1cf4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1cf8:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1cfc:	2004      	movs	r0, #4
    1cfe:	4631      	mov	r1, r6
    1d00:	f7ff fc28 	bl	1554 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1d04:	f898 3000 	ldrb.w	r3, [r8]
    1d08:	4a0b      	ldr	r2, [pc, #44]	; (1d38 <usb_serial_flush_output+0x9c>)
    1d0a:	3301      	adds	r3, #1
    1d0c:	b2db      	uxtb	r3, r3
    1d0e:	2b03      	cmp	r3, #3
    1d10:	bf88      	it	hi
    1d12:	2300      	movhi	r3, #0
    1d14:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    1d16:	2300      	movs	r3, #0
    1d18:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    1d1a:	703b      	strb	r3, [r7, #0]
    1d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d20:	20000d38 	.word	0x20000d38
    1d24:	20000e86 	.word	0x20000e86
    1d28:	20000ea0 	.word	0x20000ea0
    1d2c:	20201060 	.word	0x20201060
    1d30:	20000d4e 	.word	0x20000d4e
    1d34:	e000ef70 	.word	0xe000ef70
    1d38:	20000d4f 	.word	0x20000d4f

00001d3c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1d3c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1d3e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1d42:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1d44:	4c0c      	ldr	r4, [pc, #48]	; (1d78 <EventResponder::runFromInterrupt()+0x3c>)
    1d46:	6823      	ldr	r3, [r4, #0]
		if (first) {
    1d48:	b18b      	cbz	r3, 1d6e <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1d4a:	4e0c      	ldr	r6, [pc, #48]	; (1d7c <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1d4c:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1d4e:	695a      	ldr	r2, [r3, #20]
    1d50:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    1d52:	b17a      	cbz	r2, 1d74 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    1d54:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1d56:	b901      	cbnz	r1, 1d5a <EventResponder::runFromInterrupt()+0x1e>
    1d58:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    1d5a:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    1d5c:	4618      	mov	r0, r3
    1d5e:	689b      	ldr	r3, [r3, #8]
    1d60:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1d62:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1d66:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1d68:	6823      	ldr	r3, [r4, #0]
		if (first) {
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d1ef      	bne.n	1d4e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1d6e:	b901      	cbnz	r1, 1d72 <EventResponder::runFromInterrupt()+0x36>
    1d70:	b662      	cpsie	i
    1d72:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1d74:	6032      	str	r2, [r6, #0]
    1d76:	e7ee      	b.n	1d56 <EventResponder::runFromInterrupt()+0x1a>
    1d78:	20000f20 	.word	0x20000f20
    1d7c:	20000f24 	.word	0x20000f24

00001d80 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    1d80:	f7ff bfdc 	b.w	1d3c <EventResponder::runFromInterrupt()>

00001d84 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1d84:	4a04      	ldr	r2, [pc, #16]	; (1d98 <systick_isr+0x14>)
    1d86:	4b05      	ldr	r3, [pc, #20]	; (1d9c <systick_isr+0x18>)
    1d88:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    1d8a:	4a05      	ldr	r2, [pc, #20]	; (1da0 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1d8c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    1d8e:	6813      	ldr	r3, [r2, #0]
    1d90:	3301      	adds	r3, #1
    1d92:	6013      	str	r3, [r2, #0]
    1d94:	4770      	bx	lr
    1d96:	bf00      	nop
    1d98:	e0001004 	.word	0xe0001004
    1d9c:	20000ce4 	.word	0x20000ce4
    1da0:	20000cec 	.word	0x20000cec

00001da4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    1da4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    1da6:	f7fe f969 	bl	7c <setup>
	while (1) {
		loop();
    1daa:	f7fe f97b 	bl	a4 <loop>
		yield();
    1dae:	f000 f885 	bl	1ebc <yield>
    1db2:	e7fa      	b.n	1daa <main+0x6>

00001db4 <operator new[](unsigned int)>:
	return malloc(size);
}

void * operator new[](size_t size)
{
	return malloc(size);
    1db4:	f000 bb4e 	b.w	2454 <malloc>

00001db8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    1db8:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    1dba:	4c06      	ldr	r4, [pc, #24]	; (1dd4 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    1dbc:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    1dbe:	6803      	ldr	r3, [r0, #0]
    1dc0:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1dc2:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    1dc4:	a901      	add	r1, sp, #4
    1dc6:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    1dc8:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    1dcc:	4798      	blx	r3
}
    1dce:	b002      	add	sp, #8
    1dd0:	bd10      	pop	{r4, pc}
    1dd2:	bf00      	nop
    1dd4:	200003dc 	.word	0x200003dc

00001dd8 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    1dd8:	b570      	push	{r4, r5, r6, lr}
    1dda:	4d0a      	ldr	r5, [pc, #40]	; (1e04 <Stream::timedPeek()+0x2c>)
    1ddc:	4604      	mov	r4, r0
    1dde:	682e      	ldr	r6, [r5, #0]
    1de0:	e006      	b.n	1df0 <Stream::timedPeek()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    1de2:	f000 f86b 	bl	1ebc <yield>
    1de6:	682b      	ldr	r3, [r5, #0]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    1de8:	68a2      	ldr	r2, [r4, #8]
    1dea:	1b9b      	subs	r3, r3, r6
    1dec:	4293      	cmp	r3, r2
    1dee:	d206      	bcs.n	1dfe <Stream::timedPeek()+0x26>
    c = peek();
    1df0:	6823      	ldr	r3, [r4, #0]
    1df2:	4620      	mov	r0, r4
    1df4:	699b      	ldr	r3, [r3, #24]
    1df6:	4798      	blx	r3
    if (c >= 0) return c;
    1df8:	2800      	cmp	r0, #0
    1dfa:	dbf2      	blt.n	1de2 <Stream::timedPeek()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    1dfc:	bd70      	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    1dfe:	f04f 30ff 	mov.w	r0, #4294967295
}
    1e02:	bd70      	pop	{r4, r5, r6, pc}
    1e04:	20000cec 	.word	0x20000cec

00001e08 <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    1e08:	b510      	push	{r4, lr}
    1e0a:	4604      	mov	r4, r0
    1e0c:	e006      	b.n	1e1c <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    1e0e:	2b2d      	cmp	r3, #45	; 0x2d
    1e10:	d00c      	beq.n	1e2c <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    1e12:	2a09      	cmp	r2, #9
    1e14:	d90a      	bls.n	1e2c <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    1e16:	6823      	ldr	r3, [r4, #0]
    1e18:	695b      	ldr	r3, [r3, #20]
    1e1a:	4798      	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    1e1c:	4620      	mov	r0, r4
    1e1e:	f7ff ffdb 	bl	1dd8 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    1e22:	1e03      	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
    1e24:	4620      	mov	r0, r4
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    1e26:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    1e2a:	daf0      	bge.n	1e0e <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    1e2c:	4618      	mov	r0, r3
    1e2e:	bd10      	pop	{r4, pc}

00001e30 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    1e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e32:	460d      	mov	r5, r1
    1e34:	4604      	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    1e36:	f7ff ffe7 	bl	1e08 <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    1e3a:	2800      	cmp	r0, #0
    1e3c:	db23      	blt.n	1e86 <Stream::parseInt(char)+0x56>
    1e3e:	2600      	movs	r6, #0
    1e40:	4637      	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    1e42:	42a8      	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    1e44:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    1e48:	d009      	beq.n	1e5e <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    1e4a:	282d      	cmp	r0, #45	; 0x2d
    1e4c:	d017      	beq.n	1e7e <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    1e4e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    1e52:	2a09      	cmp	r2, #9
      value = value * 10 + c - '0';
    1e54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    1e58:	d801      	bhi.n	1e5e <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    1e5a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    1e5e:	6823      	ldr	r3, [r4, #0]
    1e60:	4620      	mov	r0, r4
    1e62:	695b      	ldr	r3, [r3, #20]
    1e64:	4798      	blx	r3
    c = timedPeek();
    1e66:	4620      	mov	r0, r4
    1e68:	f7ff ffb6 	bl	1dd8 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    1e6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1e70:	2b09      	cmp	r3, #9
    1e72:	d9e6      	bls.n	1e42 <Stream::parseInt(char)+0x12>
    1e74:	42a8      	cmp	r0, r5
    1e76:	d0e4      	beq.n	1e42 <Stream::parseInt(char)+0x12>

  if(isNegative)
    1e78:	b11f      	cbz	r7, 1e82 <Stream::parseInt(char)+0x52>
    value = -value;
    1e7a:	4270      	negs	r0, r6
    1e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    1e7e:	2701      	movs	r7, #1
    1e80:	e7ed      	b.n	1e5e <Stream::parseInt(char)+0x2e>
    1e82:	4630      	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    1e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    1e86:	2000      	movs	r0, #0
    1e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e8a:	bf00      	nop

00001e8c <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    1e8c:	2101      	movs	r1, #1
    1e8e:	f7ff bfcf 	b.w	1e30 <Stream::parseInt(char)>
    1e92:	bf00      	nop

00001e94 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    1e94:	f7ff be70 	b.w	1b78 <usb_serial_flush_input>

00001e98 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    1e98:	f7ff be46 	b.w	1b28 <usb_serial_peekchar>

00001e9c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    1e9c:	f7ff bea6 	b.w	1bec <usb_serial_getchar>

00001ea0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1ea0:	f7ff be64 	b.w	1b6c <usb_serial_available>

00001ea4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    1ea4:	f7ff befa 	b.w	1c9c <usb_serial_flush_output>

00001ea8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    1ea8:	f7ff bed2 	b.w	1c50 <usb_serial_write_buffer_free>

00001eac <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1eac:	4608      	mov	r0, r1
    1eae:	4611      	mov	r1, r2
    1eb0:	f7ff bec2 	b.w	1c38 <usb_serial_write>

00001eb4 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1eb4:	4608      	mov	r0, r1
    1eb6:	f7ff bea9 	b.w	1c0c <usb_serial_putchar>
    1eba:	bf00      	nop

00001ebc <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    1ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    1ec0:	4e32      	ldr	r6, [pc, #200]	; (1f8c <yield+0xd0>)
    1ec2:	7833      	ldrb	r3, [r6, #0]
    1ec4:	b193      	cbz	r3, 1eec <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    1ec6:	4f32      	ldr	r7, [pc, #200]	; (1f90 <yield+0xd4>)
    1ec8:	783a      	ldrb	r2, [r7, #0]
    1eca:	b97a      	cbnz	r2, 1eec <yield+0x30>
	running = 1;
    1ecc:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    1ece:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    1ed0:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    1ed2:	d437      	bmi.n	1f44 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    1ed4:	079a      	lsls	r2, r3, #30
    1ed6:	d419      	bmi.n	1f0c <yield+0x50>

	running = 0;
    1ed8:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    1eda:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    1edc:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    1ede:	d505      	bpl.n	1eec <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    1ee0:	4b2c      	ldr	r3, [pc, #176]	; (1f94 <yield+0xd8>)
    1ee2:	681a      	ldr	r2, [r3, #0]
    1ee4:	b112      	cbz	r2, 1eec <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1ee6:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    1eea:	b10a      	cbz	r2, 1ef0 <yield+0x34>
    1eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1ef0:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    1ef4:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    1ef6:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    1ef8:	b11a      	cbz	r2, 1f02 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    1efa:	4c27      	ldr	r4, [pc, #156]	; (1f98 <yield+0xdc>)
    1efc:	7821      	ldrb	r1, [r4, #0]
    1efe:	2900      	cmp	r1, #0
    1f00:	d02f      	beq.n	1f62 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1f02:	2800      	cmp	r0, #0
    1f04:	d1f2      	bne.n	1eec <yield+0x30>
    1f06:	b662      	cpsie	i
    1f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1f0c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1fa4 <yield+0xe8>
    1f10:	f898 2000 	ldrb.w	r2, [r8]
    1f14:	2a00      	cmp	r2, #0
    1f16:	d0df      	beq.n	1ed8 <yield+0x1c>
    1f18:	2400      	movs	r4, #0
    1f1a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1fa8 <yield+0xec>
    1f1e:	e005      	b.n	1f2c <yield+0x70>
    1f20:	3401      	adds	r4, #1
    1f22:	f898 3000 	ldrb.w	r3, [r8]
    1f26:	b2e4      	uxtb	r4, r4
    1f28:	42a3      	cmp	r3, r4
    1f2a:	d913      	bls.n	1f54 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    1f2c:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    1f30:	682b      	ldr	r3, [r5, #0]
    1f32:	4628      	mov	r0, r5
    1f34:	691b      	ldr	r3, [r3, #16]
    1f36:	4798      	blx	r3
    1f38:	2800      	cmp	r0, #0
    1f3a:	d0f1      	beq.n	1f20 <yield+0x64>
    1f3c:	696b      	ldr	r3, [r5, #20]
    1f3e:	689b      	ldr	r3, [r3, #8]
    1f40:	4798      	blx	r3
    1f42:	e7ed      	b.n	1f20 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    1f44:	f7ff fe12 	bl	1b6c <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    1f48:	b9d0      	cbnz	r0, 1f80 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    1f4a:	4b14      	ldr	r3, [pc, #80]	; (1f9c <yield+0xe0>)
    1f4c:	781b      	ldrb	r3, [r3, #0]
    1f4e:	b91b      	cbnz	r3, 1f58 <yield+0x9c>
    1f50:	7833      	ldrb	r3, [r6, #0]
    1f52:	e7bf      	b.n	1ed4 <yield+0x18>
    1f54:	7833      	ldrb	r3, [r6, #0]
    1f56:	e7bf      	b.n	1ed8 <yield+0x1c>
    1f58:	7833      	ldrb	r3, [r6, #0]
    1f5a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1f5e:	7033      	strb	r3, [r6, #0]
    1f60:	e7b8      	b.n	1ed4 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1f62:	2601      	movs	r6, #1
		firstYield = first->_next;
    1f64:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1f66:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    1f68:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    1f6a:	b165      	cbz	r5, 1f86 <yield+0xca>
			firstYield->_prev = nullptr;
    1f6c:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1f6e:	b900      	cbnz	r0, 1f72 <yield+0xb6>
    1f70:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1f72:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    1f74:	6893      	ldr	r3, [r2, #8]
    1f76:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    1f78:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    1f7a:	4798      	blx	r3
		runningFromYield = false;
    1f7c:	7025      	strb	r5, [r4, #0]
    1f7e:	e7b5      	b.n	1eec <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    1f80:	f000 fa38 	bl	23f4 <serialEvent()>
    1f84:	e7e1      	b.n	1f4a <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    1f86:	4b06      	ldr	r3, [pc, #24]	; (1fa0 <yield+0xe4>)
    1f88:	601d      	str	r5, [r3, #0]
    1f8a:	e7f0      	b.n	1f6e <yield+0xb2>
    1f8c:	2000044c 	.word	0x2000044c
    1f90:	20000f31 	.word	0x20000f31
    1f94:	20000f2c 	.word	0x20000f2c
    1f98:	20000f30 	.word	0x20000f30
    1f9c:	60001726 	.word	0x60001726
    1fa0:	20000f28 	.word	0x20000f28
    1fa4:	20000f50 	.word	0x20000f50
    1fa8:	20000f34 	.word	0x20000f34

00001fac <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1fac:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1fae:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1fb2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1fb6:	d16d      	bne.n	2094 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1fb8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1fba:	d341      	bcc.n	2040 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1fbc:	f851 3b04 	ldr.w	r3, [r1], #4
    1fc0:	f840 3b04 	str.w	r3, [r0], #4
    1fc4:	f851 3b04 	ldr.w	r3, [r1], #4
    1fc8:	f840 3b04 	str.w	r3, [r0], #4
    1fcc:	f851 3b04 	ldr.w	r3, [r1], #4
    1fd0:	f840 3b04 	str.w	r3, [r0], #4
    1fd4:	f851 3b04 	ldr.w	r3, [r1], #4
    1fd8:	f840 3b04 	str.w	r3, [r0], #4
    1fdc:	f851 3b04 	ldr.w	r3, [r1], #4
    1fe0:	f840 3b04 	str.w	r3, [r0], #4
    1fe4:	f851 3b04 	ldr.w	r3, [r1], #4
    1fe8:	f840 3b04 	str.w	r3, [r0], #4
    1fec:	f851 3b04 	ldr.w	r3, [r1], #4
    1ff0:	f840 3b04 	str.w	r3, [r0], #4
    1ff4:	f851 3b04 	ldr.w	r3, [r1], #4
    1ff8:	f840 3b04 	str.w	r3, [r0], #4
    1ffc:	f851 3b04 	ldr.w	r3, [r1], #4
    2000:	f840 3b04 	str.w	r3, [r0], #4
    2004:	f851 3b04 	ldr.w	r3, [r1], #4
    2008:	f840 3b04 	str.w	r3, [r0], #4
    200c:	f851 3b04 	ldr.w	r3, [r1], #4
    2010:	f840 3b04 	str.w	r3, [r0], #4
    2014:	f851 3b04 	ldr.w	r3, [r1], #4
    2018:	f840 3b04 	str.w	r3, [r0], #4
    201c:	f851 3b04 	ldr.w	r3, [r1], #4
    2020:	f840 3b04 	str.w	r3, [r0], #4
    2024:	f851 3b04 	ldr.w	r3, [r1], #4
    2028:	f840 3b04 	str.w	r3, [r0], #4
    202c:	f851 3b04 	ldr.w	r3, [r1], #4
    2030:	f840 3b04 	str.w	r3, [r0], #4
    2034:	f851 3b04 	ldr.w	r3, [r1], #4
    2038:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    203c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    203e:	d2bd      	bcs.n	1fbc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2040:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2042:	d311      	bcc.n	2068 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2044:	f851 3b04 	ldr.w	r3, [r1], #4
    2048:	f840 3b04 	str.w	r3, [r0], #4
    204c:	f851 3b04 	ldr.w	r3, [r1], #4
    2050:	f840 3b04 	str.w	r3, [r0], #4
    2054:	f851 3b04 	ldr.w	r3, [r1], #4
    2058:	f840 3b04 	str.w	r3, [r0], #4
    205c:	f851 3b04 	ldr.w	r3, [r1], #4
    2060:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2064:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    2066:	d2ed      	bcs.n	2044 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    2068:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    206a:	d305      	bcc.n	2078 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    206c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2070:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    2074:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    2076:	d2f9      	bcs.n	206c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    2078:	3204      	adds	r2, #4
	beq	.Ldone
    207a:	d008      	beq.n	208e <memcpy+0xe2>

	lsls	r2, r2, #31
    207c:	07d2      	lsls	r2, r2, #31
	itt ne
    207e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2080:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2084:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2088:	d301      	bcc.n	208e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    208a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    208c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    208e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2090:	4770      	bx	lr
    2092:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2094:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    2096:	d313      	bcc.n	20c0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2098:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    209a:	d08d      	beq.n	1fb8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    209c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    20a0:	d08a      	beq.n	1fb8 <memcpy+0xc>

	rsb	r3, #4
    20a2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    20a6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    20a8:	07db      	lsls	r3, r3, #31
	itt ne
    20aa:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    20ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    20b0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    20b4:	d380      	bcc.n	1fb8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    20b6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    20ba:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    20be:	e77b      	b.n	1fb8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    20c0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    20c2:	d3d9      	bcc.n	2078 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    20c4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    20c6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    20ca:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    20ce:	d2f9      	bcs.n	20c4 <memcpy+0x118>

	ldrb	r3, [r1]
    20d0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    20d2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    20d4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    20d6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    20d8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    20da:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    20dc:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    20de:	4770      	bx	lr

000020e0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    20e0:	4a96      	ldr	r2, [pc, #600]	; (233c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    20e2:	4b97      	ldr	r3, [pc, #604]	; (2340 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    20e4:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    20e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    20ea:	4c96      	ldr	r4, [pc, #600]	; (2344 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    20ec:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    20f0:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    20f2:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    20f4:	d91c      	bls.n	2130 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    20f6:	4b94      	ldr	r3, [pc, #592]	; (2348 <set_arm_clock+0x268>)
    20f8:	4298      	cmp	r0, r3
    20fa:	f240 8115 	bls.w	2328 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    20fe:	4b93      	ldr	r3, [pc, #588]	; (234c <set_arm_clock+0x26c>)
    2100:	f240 6527 	movw	r5, #1575	; 0x627
    2104:	4f92      	ldr	r7, [pc, #584]	; (2350 <set_arm_clock+0x270>)
    2106:	4403      	add	r3, r0
    2108:	4c92      	ldr	r4, [pc, #584]	; (2354 <set_arm_clock+0x274>)
    210a:	0a1a      	lsrs	r2, r3, #8
    210c:	fba7 3202 	umull	r3, r2, r7, r2
    2110:	09d3      	lsrs	r3, r2, #7
    2112:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2116:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    211a:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    211e:	42ab      	cmp	r3, r5
    2120:	bf28      	it	cs
    2122:	462b      	movcs	r3, r5
    2124:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    2128:	fba4 3503 	umull	r3, r5, r4, r3
    212c:	08ed      	lsrs	r5, r5, #3
    212e:	e004      	b.n	213a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    2130:	4d89      	ldr	r5, [pc, #548]	; (2358 <set_arm_clock+0x278>)
    2132:	42a8      	cmp	r0, r5
    2134:	bf94      	ite	ls
    2136:	2506      	movls	r5, #6
    2138:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    213a:	4a81      	ldr	r2, [pc, #516]	; (2340 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    213c:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2140:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2144:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2146:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    214a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    214e:	d20a      	bcs.n	2166 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2150:	4b7c      	ldr	r3, [pc, #496]	; (2344 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2152:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2156:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2158:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    215a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    215c:	6813      	ldr	r3, [r2, #0]
    215e:	2b00      	cmp	r3, #0
    2160:	dafc      	bge.n	215c <set_arm_clock+0x7c>
    2162:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2166:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    216a:	d131      	bne.n	21d0 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    216c:	4c7b      	ldr	r4, [pc, #492]	; (235c <set_arm_clock+0x27c>)
    216e:	4a7c      	ldr	r2, [pc, #496]	; (2360 <set_arm_clock+0x280>)
    2170:	f8d4 c010 	ldr.w	ip, [r4, #16]
    2174:	4614      	mov	r4, r2
    2176:	ea0c 0202 	and.w	r2, ip, r2
    217a:	42a2      	cmp	r2, r4
    217c:	bf0a      	itet	eq
    217e:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    2182:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    2186:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2188:	ea8e 0403 	eor.w	r4, lr, r3
    218c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    2190:	d008      	beq.n	21a4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    2192:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2196:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    219a:	4c69      	ldr	r4, [pc, #420]	; (2340 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    219c:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    21a0:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    21a4:	ea81 0302 	eor.w	r3, r1, r2
    21a8:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    21ac:	d008      	beq.n	21c0 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    21ae:	4b64      	ldr	r3, [pc, #400]	; (2340 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    21b0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    21b4:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    21b6:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    21b8:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    21ba:	6c93      	ldr	r3, [r2, #72]	; 0x48
    21bc:	071c      	lsls	r4, r3, #28
    21be:	d4fc      	bmi.n	21ba <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    21c0:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    21c4:	4a5e      	ldr	r2, [pc, #376]	; (2340 <set_arm_clock+0x260>)
    21c6:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    21ca:	6c93      	ldr	r3, [r2, #72]	; 0x48
    21cc:	0699      	lsls	r1, r3, #26
    21ce:	d4fc      	bmi.n	21ca <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    21d0:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    21d2:	4c64      	ldr	r4, [pc, #400]	; (2364 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    21d4:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    21d6:	fb01 f302 	mul.w	r3, r1, r2
    21da:	fb00 f303 	mul.w	r3, r0, r3
    21de:	42a3      	cmp	r3, r4
    21e0:	d809      	bhi.n	21f6 <set_arm_clock+0x116>
		if (div_arm < 8) {
    21e2:	2a07      	cmp	r2, #7
    21e4:	f200 8095 	bhi.w	2312 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    21e8:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    21ea:	fb01 f302 	mul.w	r3, r1, r2
    21ee:	fb00 f303 	mul.w	r3, r0, r3
    21f2:	42a3      	cmp	r3, r4
    21f4:	d9f5      	bls.n	21e2 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    21f6:	485c      	ldr	r0, [pc, #368]	; (2368 <set_arm_clock+0x288>)
    21f8:	4c5c      	ldr	r4, [pc, #368]	; (236c <set_arm_clock+0x28c>)
    21fa:	4418      	add	r0, r3
    21fc:	fba4 0300 	umull	r0, r3, r4, r0
    2200:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    2202:	2b6c      	cmp	r3, #108	; 0x6c
    2204:	f200 808b 	bhi.w	231e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    2208:	2b35      	cmp	r3, #53	; 0x35
    220a:	f200 808f 	bhi.w	232c <set_arm_clock+0x24c>
    220e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2398 <set_arm_clock+0x2b8>
    2212:	2336      	movs	r3, #54	; 0x36
    2214:	4856      	ldr	r0, [pc, #344]	; (2370 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2216:	f8df c144 	ldr.w	ip, [pc, #324]	; 235c <set_arm_clock+0x27c>
    221a:	4c56      	ldr	r4, [pc, #344]	; (2374 <set_arm_clock+0x294>)
    221c:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2220:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2224:	ea09 0404 	and.w	r4, r9, r4
    2228:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    222a:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    222e:	d00b      	beq.n	2248 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2234:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2238:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    223a:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    223e:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2242:	6823      	ldr	r3, [r4, #0]
    2244:	2b00      	cmp	r3, #0
    2246:	dafc      	bge.n	2242 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2248:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 2340 <set_arm_clock+0x260>
    224c:	3a01      	subs	r2, #1
    224e:	f8dc 3010 	ldr.w	r3, [ip, #16]
    2252:	f003 0307 	and.w	r3, r3, #7
    2256:	4293      	cmp	r3, r2
    2258:	d007      	beq.n	226a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    225a:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    225e:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2260:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2264:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2266:	03db      	lsls	r3, r3, #15
    2268:	d4fc      	bmi.n	2264 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    226a:	3901      	subs	r1, #1
    226c:	0289      	lsls	r1, r1, #10
    226e:	ea8e 0301 	eor.w	r3, lr, r1
    2272:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    2276:	d00c      	beq.n	2292 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    2278:	4b31      	ldr	r3, [pc, #196]	; (2340 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    227a:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    227e:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2282:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2284:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    2288:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    228c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    228e:	0799      	lsls	r1, r3, #30
    2290:	d4fc      	bmi.n	228c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2292:	4b39      	ldr	r3, [pc, #228]	; (2378 <set_arm_clock+0x298>)
    2294:	4939      	ldr	r1, [pc, #228]	; (237c <set_arm_clock+0x29c>)
    2296:	4403      	add	r3, r0
    2298:	09db      	lsrs	r3, r3, #7
    229a:	fba1 3103 	umull	r3, r1, r1, r3
    229e:	0b09      	lsrs	r1, r1, #12
    22a0:	2904      	cmp	r1, #4
    22a2:	bf28      	it	cs
    22a4:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    22a6:	1e4b      	subs	r3, r1, #1
    22a8:	021b      	lsls	r3, r3, #8
    22aa:	ea8e 0203 	eor.w	r2, lr, r3
    22ae:	f412 7f40 	tst.w	r2, #768	; 0x300
    22b2:	d007      	beq.n	22c4 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    22b4:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    22b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    22bc:	4a20      	ldr	r2, [pc, #128]	; (2340 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    22be:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    22c2:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    22c4:	4b1e      	ldr	r3, [pc, #120]	; (2340 <set_arm_clock+0x260>)
    22c6:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    22c8:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    22ca:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    22ce:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    22d0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    22d2:	069b      	lsls	r3, r3, #26
    22d4:	d4fc      	bmi.n	22d0 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    22d6:	4b2a      	ldr	r3, [pc, #168]	; (2380 <set_arm_clock+0x2a0>)
    22d8:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    22dc:	4c29      	ldr	r4, [pc, #164]	; (2384 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    22de:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    22e0:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    22e4:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    22e6:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    22ea:	4c27      	ldr	r4, [pc, #156]	; (2388 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    22ec:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    22f0:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    22f4:	4a25      	ldr	r2, [pc, #148]	; (238c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    22f6:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    22f8:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    22fa:	d208      	bcs.n	230e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    22fc:	4b11      	ldr	r3, [pc, #68]	; (2344 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    22fe:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2302:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2304:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2306:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2308:	6813      	ldr	r3, [r2, #0]
    230a:	2b00      	cmp	r3, #0
    230c:	dafc      	bge.n	2308 <set_arm_clock+0x228>
	}

	return frequency;
}
    230e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2312:	2904      	cmp	r1, #4
    2314:	f63f af6f 	bhi.w	21f6 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    2318:	3101      	adds	r1, #1
				div_arm = 1;
    231a:	2201      	movs	r2, #1
    231c:	e75b      	b.n	21d6 <set_arm_clock+0xf6>
    231e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 239c <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2322:	236c      	movs	r3, #108	; 0x6c
    2324:	481a      	ldr	r0, [pc, #104]	; (2390 <set_arm_clock+0x2b0>)
    2326:	e776      	b.n	2216 <set_arm_clock+0x136>
    2328:	2512      	movs	r5, #18
    232a:	e706      	b.n	213a <set_arm_clock+0x5a>
    232c:	4819      	ldr	r0, [pc, #100]	; (2394 <set_arm_clock+0x2b4>)
    232e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 23a0 <set_arm_clock+0x2c0>
    2332:	fb00 f003 	mul.w	r0, r0, r3
    2336:	ea43 0808 	orr.w	r8, r3, r8
    233a:	e76c      	b.n	2216 <set_arm_clock+0x136>
    233c:	1f78a400 	.word	0x1f78a400
    2340:	400fc000 	.word	0x400fc000
    2344:	40080000 	.word	0x40080000
    2348:	23c34600 	.word	0x23c34600
    234c:	dc3cba00 	.word	0xdc3cba00
    2350:	004cb223 	.word	0x004cb223
    2354:	51eb851f 	.word	0x51eb851f
    2358:	016e3600 	.word	0x016e3600
    235c:	400d8000 	.word	0x400d8000
    2360:	80003040 	.word	0x80003040
    2364:	269fb1ff 	.word	0x269fb1ff
    2368:	005b8d80 	.word	0x005b8d80
    236c:	165e9f81 	.word	0x165e9f81
    2370:	269fb200 	.word	0x269fb200
    2374:	8001307f 	.word	0x8001307f
    2378:	08f0d17f 	.word	0x08f0d17f
    237c:	00e5109f 	.word	0x00e5109f
    2380:	431bde83 	.word	0x431bde83
    2384:	20000454 	.word	0x20000454
    2388:	20000450 	.word	0x20000450
    238c:	20000ce8 	.word	0x20000ce8
    2390:	4d3f6400 	.word	0x4d3f6400
    2394:	00b71b00 	.word	0x00b71b00
    2398:	80002036 	.word	0x80002036
    239c:	8000206c 	.word	0x8000206c
    23a0:	80002000 	.word	0x80002000

000023a4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    23a4:	b4f0      	push	{r4, r5, r6, r7}
    23a6:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    23a8:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    23aa:	4637      	mov	r7, r6
    23ac:	e000      	b.n	23b0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    23ae:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    23b0:	fbb0 f3f2 	udiv	r3, r0, r2
    23b4:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    23b8:	f100 0437 	add.w	r4, r0, #55	; 0x37
    23bc:	2809      	cmp	r0, #9
    23be:	f100 0030 	add.w	r0, r0, #48	; 0x30
    23c2:	b2e4      	uxtb	r4, r4
    23c4:	bf98      	it	ls
    23c6:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    23c8:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    23ca:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    23ce:	2b00      	cmp	r3, #0
    23d0:	d1ed      	bne.n	23ae <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    23d2:	194a      	adds	r2, r1, r5
    23d4:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    23d6:	b14d      	cbz	r5, 23ec <ultoa+0x48>
    23d8:	3301      	adds	r3, #1
		t = buf[j];
    23da:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    23de:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    23e0:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    23e2:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    23e4:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    23e6:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    23ea:	dbf5      	blt.n	23d8 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    23ec:	4608      	mov	r0, r1
    23ee:	bcf0      	pop	{r4, r5, r6, r7}
    23f0:	4770      	bx	lr
    23f2:	bf00      	nop

000023f4 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    23f4:	4770      	bx	lr
    23f6:	bf00      	nop

000023f8 <__errno>:
    23f8:	4b01      	ldr	r3, [pc, #4]	; (2400 <__errno+0x8>)
    23fa:	6818      	ldr	r0, [r3, #0]
    23fc:	4770      	bx	lr
    23fe:	bf00      	nop
    2400:	20000880 	.word	0x20000880

00002404 <__libc_init_array>:
    2404:	b570      	push	{r4, r5, r6, lr}
    2406:	4e0f      	ldr	r6, [pc, #60]	; (2444 <__libc_init_array+0x40>)
    2408:	4d0f      	ldr	r5, [pc, #60]	; (2448 <__libc_init_array+0x44>)
    240a:	1b76      	subs	r6, r6, r5
    240c:	10b6      	asrs	r6, r6, #2
    240e:	bf18      	it	ne
    2410:	2400      	movne	r4, #0
    2412:	d005      	beq.n	2420 <__libc_init_array+0x1c>
    2414:	3401      	adds	r4, #1
    2416:	f855 3b04 	ldr.w	r3, [r5], #4
    241a:	4798      	blx	r3
    241c:	42a6      	cmp	r6, r4
    241e:	d1f9      	bne.n	2414 <__libc_init_array+0x10>
    2420:	4e0a      	ldr	r6, [pc, #40]	; (244c <__libc_init_array+0x48>)
    2422:	4d0b      	ldr	r5, [pc, #44]	; (2450 <__libc_init_array+0x4c>)
    2424:	1b76      	subs	r6, r6, r5
    2426:	f000 fc6f 	bl	2d08 <___init_veneer>
    242a:	10b6      	asrs	r6, r6, #2
    242c:	bf18      	it	ne
    242e:	2400      	movne	r4, #0
    2430:	d006      	beq.n	2440 <__libc_init_array+0x3c>
    2432:	3401      	adds	r4, #1
    2434:	f855 3b04 	ldr.w	r3, [r5], #4
    2438:	4798      	blx	r3
    243a:	42a6      	cmp	r6, r4
    243c:	d1f9      	bne.n	2432 <__libc_init_array+0x2e>
    243e:	bd70      	pop	{r4, r5, r6, pc}
    2440:	bd70      	pop	{r4, r5, r6, pc}
    2442:	bf00      	nop
    2444:	60001780 	.word	0x60001780
    2448:	60001780 	.word	0x60001780
    244c:	60001788 	.word	0x60001788
    2450:	60001780 	.word	0x60001780

00002454 <malloc>:
    2454:	4b02      	ldr	r3, [pc, #8]	; (2460 <malloc+0xc>)
    2456:	4601      	mov	r1, r0
    2458:	6818      	ldr	r0, [r3, #0]
    245a:	f000 b803 	b.w	2464 <_malloc_r>
    245e:	bf00      	nop
    2460:	20000880 	.word	0x20000880

00002464 <_malloc_r>:
    2464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2468:	f101 050b 	add.w	r5, r1, #11
    246c:	2d16      	cmp	r5, #22
    246e:	b083      	sub	sp, #12
    2470:	4606      	mov	r6, r0
    2472:	f240 809f 	bls.w	25b4 <_malloc_r+0x150>
    2476:	f035 0507 	bics.w	r5, r5, #7
    247a:	f100 80bf 	bmi.w	25fc <_malloc_r+0x198>
    247e:	42a9      	cmp	r1, r5
    2480:	f200 80bc 	bhi.w	25fc <_malloc_r+0x198>
    2484:	f000 faf4 	bl	2a70 <__malloc_lock>
    2488:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    248c:	f0c0 829c 	bcc.w	29c8 <_malloc_r+0x564>
    2490:	0a6b      	lsrs	r3, r5, #9
    2492:	f000 80ba 	beq.w	260a <_malloc_r+0x1a6>
    2496:	2b04      	cmp	r3, #4
    2498:	f200 8183 	bhi.w	27a2 <_malloc_r+0x33e>
    249c:	09a8      	lsrs	r0, r5, #6
    249e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    24a2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    24a6:	3038      	adds	r0, #56	; 0x38
    24a8:	4fc4      	ldr	r7, [pc, #784]	; (27bc <_malloc_r+0x358>)
    24aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    24ae:	f1a3 0108 	sub.w	r1, r3, #8
    24b2:	685c      	ldr	r4, [r3, #4]
    24b4:	42a1      	cmp	r1, r4
    24b6:	d107      	bne.n	24c8 <_malloc_r+0x64>
    24b8:	e0ac      	b.n	2614 <_malloc_r+0x1b0>
    24ba:	2a00      	cmp	r2, #0
    24bc:	f280 80ac 	bge.w	2618 <_malloc_r+0x1b4>
    24c0:	68e4      	ldr	r4, [r4, #12]
    24c2:	42a1      	cmp	r1, r4
    24c4:	f000 80a6 	beq.w	2614 <_malloc_r+0x1b0>
    24c8:	6863      	ldr	r3, [r4, #4]
    24ca:	f023 0303 	bic.w	r3, r3, #3
    24ce:	1b5a      	subs	r2, r3, r5
    24d0:	2a0f      	cmp	r2, #15
    24d2:	ddf2      	ble.n	24ba <_malloc_r+0x56>
    24d4:	49b9      	ldr	r1, [pc, #740]	; (27bc <_malloc_r+0x358>)
    24d6:	693c      	ldr	r4, [r7, #16]
    24d8:	f101 0e08 	add.w	lr, r1, #8
    24dc:	4574      	cmp	r4, lr
    24de:	f000 81b3 	beq.w	2848 <_malloc_r+0x3e4>
    24e2:	6863      	ldr	r3, [r4, #4]
    24e4:	f023 0303 	bic.w	r3, r3, #3
    24e8:	1b5a      	subs	r2, r3, r5
    24ea:	2a0f      	cmp	r2, #15
    24ec:	f300 8199 	bgt.w	2822 <_malloc_r+0x3be>
    24f0:	2a00      	cmp	r2, #0
    24f2:	f8c1 e014 	str.w	lr, [r1, #20]
    24f6:	f8c1 e010 	str.w	lr, [r1, #16]
    24fa:	f280 809e 	bge.w	263a <_malloc_r+0x1d6>
    24fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2502:	f080 8167 	bcs.w	27d4 <_malloc_r+0x370>
    2506:	08db      	lsrs	r3, r3, #3
    2508:	f103 0c01 	add.w	ip, r3, #1
    250c:	2201      	movs	r2, #1
    250e:	109b      	asrs	r3, r3, #2
    2510:	fa02 f303 	lsl.w	r3, r2, r3
    2514:	684a      	ldr	r2, [r1, #4]
    2516:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    251a:	f8c4 8008 	str.w	r8, [r4, #8]
    251e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    2522:	431a      	orrs	r2, r3
    2524:	f1a9 0308 	sub.w	r3, r9, #8
    2528:	60e3      	str	r3, [r4, #12]
    252a:	604a      	str	r2, [r1, #4]
    252c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    2530:	f8c8 400c 	str.w	r4, [r8, #12]
    2534:	1083      	asrs	r3, r0, #2
    2536:	2401      	movs	r4, #1
    2538:	409c      	lsls	r4, r3
    253a:	4294      	cmp	r4, r2
    253c:	f200 808a 	bhi.w	2654 <_malloc_r+0x1f0>
    2540:	4214      	tst	r4, r2
    2542:	d106      	bne.n	2552 <_malloc_r+0xee>
    2544:	f020 0003 	bic.w	r0, r0, #3
    2548:	0064      	lsls	r4, r4, #1
    254a:	4214      	tst	r4, r2
    254c:	f100 0004 	add.w	r0, r0, #4
    2550:	d0fa      	beq.n	2548 <_malloc_r+0xe4>
    2552:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    2556:	46cc      	mov	ip, r9
    2558:	4680      	mov	r8, r0
    255a:	f8dc 100c 	ldr.w	r1, [ip, #12]
    255e:	458c      	cmp	ip, r1
    2560:	d107      	bne.n	2572 <_malloc_r+0x10e>
    2562:	e173      	b.n	284c <_malloc_r+0x3e8>
    2564:	2a00      	cmp	r2, #0
    2566:	f280 8181 	bge.w	286c <_malloc_r+0x408>
    256a:	68c9      	ldr	r1, [r1, #12]
    256c:	458c      	cmp	ip, r1
    256e:	f000 816d 	beq.w	284c <_malloc_r+0x3e8>
    2572:	684b      	ldr	r3, [r1, #4]
    2574:	f023 0303 	bic.w	r3, r3, #3
    2578:	1b5a      	subs	r2, r3, r5
    257a:	2a0f      	cmp	r2, #15
    257c:	ddf2      	ble.n	2564 <_malloc_r+0x100>
    257e:	460c      	mov	r4, r1
    2580:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    2584:	f854 8f08 	ldr.w	r8, [r4, #8]!
    2588:	194b      	adds	r3, r1, r5
    258a:	f045 0501 	orr.w	r5, r5, #1
    258e:	604d      	str	r5, [r1, #4]
    2590:	f042 0101 	orr.w	r1, r2, #1
    2594:	f8c8 c00c 	str.w	ip, [r8, #12]
    2598:	4630      	mov	r0, r6
    259a:	f8cc 8008 	str.w	r8, [ip, #8]
    259e:	617b      	str	r3, [r7, #20]
    25a0:	613b      	str	r3, [r7, #16]
    25a2:	f8c3 e00c 	str.w	lr, [r3, #12]
    25a6:	f8c3 e008 	str.w	lr, [r3, #8]
    25aa:	6059      	str	r1, [r3, #4]
    25ac:	509a      	str	r2, [r3, r2]
    25ae:	f000 fa61 	bl	2a74 <__malloc_unlock>
    25b2:	e01f      	b.n	25f4 <_malloc_r+0x190>
    25b4:	2910      	cmp	r1, #16
    25b6:	d821      	bhi.n	25fc <_malloc_r+0x198>
    25b8:	f000 fa5a 	bl	2a70 <__malloc_lock>
    25bc:	2510      	movs	r5, #16
    25be:	2306      	movs	r3, #6
    25c0:	2002      	movs	r0, #2
    25c2:	4f7e      	ldr	r7, [pc, #504]	; (27bc <_malloc_r+0x358>)
    25c4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    25c8:	f1a3 0208 	sub.w	r2, r3, #8
    25cc:	685c      	ldr	r4, [r3, #4]
    25ce:	4294      	cmp	r4, r2
    25d0:	f000 8145 	beq.w	285e <_malloc_r+0x3fa>
    25d4:	6863      	ldr	r3, [r4, #4]
    25d6:	68e1      	ldr	r1, [r4, #12]
    25d8:	68a5      	ldr	r5, [r4, #8]
    25da:	f023 0303 	bic.w	r3, r3, #3
    25de:	4423      	add	r3, r4
    25e0:	4630      	mov	r0, r6
    25e2:	685a      	ldr	r2, [r3, #4]
    25e4:	60e9      	str	r1, [r5, #12]
    25e6:	f042 0201 	orr.w	r2, r2, #1
    25ea:	608d      	str	r5, [r1, #8]
    25ec:	605a      	str	r2, [r3, #4]
    25ee:	f000 fa41 	bl	2a74 <__malloc_unlock>
    25f2:	3408      	adds	r4, #8
    25f4:	4620      	mov	r0, r4
    25f6:	b003      	add	sp, #12
    25f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25fc:	2400      	movs	r4, #0
    25fe:	230c      	movs	r3, #12
    2600:	4620      	mov	r0, r4
    2602:	6033      	str	r3, [r6, #0]
    2604:	b003      	add	sp, #12
    2606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    260a:	2380      	movs	r3, #128	; 0x80
    260c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    2610:	203f      	movs	r0, #63	; 0x3f
    2612:	e749      	b.n	24a8 <_malloc_r+0x44>
    2614:	4670      	mov	r0, lr
    2616:	e75d      	b.n	24d4 <_malloc_r+0x70>
    2618:	4423      	add	r3, r4
    261a:	68e1      	ldr	r1, [r4, #12]
    261c:	685a      	ldr	r2, [r3, #4]
    261e:	68a5      	ldr	r5, [r4, #8]
    2620:	f042 0201 	orr.w	r2, r2, #1
    2624:	60e9      	str	r1, [r5, #12]
    2626:	4630      	mov	r0, r6
    2628:	608d      	str	r5, [r1, #8]
    262a:	605a      	str	r2, [r3, #4]
    262c:	f000 fa22 	bl	2a74 <__malloc_unlock>
    2630:	3408      	adds	r4, #8
    2632:	4620      	mov	r0, r4
    2634:	b003      	add	sp, #12
    2636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    263a:	4423      	add	r3, r4
    263c:	4630      	mov	r0, r6
    263e:	685a      	ldr	r2, [r3, #4]
    2640:	f042 0201 	orr.w	r2, r2, #1
    2644:	605a      	str	r2, [r3, #4]
    2646:	f000 fa15 	bl	2a74 <__malloc_unlock>
    264a:	3408      	adds	r4, #8
    264c:	4620      	mov	r0, r4
    264e:	b003      	add	sp, #12
    2650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2654:	68bc      	ldr	r4, [r7, #8]
    2656:	6863      	ldr	r3, [r4, #4]
    2658:	f023 0803 	bic.w	r8, r3, #3
    265c:	45a8      	cmp	r8, r5
    265e:	d304      	bcc.n	266a <_malloc_r+0x206>
    2660:	ebc5 0308 	rsb	r3, r5, r8
    2664:	2b0f      	cmp	r3, #15
    2666:	f300 808c 	bgt.w	2782 <_malloc_r+0x31e>
    266a:	4b55      	ldr	r3, [pc, #340]	; (27c0 <_malloc_r+0x35c>)
    266c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 27d0 <_malloc_r+0x36c>
    2670:	681a      	ldr	r2, [r3, #0]
    2672:	f8d9 3000 	ldr.w	r3, [r9]
    2676:	3301      	adds	r3, #1
    2678:	442a      	add	r2, r5
    267a:	eb04 0a08 	add.w	sl, r4, r8
    267e:	f000 8160 	beq.w	2942 <_malloc_r+0x4de>
    2682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2686:	320f      	adds	r2, #15
    2688:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    268c:	f022 020f 	bic.w	r2, r2, #15
    2690:	4611      	mov	r1, r2
    2692:	4630      	mov	r0, r6
    2694:	9201      	str	r2, [sp, #4]
    2696:	f000 f9ef 	bl	2a78 <_sbrk_r>
    269a:	f1b0 3fff 	cmp.w	r0, #4294967295
    269e:	4683      	mov	fp, r0
    26a0:	9a01      	ldr	r2, [sp, #4]
    26a2:	f000 8158 	beq.w	2956 <_malloc_r+0x4f2>
    26a6:	4582      	cmp	sl, r0
    26a8:	f200 80fc 	bhi.w	28a4 <_malloc_r+0x440>
    26ac:	4b45      	ldr	r3, [pc, #276]	; (27c4 <_malloc_r+0x360>)
    26ae:	6819      	ldr	r1, [r3, #0]
    26b0:	45da      	cmp	sl, fp
    26b2:	4411      	add	r1, r2
    26b4:	6019      	str	r1, [r3, #0]
    26b6:	f000 8153 	beq.w	2960 <_malloc_r+0x4fc>
    26ba:	f8d9 0000 	ldr.w	r0, [r9]
    26be:	f8df e110 	ldr.w	lr, [pc, #272]	; 27d0 <_malloc_r+0x36c>
    26c2:	3001      	adds	r0, #1
    26c4:	bf1b      	ittet	ne
    26c6:	ebca 0a0b 	rsbne	sl, sl, fp
    26ca:	4451      	addne	r1, sl
    26cc:	f8ce b000 	streq.w	fp, [lr]
    26d0:	6019      	strne	r1, [r3, #0]
    26d2:	f01b 0107 	ands.w	r1, fp, #7
    26d6:	f000 8117 	beq.w	2908 <_malloc_r+0x4a4>
    26da:	f1c1 0008 	rsb	r0, r1, #8
    26de:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    26e2:	4483      	add	fp, r0
    26e4:	3108      	adds	r1, #8
    26e6:	445a      	add	r2, fp
    26e8:	f3c2 020b 	ubfx	r2, r2, #0, #12
    26ec:	ebc2 0901 	rsb	r9, r2, r1
    26f0:	4649      	mov	r1, r9
    26f2:	4630      	mov	r0, r6
    26f4:	9301      	str	r3, [sp, #4]
    26f6:	f000 f9bf 	bl	2a78 <_sbrk_r>
    26fa:	1c43      	adds	r3, r0, #1
    26fc:	9b01      	ldr	r3, [sp, #4]
    26fe:	f000 813f 	beq.w	2980 <_malloc_r+0x51c>
    2702:	ebcb 0200 	rsb	r2, fp, r0
    2706:	444a      	add	r2, r9
    2708:	f042 0201 	orr.w	r2, r2, #1
    270c:	6819      	ldr	r1, [r3, #0]
    270e:	f8c7 b008 	str.w	fp, [r7, #8]
    2712:	4449      	add	r1, r9
    2714:	42bc      	cmp	r4, r7
    2716:	f8cb 2004 	str.w	r2, [fp, #4]
    271a:	6019      	str	r1, [r3, #0]
    271c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 27c4 <_malloc_r+0x360>
    2720:	d016      	beq.n	2750 <_malloc_r+0x2ec>
    2722:	f1b8 0f0f 	cmp.w	r8, #15
    2726:	f240 80fd 	bls.w	2924 <_malloc_r+0x4c0>
    272a:	6862      	ldr	r2, [r4, #4]
    272c:	f1a8 030c 	sub.w	r3, r8, #12
    2730:	f023 0307 	bic.w	r3, r3, #7
    2734:	18e0      	adds	r0, r4, r3
    2736:	f002 0201 	and.w	r2, r2, #1
    273a:	f04f 0e05 	mov.w	lr, #5
    273e:	431a      	orrs	r2, r3
    2740:	2b0f      	cmp	r3, #15
    2742:	6062      	str	r2, [r4, #4]
    2744:	f8c0 e004 	str.w	lr, [r0, #4]
    2748:	f8c0 e008 	str.w	lr, [r0, #8]
    274c:	f200 811c 	bhi.w	2988 <_malloc_r+0x524>
    2750:	4b1d      	ldr	r3, [pc, #116]	; (27c8 <_malloc_r+0x364>)
    2752:	68bc      	ldr	r4, [r7, #8]
    2754:	681a      	ldr	r2, [r3, #0]
    2756:	4291      	cmp	r1, r2
    2758:	bf88      	it	hi
    275a:	6019      	strhi	r1, [r3, #0]
    275c:	4b1b      	ldr	r3, [pc, #108]	; (27cc <_malloc_r+0x368>)
    275e:	681a      	ldr	r2, [r3, #0]
    2760:	4291      	cmp	r1, r2
    2762:	6862      	ldr	r2, [r4, #4]
    2764:	bf88      	it	hi
    2766:	6019      	strhi	r1, [r3, #0]
    2768:	f022 0203 	bic.w	r2, r2, #3
    276c:	4295      	cmp	r5, r2
    276e:	eba2 0305 	sub.w	r3, r2, r5
    2772:	d801      	bhi.n	2778 <_malloc_r+0x314>
    2774:	2b0f      	cmp	r3, #15
    2776:	dc04      	bgt.n	2782 <_malloc_r+0x31e>
    2778:	4630      	mov	r0, r6
    277a:	f000 f97b 	bl	2a74 <__malloc_unlock>
    277e:	2400      	movs	r4, #0
    2780:	e738      	b.n	25f4 <_malloc_r+0x190>
    2782:	1962      	adds	r2, r4, r5
    2784:	f043 0301 	orr.w	r3, r3, #1
    2788:	f045 0501 	orr.w	r5, r5, #1
    278c:	6065      	str	r5, [r4, #4]
    278e:	4630      	mov	r0, r6
    2790:	60ba      	str	r2, [r7, #8]
    2792:	6053      	str	r3, [r2, #4]
    2794:	f000 f96e 	bl	2a74 <__malloc_unlock>
    2798:	3408      	adds	r4, #8
    279a:	4620      	mov	r0, r4
    279c:	b003      	add	sp, #12
    279e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27a2:	2b14      	cmp	r3, #20
    27a4:	d971      	bls.n	288a <_malloc_r+0x426>
    27a6:	2b54      	cmp	r3, #84	; 0x54
    27a8:	f200 80a4 	bhi.w	28f4 <_malloc_r+0x490>
    27ac:	0b28      	lsrs	r0, r5, #12
    27ae:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    27b2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    27b6:	306e      	adds	r0, #110	; 0x6e
    27b8:	e676      	b.n	24a8 <_malloc_r+0x44>
    27ba:	bf00      	nop
    27bc:	20000884 	.word	0x20000884
    27c0:	20000f5c 	.word	0x20000f5c
    27c4:	20000f60 	.word	0x20000f60
    27c8:	20000f58 	.word	0x20000f58
    27cc:	20000f54 	.word	0x20000f54
    27d0:	20000c90 	.word	0x20000c90
    27d4:	0a5a      	lsrs	r2, r3, #9
    27d6:	2a04      	cmp	r2, #4
    27d8:	d95e      	bls.n	2898 <_malloc_r+0x434>
    27da:	2a14      	cmp	r2, #20
    27dc:	f200 80b3 	bhi.w	2946 <_malloc_r+0x4e2>
    27e0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    27e4:	0049      	lsls	r1, r1, #1
    27e6:	325b      	adds	r2, #91	; 0x5b
    27e8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    27ec:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    27f0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 29d0 <_malloc_r+0x56c>
    27f4:	f1ac 0c08 	sub.w	ip, ip, #8
    27f8:	458c      	cmp	ip, r1
    27fa:	f000 8088 	beq.w	290e <_malloc_r+0x4aa>
    27fe:	684a      	ldr	r2, [r1, #4]
    2800:	f022 0203 	bic.w	r2, r2, #3
    2804:	4293      	cmp	r3, r2
    2806:	d202      	bcs.n	280e <_malloc_r+0x3aa>
    2808:	6889      	ldr	r1, [r1, #8]
    280a:	458c      	cmp	ip, r1
    280c:	d1f7      	bne.n	27fe <_malloc_r+0x39a>
    280e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    2812:	687a      	ldr	r2, [r7, #4]
    2814:	f8c4 c00c 	str.w	ip, [r4, #12]
    2818:	60a1      	str	r1, [r4, #8]
    281a:	f8cc 4008 	str.w	r4, [ip, #8]
    281e:	60cc      	str	r4, [r1, #12]
    2820:	e688      	b.n	2534 <_malloc_r+0xd0>
    2822:	1963      	adds	r3, r4, r5
    2824:	f042 0701 	orr.w	r7, r2, #1
    2828:	f045 0501 	orr.w	r5, r5, #1
    282c:	6065      	str	r5, [r4, #4]
    282e:	4630      	mov	r0, r6
    2830:	614b      	str	r3, [r1, #20]
    2832:	610b      	str	r3, [r1, #16]
    2834:	f8c3 e00c 	str.w	lr, [r3, #12]
    2838:	f8c3 e008 	str.w	lr, [r3, #8]
    283c:	605f      	str	r7, [r3, #4]
    283e:	509a      	str	r2, [r3, r2]
    2840:	3408      	adds	r4, #8
    2842:	f000 f917 	bl	2a74 <__malloc_unlock>
    2846:	e6d5      	b.n	25f4 <_malloc_r+0x190>
    2848:	684a      	ldr	r2, [r1, #4]
    284a:	e673      	b.n	2534 <_malloc_r+0xd0>
    284c:	f108 0801 	add.w	r8, r8, #1
    2850:	f018 0f03 	tst.w	r8, #3
    2854:	f10c 0c08 	add.w	ip, ip, #8
    2858:	f47f ae7f 	bne.w	255a <_malloc_r+0xf6>
    285c:	e030      	b.n	28c0 <_malloc_r+0x45c>
    285e:	68dc      	ldr	r4, [r3, #12]
    2860:	42a3      	cmp	r3, r4
    2862:	bf08      	it	eq
    2864:	3002      	addeq	r0, #2
    2866:	f43f ae35 	beq.w	24d4 <_malloc_r+0x70>
    286a:	e6b3      	b.n	25d4 <_malloc_r+0x170>
    286c:	440b      	add	r3, r1
    286e:	460c      	mov	r4, r1
    2870:	685a      	ldr	r2, [r3, #4]
    2872:	68c9      	ldr	r1, [r1, #12]
    2874:	f854 5f08 	ldr.w	r5, [r4, #8]!
    2878:	f042 0201 	orr.w	r2, r2, #1
    287c:	605a      	str	r2, [r3, #4]
    287e:	4630      	mov	r0, r6
    2880:	60e9      	str	r1, [r5, #12]
    2882:	608d      	str	r5, [r1, #8]
    2884:	f000 f8f6 	bl	2a74 <__malloc_unlock>
    2888:	e6b4      	b.n	25f4 <_malloc_r+0x190>
    288a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    288e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    2892:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2896:	e607      	b.n	24a8 <_malloc_r+0x44>
    2898:	099a      	lsrs	r2, r3, #6
    289a:	f102 0139 	add.w	r1, r2, #57	; 0x39
    289e:	0049      	lsls	r1, r1, #1
    28a0:	3238      	adds	r2, #56	; 0x38
    28a2:	e7a1      	b.n	27e8 <_malloc_r+0x384>
    28a4:	42bc      	cmp	r4, r7
    28a6:	4b4a      	ldr	r3, [pc, #296]	; (29d0 <_malloc_r+0x56c>)
    28a8:	f43f af00 	beq.w	26ac <_malloc_r+0x248>
    28ac:	689c      	ldr	r4, [r3, #8]
    28ae:	6862      	ldr	r2, [r4, #4]
    28b0:	f022 0203 	bic.w	r2, r2, #3
    28b4:	e75a      	b.n	276c <_malloc_r+0x308>
    28b6:	f859 3908 	ldr.w	r3, [r9], #-8
    28ba:	4599      	cmp	r9, r3
    28bc:	f040 8082 	bne.w	29c4 <_malloc_r+0x560>
    28c0:	f010 0f03 	tst.w	r0, #3
    28c4:	f100 30ff 	add.w	r0, r0, #4294967295
    28c8:	d1f5      	bne.n	28b6 <_malloc_r+0x452>
    28ca:	687b      	ldr	r3, [r7, #4]
    28cc:	ea23 0304 	bic.w	r3, r3, r4
    28d0:	607b      	str	r3, [r7, #4]
    28d2:	0064      	lsls	r4, r4, #1
    28d4:	429c      	cmp	r4, r3
    28d6:	f63f aebd 	bhi.w	2654 <_malloc_r+0x1f0>
    28da:	2c00      	cmp	r4, #0
    28dc:	f43f aeba 	beq.w	2654 <_malloc_r+0x1f0>
    28e0:	421c      	tst	r4, r3
    28e2:	4640      	mov	r0, r8
    28e4:	f47f ae35 	bne.w	2552 <_malloc_r+0xee>
    28e8:	0064      	lsls	r4, r4, #1
    28ea:	421c      	tst	r4, r3
    28ec:	f100 0004 	add.w	r0, r0, #4
    28f0:	d0fa      	beq.n	28e8 <_malloc_r+0x484>
    28f2:	e62e      	b.n	2552 <_malloc_r+0xee>
    28f4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    28f8:	d818      	bhi.n	292c <_malloc_r+0x4c8>
    28fa:	0be8      	lsrs	r0, r5, #15
    28fc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    2900:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2904:	3077      	adds	r0, #119	; 0x77
    2906:	e5cf      	b.n	24a8 <_malloc_r+0x44>
    2908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    290c:	e6eb      	b.n	26e6 <_malloc_r+0x282>
    290e:	2101      	movs	r1, #1
    2910:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2914:	1092      	asrs	r2, r2, #2
    2916:	fa01 f202 	lsl.w	r2, r1, r2
    291a:	431a      	orrs	r2, r3
    291c:	f8c8 2004 	str.w	r2, [r8, #4]
    2920:	4661      	mov	r1, ip
    2922:	e777      	b.n	2814 <_malloc_r+0x3b0>
    2924:	2301      	movs	r3, #1
    2926:	f8cb 3004 	str.w	r3, [fp, #4]
    292a:	e725      	b.n	2778 <_malloc_r+0x314>
    292c:	f240 5254 	movw	r2, #1364	; 0x554
    2930:	4293      	cmp	r3, r2
    2932:	d820      	bhi.n	2976 <_malloc_r+0x512>
    2934:	0ca8      	lsrs	r0, r5, #18
    2936:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    293a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    293e:	307c      	adds	r0, #124	; 0x7c
    2940:	e5b2      	b.n	24a8 <_malloc_r+0x44>
    2942:	3210      	adds	r2, #16
    2944:	e6a4      	b.n	2690 <_malloc_r+0x22c>
    2946:	2a54      	cmp	r2, #84	; 0x54
    2948:	d826      	bhi.n	2998 <_malloc_r+0x534>
    294a:	0b1a      	lsrs	r2, r3, #12
    294c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    2950:	0049      	lsls	r1, r1, #1
    2952:	326e      	adds	r2, #110	; 0x6e
    2954:	e748      	b.n	27e8 <_malloc_r+0x384>
    2956:	68bc      	ldr	r4, [r7, #8]
    2958:	6862      	ldr	r2, [r4, #4]
    295a:	f022 0203 	bic.w	r2, r2, #3
    295e:	e705      	b.n	276c <_malloc_r+0x308>
    2960:	f3ca 000b 	ubfx	r0, sl, #0, #12
    2964:	2800      	cmp	r0, #0
    2966:	f47f aea8 	bne.w	26ba <_malloc_r+0x256>
    296a:	4442      	add	r2, r8
    296c:	68bb      	ldr	r3, [r7, #8]
    296e:	f042 0201 	orr.w	r2, r2, #1
    2972:	605a      	str	r2, [r3, #4]
    2974:	e6ec      	b.n	2750 <_malloc_r+0x2ec>
    2976:	23fe      	movs	r3, #254	; 0xfe
    2978:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    297c:	207e      	movs	r0, #126	; 0x7e
    297e:	e593      	b.n	24a8 <_malloc_r+0x44>
    2980:	2201      	movs	r2, #1
    2982:	f04f 0900 	mov.w	r9, #0
    2986:	e6c1      	b.n	270c <_malloc_r+0x2a8>
    2988:	f104 0108 	add.w	r1, r4, #8
    298c:	4630      	mov	r0, r6
    298e:	f000 f8d3 	bl	2b38 <_free_r>
    2992:	f8d9 1000 	ldr.w	r1, [r9]
    2996:	e6db      	b.n	2750 <_malloc_r+0x2ec>
    2998:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    299c:	d805      	bhi.n	29aa <_malloc_r+0x546>
    299e:	0bda      	lsrs	r2, r3, #15
    29a0:	f102 0178 	add.w	r1, r2, #120	; 0x78
    29a4:	0049      	lsls	r1, r1, #1
    29a6:	3277      	adds	r2, #119	; 0x77
    29a8:	e71e      	b.n	27e8 <_malloc_r+0x384>
    29aa:	f240 5154 	movw	r1, #1364	; 0x554
    29ae:	428a      	cmp	r2, r1
    29b0:	d805      	bhi.n	29be <_malloc_r+0x55a>
    29b2:	0c9a      	lsrs	r2, r3, #18
    29b4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    29b8:	0049      	lsls	r1, r1, #1
    29ba:	327c      	adds	r2, #124	; 0x7c
    29bc:	e714      	b.n	27e8 <_malloc_r+0x384>
    29be:	21fe      	movs	r1, #254	; 0xfe
    29c0:	227e      	movs	r2, #126	; 0x7e
    29c2:	e711      	b.n	27e8 <_malloc_r+0x384>
    29c4:	687b      	ldr	r3, [r7, #4]
    29c6:	e784      	b.n	28d2 <_malloc_r+0x46e>
    29c8:	08e8      	lsrs	r0, r5, #3
    29ca:	1c43      	adds	r3, r0, #1
    29cc:	005b      	lsls	r3, r3, #1
    29ce:	e5f8      	b.n	25c2 <_malloc_r+0x15e>
    29d0:	20000884 	.word	0x20000884

000029d4 <memset>:
    29d4:	b470      	push	{r4, r5, r6}
    29d6:	0784      	lsls	r4, r0, #30
    29d8:	d046      	beq.n	2a68 <memset+0x94>
    29da:	1e54      	subs	r4, r2, #1
    29dc:	2a00      	cmp	r2, #0
    29de:	d041      	beq.n	2a64 <memset+0x90>
    29e0:	b2cd      	uxtb	r5, r1
    29e2:	4603      	mov	r3, r0
    29e4:	e002      	b.n	29ec <memset+0x18>
    29e6:	1e62      	subs	r2, r4, #1
    29e8:	b3e4      	cbz	r4, 2a64 <memset+0x90>
    29ea:	4614      	mov	r4, r2
    29ec:	f803 5b01 	strb.w	r5, [r3], #1
    29f0:	079a      	lsls	r2, r3, #30
    29f2:	d1f8      	bne.n	29e6 <memset+0x12>
    29f4:	2c03      	cmp	r4, #3
    29f6:	d92e      	bls.n	2a56 <memset+0x82>
    29f8:	b2cd      	uxtb	r5, r1
    29fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    29fe:	2c0f      	cmp	r4, #15
    2a00:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    2a04:	d919      	bls.n	2a3a <memset+0x66>
    2a06:	f103 0210 	add.w	r2, r3, #16
    2a0a:	4626      	mov	r6, r4
    2a0c:	3e10      	subs	r6, #16
    2a0e:	2e0f      	cmp	r6, #15
    2a10:	f842 5c10 	str.w	r5, [r2, #-16]
    2a14:	f842 5c0c 	str.w	r5, [r2, #-12]
    2a18:	f842 5c08 	str.w	r5, [r2, #-8]
    2a1c:	f842 5c04 	str.w	r5, [r2, #-4]
    2a20:	f102 0210 	add.w	r2, r2, #16
    2a24:	d8f2      	bhi.n	2a0c <memset+0x38>
    2a26:	f1a4 0210 	sub.w	r2, r4, #16
    2a2a:	f022 020f 	bic.w	r2, r2, #15
    2a2e:	f004 040f 	and.w	r4, r4, #15
    2a32:	3210      	adds	r2, #16
    2a34:	2c03      	cmp	r4, #3
    2a36:	4413      	add	r3, r2
    2a38:	d90d      	bls.n	2a56 <memset+0x82>
    2a3a:	461e      	mov	r6, r3
    2a3c:	4622      	mov	r2, r4
    2a3e:	3a04      	subs	r2, #4
    2a40:	2a03      	cmp	r2, #3
    2a42:	f846 5b04 	str.w	r5, [r6], #4
    2a46:	d8fa      	bhi.n	2a3e <memset+0x6a>
    2a48:	1f22      	subs	r2, r4, #4
    2a4a:	f022 0203 	bic.w	r2, r2, #3
    2a4e:	3204      	adds	r2, #4
    2a50:	4413      	add	r3, r2
    2a52:	f004 0403 	and.w	r4, r4, #3
    2a56:	b12c      	cbz	r4, 2a64 <memset+0x90>
    2a58:	b2c9      	uxtb	r1, r1
    2a5a:	441c      	add	r4, r3
    2a5c:	f803 1b01 	strb.w	r1, [r3], #1
    2a60:	42a3      	cmp	r3, r4
    2a62:	d1fb      	bne.n	2a5c <memset+0x88>
    2a64:	bc70      	pop	{r4, r5, r6}
    2a66:	4770      	bx	lr
    2a68:	4614      	mov	r4, r2
    2a6a:	4603      	mov	r3, r0
    2a6c:	e7c2      	b.n	29f4 <memset+0x20>
    2a6e:	bf00      	nop

00002a70 <__malloc_lock>:
    2a70:	4770      	bx	lr
    2a72:	bf00      	nop

00002a74 <__malloc_unlock>:
    2a74:	4770      	bx	lr
    2a76:	bf00      	nop

00002a78 <_sbrk_r>:
    2a78:	b538      	push	{r3, r4, r5, lr}
    2a7a:	4c07      	ldr	r4, [pc, #28]	; (2a98 <_sbrk_r+0x20>)
    2a7c:	2300      	movs	r3, #0
    2a7e:	4605      	mov	r5, r0
    2a80:	4608      	mov	r0, r1
    2a82:	6023      	str	r3, [r4, #0]
    2a84:	f7fe f8e4 	bl	c50 <_sbrk>
    2a88:	1c43      	adds	r3, r0, #1
    2a8a:	d000      	beq.n	2a8e <_sbrk_r+0x16>
    2a8c:	bd38      	pop	{r3, r4, r5, pc}
    2a8e:	6823      	ldr	r3, [r4, #0]
    2a90:	2b00      	cmp	r3, #0
    2a92:	d0fb      	beq.n	2a8c <_sbrk_r+0x14>
    2a94:	602b      	str	r3, [r5, #0]
    2a96:	bd38      	pop	{r3, r4, r5, pc}
    2a98:	2000328c 	.word	0x2000328c

00002a9c <_malloc_trim_r>:
    2a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a9e:	4f23      	ldr	r7, [pc, #140]	; (2b2c <_malloc_trim_r+0x90>)
    2aa0:	460c      	mov	r4, r1
    2aa2:	4606      	mov	r6, r0
    2aa4:	f7ff ffe4 	bl	2a70 <__malloc_lock>
    2aa8:	68bb      	ldr	r3, [r7, #8]
    2aaa:	685d      	ldr	r5, [r3, #4]
    2aac:	f025 0503 	bic.w	r5, r5, #3
    2ab0:	1b29      	subs	r1, r5, r4
    2ab2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    2ab6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    2aba:	f021 010f 	bic.w	r1, r1, #15
    2abe:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    2ac2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    2ac6:	db07      	blt.n	2ad8 <_malloc_trim_r+0x3c>
    2ac8:	2100      	movs	r1, #0
    2aca:	4630      	mov	r0, r6
    2acc:	f7ff ffd4 	bl	2a78 <_sbrk_r>
    2ad0:	68bb      	ldr	r3, [r7, #8]
    2ad2:	442b      	add	r3, r5
    2ad4:	4298      	cmp	r0, r3
    2ad6:	d004      	beq.n	2ae2 <_malloc_trim_r+0x46>
    2ad8:	4630      	mov	r0, r6
    2ada:	f7ff ffcb 	bl	2a74 <__malloc_unlock>
    2ade:	2000      	movs	r0, #0
    2ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ae2:	4261      	negs	r1, r4
    2ae4:	4630      	mov	r0, r6
    2ae6:	f7ff ffc7 	bl	2a78 <_sbrk_r>
    2aea:	3001      	adds	r0, #1
    2aec:	d00d      	beq.n	2b0a <_malloc_trim_r+0x6e>
    2aee:	4b10      	ldr	r3, [pc, #64]	; (2b30 <_malloc_trim_r+0x94>)
    2af0:	68ba      	ldr	r2, [r7, #8]
    2af2:	6819      	ldr	r1, [r3, #0]
    2af4:	1b2d      	subs	r5, r5, r4
    2af6:	f045 0501 	orr.w	r5, r5, #1
    2afa:	4630      	mov	r0, r6
    2afc:	1b09      	subs	r1, r1, r4
    2afe:	6055      	str	r5, [r2, #4]
    2b00:	6019      	str	r1, [r3, #0]
    2b02:	f7ff ffb7 	bl	2a74 <__malloc_unlock>
    2b06:	2001      	movs	r0, #1
    2b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b0a:	2100      	movs	r1, #0
    2b0c:	4630      	mov	r0, r6
    2b0e:	f7ff ffb3 	bl	2a78 <_sbrk_r>
    2b12:	68ba      	ldr	r2, [r7, #8]
    2b14:	1a83      	subs	r3, r0, r2
    2b16:	2b0f      	cmp	r3, #15
    2b18:	ddde      	ble.n	2ad8 <_malloc_trim_r+0x3c>
    2b1a:	4c06      	ldr	r4, [pc, #24]	; (2b34 <_malloc_trim_r+0x98>)
    2b1c:	4904      	ldr	r1, [pc, #16]	; (2b30 <_malloc_trim_r+0x94>)
    2b1e:	6824      	ldr	r4, [r4, #0]
    2b20:	f043 0301 	orr.w	r3, r3, #1
    2b24:	1b00      	subs	r0, r0, r4
    2b26:	6053      	str	r3, [r2, #4]
    2b28:	6008      	str	r0, [r1, #0]
    2b2a:	e7d5      	b.n	2ad8 <_malloc_trim_r+0x3c>
    2b2c:	20000884 	.word	0x20000884
    2b30:	20000f60 	.word	0x20000f60
    2b34:	20000c90 	.word	0x20000c90

00002b38 <_free_r>:
    2b38:	2900      	cmp	r1, #0
    2b3a:	d045      	beq.n	2bc8 <_free_r+0x90>
    2b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b40:	460d      	mov	r5, r1
    2b42:	4680      	mov	r8, r0
    2b44:	f7ff ff94 	bl	2a70 <__malloc_lock>
    2b48:	f855 7c04 	ldr.w	r7, [r5, #-4]
    2b4c:	496a      	ldr	r1, [pc, #424]	; (2cf8 <_free_r+0x1c0>)
    2b4e:	f027 0301 	bic.w	r3, r7, #1
    2b52:	f1a5 0408 	sub.w	r4, r5, #8
    2b56:	18e2      	adds	r2, r4, r3
    2b58:	688e      	ldr	r6, [r1, #8]
    2b5a:	6850      	ldr	r0, [r2, #4]
    2b5c:	42b2      	cmp	r2, r6
    2b5e:	f020 0003 	bic.w	r0, r0, #3
    2b62:	d062      	beq.n	2c2a <_free_r+0xf2>
    2b64:	07fe      	lsls	r6, r7, #31
    2b66:	6050      	str	r0, [r2, #4]
    2b68:	d40b      	bmi.n	2b82 <_free_r+0x4a>
    2b6a:	f855 7c08 	ldr.w	r7, [r5, #-8]
    2b6e:	1be4      	subs	r4, r4, r7
    2b70:	f101 0e08 	add.w	lr, r1, #8
    2b74:	68a5      	ldr	r5, [r4, #8]
    2b76:	4575      	cmp	r5, lr
    2b78:	443b      	add	r3, r7
    2b7a:	d06f      	beq.n	2c5c <_free_r+0x124>
    2b7c:	68e7      	ldr	r7, [r4, #12]
    2b7e:	60ef      	str	r7, [r5, #12]
    2b80:	60bd      	str	r5, [r7, #8]
    2b82:	1815      	adds	r5, r2, r0
    2b84:	686d      	ldr	r5, [r5, #4]
    2b86:	07ed      	lsls	r5, r5, #31
    2b88:	d542      	bpl.n	2c10 <_free_r+0xd8>
    2b8a:	f043 0201 	orr.w	r2, r3, #1
    2b8e:	6062      	str	r2, [r4, #4]
    2b90:	50e3      	str	r3, [r4, r3]
    2b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2b96:	d218      	bcs.n	2bca <_free_r+0x92>
    2b98:	08db      	lsrs	r3, r3, #3
    2b9a:	1c5a      	adds	r2, r3, #1
    2b9c:	684d      	ldr	r5, [r1, #4]
    2b9e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    2ba2:	60a7      	str	r7, [r4, #8]
    2ba4:	2001      	movs	r0, #1
    2ba6:	109b      	asrs	r3, r3, #2
    2ba8:	fa00 f303 	lsl.w	r3, r0, r3
    2bac:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    2bb0:	431d      	orrs	r5, r3
    2bb2:	3808      	subs	r0, #8
    2bb4:	60e0      	str	r0, [r4, #12]
    2bb6:	604d      	str	r5, [r1, #4]
    2bb8:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    2bbc:	60fc      	str	r4, [r7, #12]
    2bbe:	4640      	mov	r0, r8
    2bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2bc4:	f7ff bf56 	b.w	2a74 <__malloc_unlock>
    2bc8:	4770      	bx	lr
    2bca:	0a5a      	lsrs	r2, r3, #9
    2bcc:	2a04      	cmp	r2, #4
    2bce:	d853      	bhi.n	2c78 <_free_r+0x140>
    2bd0:	099a      	lsrs	r2, r3, #6
    2bd2:	f102 0739 	add.w	r7, r2, #57	; 0x39
    2bd6:	007f      	lsls	r7, r7, #1
    2bd8:	f102 0538 	add.w	r5, r2, #56	; 0x38
    2bdc:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    2be0:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    2be4:	4944      	ldr	r1, [pc, #272]	; (2cf8 <_free_r+0x1c0>)
    2be6:	3808      	subs	r0, #8
    2be8:	4290      	cmp	r0, r2
    2bea:	d04d      	beq.n	2c88 <_free_r+0x150>
    2bec:	6851      	ldr	r1, [r2, #4]
    2bee:	f021 0103 	bic.w	r1, r1, #3
    2bf2:	428b      	cmp	r3, r1
    2bf4:	d202      	bcs.n	2bfc <_free_r+0xc4>
    2bf6:	6892      	ldr	r2, [r2, #8]
    2bf8:	4290      	cmp	r0, r2
    2bfa:	d1f7      	bne.n	2bec <_free_r+0xb4>
    2bfc:	68d0      	ldr	r0, [r2, #12]
    2bfe:	60e0      	str	r0, [r4, #12]
    2c00:	60a2      	str	r2, [r4, #8]
    2c02:	6084      	str	r4, [r0, #8]
    2c04:	60d4      	str	r4, [r2, #12]
    2c06:	4640      	mov	r0, r8
    2c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2c0c:	f7ff bf32 	b.w	2a74 <__malloc_unlock>
    2c10:	6895      	ldr	r5, [r2, #8]
    2c12:	4f3a      	ldr	r7, [pc, #232]	; (2cfc <_free_r+0x1c4>)
    2c14:	42bd      	cmp	r5, r7
    2c16:	4403      	add	r3, r0
    2c18:	d03f      	beq.n	2c9a <_free_r+0x162>
    2c1a:	68d0      	ldr	r0, [r2, #12]
    2c1c:	60e8      	str	r0, [r5, #12]
    2c1e:	f043 0201 	orr.w	r2, r3, #1
    2c22:	6085      	str	r5, [r0, #8]
    2c24:	6062      	str	r2, [r4, #4]
    2c26:	50e3      	str	r3, [r4, r3]
    2c28:	e7b3      	b.n	2b92 <_free_r+0x5a>
    2c2a:	07ff      	lsls	r7, r7, #31
    2c2c:	4403      	add	r3, r0
    2c2e:	d407      	bmi.n	2c40 <_free_r+0x108>
    2c30:	f855 2c08 	ldr.w	r2, [r5, #-8]
    2c34:	1aa4      	subs	r4, r4, r2
    2c36:	4413      	add	r3, r2
    2c38:	68a0      	ldr	r0, [r4, #8]
    2c3a:	68e2      	ldr	r2, [r4, #12]
    2c3c:	60c2      	str	r2, [r0, #12]
    2c3e:	6090      	str	r0, [r2, #8]
    2c40:	4a2f      	ldr	r2, [pc, #188]	; (2d00 <_free_r+0x1c8>)
    2c42:	6812      	ldr	r2, [r2, #0]
    2c44:	f043 0001 	orr.w	r0, r3, #1
    2c48:	4293      	cmp	r3, r2
    2c4a:	6060      	str	r0, [r4, #4]
    2c4c:	608c      	str	r4, [r1, #8]
    2c4e:	d3b6      	bcc.n	2bbe <_free_r+0x86>
    2c50:	4b2c      	ldr	r3, [pc, #176]	; (2d04 <_free_r+0x1cc>)
    2c52:	4640      	mov	r0, r8
    2c54:	6819      	ldr	r1, [r3, #0]
    2c56:	f7ff ff21 	bl	2a9c <_malloc_trim_r>
    2c5a:	e7b0      	b.n	2bbe <_free_r+0x86>
    2c5c:	1811      	adds	r1, r2, r0
    2c5e:	6849      	ldr	r1, [r1, #4]
    2c60:	07c9      	lsls	r1, r1, #31
    2c62:	d444      	bmi.n	2cee <_free_r+0x1b6>
    2c64:	6891      	ldr	r1, [r2, #8]
    2c66:	68d2      	ldr	r2, [r2, #12]
    2c68:	60ca      	str	r2, [r1, #12]
    2c6a:	4403      	add	r3, r0
    2c6c:	f043 0001 	orr.w	r0, r3, #1
    2c70:	6091      	str	r1, [r2, #8]
    2c72:	6060      	str	r0, [r4, #4]
    2c74:	50e3      	str	r3, [r4, r3]
    2c76:	e7a2      	b.n	2bbe <_free_r+0x86>
    2c78:	2a14      	cmp	r2, #20
    2c7a:	d817      	bhi.n	2cac <_free_r+0x174>
    2c7c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    2c80:	007f      	lsls	r7, r7, #1
    2c82:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    2c86:	e7a9      	b.n	2bdc <_free_r+0xa4>
    2c88:	10aa      	asrs	r2, r5, #2
    2c8a:	684b      	ldr	r3, [r1, #4]
    2c8c:	2501      	movs	r5, #1
    2c8e:	fa05 f202 	lsl.w	r2, r5, r2
    2c92:	4313      	orrs	r3, r2
    2c94:	604b      	str	r3, [r1, #4]
    2c96:	4602      	mov	r2, r0
    2c98:	e7b1      	b.n	2bfe <_free_r+0xc6>
    2c9a:	f043 0201 	orr.w	r2, r3, #1
    2c9e:	614c      	str	r4, [r1, #20]
    2ca0:	610c      	str	r4, [r1, #16]
    2ca2:	60e5      	str	r5, [r4, #12]
    2ca4:	60a5      	str	r5, [r4, #8]
    2ca6:	6062      	str	r2, [r4, #4]
    2ca8:	50e3      	str	r3, [r4, r3]
    2caa:	e788      	b.n	2bbe <_free_r+0x86>
    2cac:	2a54      	cmp	r2, #84	; 0x54
    2cae:	d806      	bhi.n	2cbe <_free_r+0x186>
    2cb0:	0b1a      	lsrs	r2, r3, #12
    2cb2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    2cb6:	007f      	lsls	r7, r7, #1
    2cb8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    2cbc:	e78e      	b.n	2bdc <_free_r+0xa4>
    2cbe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    2cc2:	d806      	bhi.n	2cd2 <_free_r+0x19a>
    2cc4:	0bda      	lsrs	r2, r3, #15
    2cc6:	f102 0778 	add.w	r7, r2, #120	; 0x78
    2cca:	007f      	lsls	r7, r7, #1
    2ccc:	f102 0577 	add.w	r5, r2, #119	; 0x77
    2cd0:	e784      	b.n	2bdc <_free_r+0xa4>
    2cd2:	f240 5054 	movw	r0, #1364	; 0x554
    2cd6:	4282      	cmp	r2, r0
    2cd8:	d806      	bhi.n	2ce8 <_free_r+0x1b0>
    2cda:	0c9a      	lsrs	r2, r3, #18
    2cdc:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    2ce0:	007f      	lsls	r7, r7, #1
    2ce2:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    2ce6:	e779      	b.n	2bdc <_free_r+0xa4>
    2ce8:	27fe      	movs	r7, #254	; 0xfe
    2cea:	257e      	movs	r5, #126	; 0x7e
    2cec:	e776      	b.n	2bdc <_free_r+0xa4>
    2cee:	f043 0201 	orr.w	r2, r3, #1
    2cf2:	6062      	str	r2, [r4, #4]
    2cf4:	50e3      	str	r3, [r4, r3]
    2cf6:	e762      	b.n	2bbe <_free_r+0x86>
    2cf8:	20000884 	.word	0x20000884
    2cfc:	2000088c 	.word	0x2000088c
    2d00:	20000c8c 	.word	0x20000c8c
    2d04:	20000f5c 	.word	0x20000f5c

00002d08 <___init_veneer>:
    2d08:	f85f f000 	ldr.w	pc, [pc]	; 2d0c <___init_veneer+0x4>
    2d0c:	60001729 	.word	0x60001729

Disassembly of section .fini:

00002d10 <_fini>:
    2d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d12:	bf00      	nop
